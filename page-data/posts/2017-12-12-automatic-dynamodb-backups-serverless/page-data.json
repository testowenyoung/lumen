{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-12-12-automatic-dynamodb-backups-serverless/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"50a8fba0-2cff-54b3-a626-e0786cc56923","excerpt":"The good news: AWS announced DynamoDB backups at re:Invent 2017. This will save a lot of unnecessary ops burden. The bad news? You canâ€™t schedule and automateâ€¦","html":"<p>The good news: AWS announced <a href=\"https://aws.amazon.com/blogs/aws/new-for-amazon-dynamodb-global-tables-and-on-demand-backup/\">DynamoDB backups</a> at re:Invent 2017. This will save a lot of unnecessary ops burden.</p>\n<p>The bad news? You canâ€™t schedule and automate your backups. You need to manually click in the console to create your backup.</p>\n<p><strong>Have no fear, an automated solution is here.</strong> </p>\n<p>Use the power of <a href=\"https://serverless.com\">Serverless</a> to automatically backup your <a href=\"https://serverless.com/dynamodb/\">DynamoDB</a> tables on a schedule! </p>\n<p>Follow the steps below to use our project to backup your DynamoDB tables.</p>\n<h1>Serverless DynamoDB Backups</h1>\n<p>Weâ€™ve created a <a href=\"https://github.com/alexdebrie/serverless-dynamodb-backups\">Serverless project on GitHub</a> to create DynamoDB backups on a schedule. Usage of the project is simple.</p>\n<p><strong>First, <a href=\"https://serverless.com/framework/docs/providers/aws/guide/quick-start/\">install the Serverless Framework</a>:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g serverless</code></pre></div>\n<p>Youâ€™ll need AWS credentials configured in your terminal. Want help with these? <a href=\"https://serverless.com/provider-setup/#get-started\">Check out our walkthrough</a>.</p>\n<p><strong>Then, use the Frameworkâ€™s install command to install a project template from a GitHub repo:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls <span class=\"token function\">install</span> --url https://github.com/alexdebrie/serverless-dynamodb-backups <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> serverless-dynamodb-backups</code></pre></div>\n<p>Edit the configuration in the <code class=\"language-text\">custom</code> block of <code class=\"language-text\">serverless.yml</code> to match your configuration. This includes setting the <code class=\"language-text\">tableName</code> of your DynamoDB table, the <code class=\"language-text\">backupRate</code> at which you want to create backups, the AWS region where your table is located, and optionally a <code class=\"language-text\">slackWebhook</code> to send Slack notifications. </p>\n<blockquote>\n<p>Want help setting up a Slack webhook? Check out <a href=\"#setting-up-a-slack-webhook\">the walkthrough</a>.</p>\n</blockquote>\n<p><strong>Finally, deploy your Serverless service:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls deploy\nServerless: Packaging service<span class=\"token punctuation\">..</span>.\nServerless: Excluding development dependencies<span class=\"token punctuation\">..</span>.\nServerless: Creating Stack<span class=\"token punctuation\">..</span>.\nServerless: Checking Stack create progress<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.\nServerless: Stack create finished<span class=\"token punctuation\">..</span>.\nServerless: Uploading CloudFormation <span class=\"token function\">file</span> to S3<span class=\"token punctuation\">..</span>.\nServerless: Uploading artifacts<span class=\"token punctuation\">..</span>.\nServerless: Uploading <span class=\"token function\">service</span> .zip <span class=\"token function\">file</span> to S3 <span class=\"token punctuation\">(</span><span class=\"token number\">62.98</span> KB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span>.\nServerless: Validating template<span class=\"token punctuation\">..</span>.\nServerless: Updating Stack<span class=\"token punctuation\">..</span>.\nServerless: Checking Stack update progress<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.\nServerless: Stack update finished<span class=\"token punctuation\">..</span>.\nService Information\nservice: serverless-dynamodb-backups\nstage: dev\nregion: us-west-2\nstack: serverless-dynamodb-backups-dev\napi keys:\n  None\nendpoints:\n  None\nfunctions:\n  createBackup: serverless-dynamodb-backups-dev-createBackup</code></pre></div>\n<p>Thatâ€™s it - your service will create DynamoDB backups on your desired schedule! Youâ€™re an Ops superhero.</p>\n<h1>Setting up a Slack Webhook</h1>\n<p>If you want fancy Slack notifications when a backup succeeds or fails, follow the steps below. </p>\n<p>In the end, youâ€™ll receive notifications like:</p>\n<img width=\"671\" alt=\"Backup Notification\" src=\"https://user-images.githubusercontent.com/6509926/33861700-e0c37f24-dea4-11e7-9661-c86cb9fe7eb4.png\">\n<p>First, go to the channel you want to send notifications to and click <strong>Add an app:</strong></p>\n<img width=\"840\" alt=\"Add an app\" src=\"https://user-images.githubusercontent.com/6509926/33861382-31047fa8-dea3-11e7-8175-3d4e859ad023.png\">\n<p>In the page that opens, search for <code class=\"language-text\">Incoming Webhooks</code> and click on it. Then click <code class=\"language-text\">Add Configuration</code>. It should show your selected channel in the box. Then click <code class=\"language-text\">Add Incoming WebHooks Integration</code>.</p>\n<p>Once youâ€™ve created it, the page will show your Webhook URL: </p>\n<img width=\"1000\" alt=\"Webhook URL\" src=\"https://user-images.githubusercontent.com/6509926/33862256-6bc2b624-dea7-11e7-9fe0-b993e8692494.png\">\n<p><strong>Copy and save this, as youâ€™ll need it in your Serverless service.</strong></p>\n<p>By default, it uses a boring <code class=\"language-text\">incoming-webhook</code> display name and a boring image. I like to customize it a bit:</p>\n<img width=\"996\" alt=\"Webhook display\" src=\"https://user-images.githubusercontent.com/6509926/33862690-9e465f04-dea9-11e7-94ba-cace749d0a75.png\">\n<p>Paste your Webhook URL into the <code class=\"language-text\">serverless.yml</code> as the <code class=\"language-text\">slackWebhook</code>, deploy your service, and youâ€™ll start receiving notifications!</p>\n<h1>Additional Notes</h1>\n<p>For the curious, Iâ€™ll pass along some extra details and troubleshooting tips.</p>\n<h3>Not all DynamoDB tables have backup enabled.</h3>\n<p>For some reason, not all DynamoDB tables are eligible to take a backup. Iâ€™ve found itâ€™s my older tables that donâ€™t allow backups.</p>\n<p>If backups arenâ€™t enabled for your table, attempting a backup will throw a <code class=\"language-text\">ContinuousBackupsUnavailableException</code>.</p>\n<h3>Backup Names are finicky</h3>\n<p>When creating a backup, you need to specify a backup name. I was using the name of the table plus the ISO 8601 format. I kept getting an opaque error of:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Error: An error occurred (InternalServerError) when calling the CreateBackup operation (reached max retries: 9): Internal server error</code></pre></div>\n<p>I finally discovered that AWS doesnâ€™t allow colons in backup names. ðŸ¤” Cryptic errors aside, I just changed my timestamp to be <code class=\"language-text\">YYYYMMDDHHMMSS</code>.</p>\n<h3>Outdated Botocore</h3>\n<p>To make the API call to create a backup, Iâ€™m using the <a href=\"http://boto3.readthedocs.io/en/latest/\">boto3</a> library for making AWS API calls in Python. It uses a second library called <a href=\"https://github.com/boto/botocore\">botocore</a> for understanding the shape of the AWS API.</p>\n<p>Botocore uses a bunch of JSON files to describe the methods, inputs, outputs, and more of its various services. You can see the <a href=\"https://github.com/boto/botocore/tree/develop/botocore/data\">whole list here</a>. To use a new operation, such as <code class=\"language-text\">create_backup()</code> for DynamoDB, you need to make sure you have a version of <code class=\"language-text\">botocore</code> with the proper models.</p>\n<p><code class=\"language-text\">Boto3</code> and <code class=\"language-text\">botocore</code> are packaged into the AWS Lambda environment, which is nice most of the time. It means you donâ€™t have to package your own AWS API packages into your Lambda zip files. Itâ€™s annoying in times like these, right after re:Invent, when the outdated <code class=\"language-text\">botocore</code> dependency means you can use the newest methods.</p>\n<p>Fortunately, you can upload your own <code class=\"language-text\">botocore</code> data files without packaging your own version of <code class=\"language-text\">botocore</code>! All you need to do is copy the data files for your desired models into your deployment package. You can see Iâ€™ve <a href=\"https://github.com/alexdebrie/serverless-dynamodb-backups/tree/master/dynamodb/2012-08-10\">included the DynamoDB files here</a>. Then, set the <code class=\"language-text\">AWS_DATA_PATH</code> <a href=\"http://boto3.readthedocs.io/en/latest/guide/configuration.html#environment-variable-configuration\">environment variable</a> to the path where your data files are stored. I do it <a href=\"https://github.com/alexdebrie/serverless-dynamodb-backups/blob/master/handler.py#L4-L8\">directly in my function handler</a> before importing <code class=\"language-text\">boto3</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n\n<span class=\"token comment\"># To get updated botocore data files</span>\nos<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">'AWS_DATA_PATH'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'.'</span>\n\n<span class=\"token keyword\">import</span> boto3\n<span class=\"token keyword\">import</span> botocore\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p><img src=\"https://media.giphy.com/media/83QtfwKWdmSEo/giphy.gif\" alt=\"The More You Know\"></p>","frontmatter":{"title":"Automate your DynamoDB backups with Serverless in less than 5 minutes","date":"December 12, 2017","description":"Using the Serverless Framework, you can set up automatic backups of your DynamoDB table."}}},"pageContext":{"slug":"/posts/2017-12-12-automatic-dynamodb-backups-serverless/","previous":{"fields":{"slug":"/posts/2017-12-06-ci-cd-workflow-serverless-apps-with-circleci/"},"frontmatter":{"title":"Automating CI/CD workflow for serverless apps with CircleCI"}},"next":{"fields":{"slug":"/posts/2017-12-13-announcing-first-cohort-serverless-champions-2017/"},"frontmatter":{"title":"The Serverless Champions Program HAS BEGUN!"}}}}}
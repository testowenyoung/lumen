{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-10-20-make-serverless-graphql-api-using-lambda-dynamodb/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"e3ed23e6-22a0-5859-a3bb-0ac7670865e9","excerpt":"To see how DynamoDB compares to MongoDB, Cassandra, or BigTable, see here. The  module makes it easy to rapidly create a GraphQL service that validates queries…","html":"<p><em>To see how DynamoDB compares to MongoDB, Cassandra, or BigTable, <a href=\"https://serverless.com/dynamodb/\">see here</a>.</em></p>\n<p>The <code class=\"language-text\">graphql</code> module makes it easy to rapidly create a GraphQL service that validates queries. We use GraphQL at <a href=\"https://serverless.com\">Serverless.com</a> to query our backend services, and we love how well it fits into the serverless paradigm.</p>\n<p>Interested in building your own GraphQL API? Awesome. Here we go.</p>\n<h4>Building the API</h4>\n<p>In this example, I’ll be targeting AWS. Let’s build a simplistic version of an API that might be used by the front-end to retrieve a dynamic message to display in the UI; in this case, greeting the user by name.</p>\n<p>Start by initializing a project and installing the <a href=\"https://www.npmjs.com/package/graphql\">graphql</a> module:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ npm init\n$ npm install --save graphql</code></pre></div>\n<p>Now we can use it in <code class=\"language-text\">handler.js</code>, where we declare a schema and then use it to serve query requests:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* handler.js */</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n  graphql<span class=\"token punctuation\">,</span>\n  GraphQLSchema<span class=\"token punctuation\">,</span>\n  GraphQLObjectType<span class=\"token punctuation\">,</span>\n  GraphQLString<span class=\"token punctuation\">,</span>\n  GraphQLNonNull\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'graphql'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// This method just inserts the user's first name into the greeting message.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getGreeting</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">firstName</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>firstName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token comment\">// Here we declare the schema and resolvers for the query</span>\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  query<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'RootQueryType'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// an arbitrary name</span>\n    fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// the query has a field called 'greeting'</span>\n      greeting<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// we need to know the user's name to greet them</span>\n        args<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> firstName<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'firstName'</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLNonNull</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// the greeting message is a string</span>\n        type<span class=\"token operator\">:</span> GraphQLString<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// resolve to a greeting message</span>\n        <span class=\"token function-variable function\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">getGreeting</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// We want to make a GET request with ?query=&lt;graphql query></span>\n<span class=\"token comment\">// The event properties are specific to AWS. Other providers will differ.</span>\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">query</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">graphql</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>queryStringParameters<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n    <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pretty simple! To deploy it, define a service in <code class=\"language-text\">serverless.yml</code>, and set the handler to service HTTP requests:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> graphql<span class=\"token punctuation\">-</span>api\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">query</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.query\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> query\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get</code></pre></div>\n<p>Now we can bring it to life:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ serverless deploy\n# Serverless: Packaging service...\n# Serverless: Excluding development dependencies...\n# Serverless: Uploading CloudFormation file to S3...\n# Serverless: Uploading artifacts...\n# Serverless: Uploading service .zip file to S3 (357.34 KB)...\n# Serverless: Validating template...\n# Serverless: Updating Stack...\n# Serverless: Checking Stack update progress...\n# ..............\n# Serverless: Stack update finished...\n# Service Information\n# service: graphql-api\n# stage: dev\n# region: us-east-1\n# stack: graphql-api-dev\n# api keys:\n#   None\n# endpoints:\n#   GET - https://9qdmq5nvql.execute-api.us-east-1.amazonaws.com/dev/query\n# functions:\n#   query: graphql-api-dev-query\n\n$ curl -G &#39;https://9qdmq5nvql.execute-api.us-east-1.amazonaws.com/dev/query&#39; --data-urlencode &#39;query={greeting(firstName: &quot;Jeremy&quot;)}&#39;\n# {&quot;data&quot;:{&quot;greeting&quot;:&quot;Hello, Jeremy.&quot;}}</code></pre></div>\n<h4>Creating the database</h4>\n<p>In the real world, virtually any service that does something valuable has a data store behind it. Suppose users have nicknames that should appear in the greeting message; we need a database to store those nicknames, and we can expand our GraphQL API to update them.</p>\n<p>Let’s start by adding a database to the resource definitions in <code class=\"language-text\">serverless.yml</code>. We need a table keyed on the user’s first name, which we define using CloudFormation, as well as some provider configuration to allow our function to access it:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># add to serverless.yml</span>\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">DYNAMODB_TABLE</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>service<span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>provider.stage<span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">iamRoleStatements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">Effect</span><span class=\"token punctuation\">:</span> Allow\n      <span class=\"token key atrule\">Action</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>GetItem\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>UpdateItem\n      <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"</span>\n\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">NicknamesTable</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::DynamoDB::Table'</span>\n      <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">AttributeDefinitions</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> firstName\n            <span class=\"token key atrule\">AttributeType</span><span class=\"token punctuation\">:</span> S\n        <span class=\"token key atrule\">KeySchema</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> firstName\n            <span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> HASH\n        <span class=\"token key atrule\">ProvisionedThroughput</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">ReadCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n          <span class=\"token key atrule\">WriteCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token key atrule\">TableName</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>provider.environment.DYNAMODB_TABLE<span class=\"token punctuation\">}</span></code></pre></div>\n<p>To use it, we’ll need the <a href=\"https://www.npmjs.com/package/aws-sdk\">aws-sdk</a>. Here’s how you’d use the SDK’s vanilla DocumentClient to access DynamoDB records:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ npm install --save aws-sdk</code></pre></div>\n<p>Include these in our handler, and then we can get to work:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// add to handler.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dynamoDb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>DynamoDB<span class=\"token punctuation\">.</span>DocumentClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We started by defining a method that returned a simple string value for the greeting message. However, the GraphQL library can also use Promises as resolvers.</p>\n<p>Since the DocumentClient uses a callback pattern, we’ll wrap these in promises and use the DynamoDB <code class=\"language-text\">get</code> method to check the database for a nickname for the user:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// add to handler.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">promisify</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">foo</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// replace previous implementation of getGreeting</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getGreeting</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">firstName</span> <span class=\"token operator\">=></span> <span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span> <span class=\"token operator\">=></span>\n  dynamoDb<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    TableName<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DYNAMODB_TABLE</span><span class=\"token punctuation\">,</span>\n    Key<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> firstName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> firstName\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">.</span>nickname\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// add method for updates</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeNickname</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">firstName<span class=\"token punctuation\">,</span> nickname</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span> <span class=\"token operator\">=></span>\n  dynamoDb<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    TableName<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DYNAMODB_TABLE</span><span class=\"token punctuation\">,</span>\n    Key<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> firstName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    UpdateExpression<span class=\"token operator\">:</span> <span class=\"token string\">'SET nickname = :nickname'</span><span class=\"token punctuation\">,</span>\n    ExpressionAttributeValues<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">':nickname'</span><span class=\"token operator\">:</span> nickname\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> nickname<span class=\"token punctuation\">)</span></code></pre></div>\n<p>You can see here that we added a method <code class=\"language-text\">changeNickname</code>, but the GraphQL API is not yet using it. We need to declare a mutation that the front-end can use to perform updates.</p>\n<p>We previously only added a <code class=\"language-text\">query</code> declaration to the schema; now we need a <code class=\"language-text\">mutation</code> as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// alter schema</span>\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  query<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* unchanged */</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  mutation<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'RootMutationType'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// an arbitrary name</span>\n    fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      changeNickname<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        args<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// we need the user's first name as well as a preferred nickname</span>\n          firstName<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'firstName'</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLNonNull</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          nickname<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'nickname'</span><span class=\"token punctuation\">,</span> type<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLNonNull</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        type<span class=\"token operator\">:</span> GraphQLString<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// update the nickname</span>\n        <span class=\"token function-variable function\">resolve</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">changeNickname</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span>nickname<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>After these changes, we can make the greeting request again and receive the same result as before:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ curl -G &#39;https://9qdmq5nvql.execute-api.us-east-1.amazonaws.com/dev/query&#39; --data-urlencode &#39;query={greeting(firstName: &quot;Jeremy&quot;)}&#39;\n# {&quot;data&quot;:{&quot;greeting&quot;:&quot;Hello, Jeremy.&quot;}}</code></pre></div>\n<p>But if I want the API to call me “Jer”, I can update the nickname for “Jeremy”:</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">$ curl -G &#39;https://9qdmq5nvql.execute-api.us-east-1.amazonaws.com/dev/query&#39; --data-urlencode &#39;query=mutation {changeNickname(firstName:\n&quot;Jeremy&quot;, nickname: &quot;Jer&quot;)}&#39;\n$ curl -G &#39;https://9qdmq5nvql.execute-api.us-east-1.amazonaws.com/dev/query&#39; --data-urlencode &#39;query={greeting(firstName: &quot;Jeremy&quot;)}&#39;\n# {&quot;data&quot;:{&quot;greeting&quot;:&quot;Hello, Jer.&quot;}}</code></pre></div>\n<p>The API will now call anyone named “Jeremy” by the nickname “Jer”.</p>\n<p>Separation of concerns like this let you build front-ends and services that offload logic into backends. Those backends can then encapsulate data access and processing behind a strongly-typed, validating, uniform contract that comes with rich versioning and deprecation strategies.</p>\n<h4>Deploy your own!</h4>\n<p>To deploy this service yourself, download the <a href=\"https://github.com/serverless/examples/tree/master/aws-node-graphql-api-with-dynamodb\">source code</a> and deploy it with the <a href=\"https://serverless.com/framework/\">Serverless Framework</a>. Or, take a look at <a href=\"https://github.com/boazdejong/serverless-graphql-api\">a larger example project</a> for ideas on project structure and factoring.</p>\n<h4>Architectural Diagram</h4>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/Thom&#x27;s+Posts/graphql.jpg\" alt=\"Architectural Diagram\"></p>\n<p>Happy building!</p>","frontmatter":{"title":"How to Make a Serverless GraphQL API using Lambda and DynamoDB","date":"October 20, 2017","description":"GraphQL and Serverless play so well together. Learn how to make your own GraphQL API using Lambda an DynamoDB."}}},"pageContext":{"slug":"/posts/2017-10-20-make-serverless-graphql-api-using-lambda-dynamodb/","previous":{"fields":{"slug":"/posts/2017-10-19-avoid-startup-chaos-be-mini-ceo/"},"frontmatter":{"title":"Embrace the mini CEO"}},"next":{"fields":{"slug":"/posts/2017-10-20-google-cloud-functions-application/"},"frontmatter":{"title":"Building an image recognition endpoint with Serverless and Google Cloud Functions."}}}}}
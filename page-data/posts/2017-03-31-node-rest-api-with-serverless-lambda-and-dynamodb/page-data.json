{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-03-31-node-rest-api-with-serverless-lambda-and-dynamodb/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"1ae8adde-0a13-55ac-8574-8d8213cf6c9d","excerpt":"Serverless means different things depending on the context. It could mean using third party managed services like Firebase, or it could mean an event-driven…","html":"<p>Serverless means different things depending on the context. It could mean using third party managed services like Firebase, or it could mean an event-driven architecture style. It could mean next generation compute service offered by cloud providers, or it could mean a framework to build Serverless applications.</p>\n<p>In this tutorial, you’ll learn how to build a REST API following the Serverless approach using <a href=\"https://serverless.com/aws-lambda/\">AWS Lambda</a>, API Gateway, DynamoDB, and the Serverless Framework. AWS Lambda is the third compute service from Amazon. It’s very different from the existing two compute services EC2 (Elastic Compute Cloud) and ECS (Elastic Container Service). AWS Lambda is an event-driven, serverless computing platform that executes your code in response to events. It manages the underlying infrastructure scaling it up or down to meet the event rate. You’re only charged for the time your code is executed. AWS Lambda currently supports Java, Python, and Node.js language runtimes. </p>\n<blockquote>\n<p>This tutorial is part of my <a href=\"https://github.com/shekhargulati/hands-on-serverless-guide/tree/master/01-aws-lambda-serverless-framework\">open-source hands-on guide to build real world Serverless applications</a> by Shekhar Gulati, senior technologist at Xebia. You can refer to the <a href=\"https://github.com/shekhargulati/hands-on-serverless-guide/tree/master/01-aws-lambda-serverless-framework\">guide for in-depth coverage on building Serverless applications</a>.</p>\n</blockquote>\n<h2>Application: Lambda Coding Round Evaluator</h2>\n<p>In my current organization, one of the interview rounds is a coding round. The candidate is emailed an assignment that he/she has to submit in a week’s time. The assignment is then evaluated by an existing employee who makes the decision on whether the candidate passed or failed the round. I wanted to automate this process so that we can filter out unsuitable candidates without any human intervention. A task that can be automated should be automated. This is how the flow will work:</p>\n<ol>\n<li>Recruitment team submits candidate details to the system.</li>\n<li>System sends an email with assignment zip to the candidate based on candidate skills and experience. The zip contains the problem as well as a Gradle or Maven project.</li>\n<li>Candidate writes the code and submits the assignment using Maven or Gradle task like <code class=\"language-text\">gradle submitAssignment</code>. The task zips the source code of the candidate and submits it to the system.</li>\n<li>\n<p>On receiving assignment, systems builds the project and run all test cases. </p>\n<ol>\n<li>If the build fails, then candidate status is updated to failed in the system and recruitment team is notified. </li>\n<li>If the build succeeds, then we find the test code coverage and if it’s less than a certain threshold we mark the candidate status to failed and recruitment team is notified.</li>\n</ol>\n</li>\n<li>If build succeeds and code coverage is above a certain threshold, then we run static analysis on the code to calculate the code quality score. If code quality score is below a specified threshold then candidate is marked failed and notification is sent to the recruitment team. Otherwise, the candidate passes the round and a human interviewer will now evaluate candidate assignment.</li>\n</ol>\n<p>In this tutorial, we will only build a REST API to store candidate details. Please refer to the <a href=\"https://github.com/shekhargulati/hands-on-serverless-guide/tree/master/01-aws-lambda-serverless-framework\">guide</a> to learn how to build the full application from scratch. Also, source code for the application is available on <a href=\"https://github.com/xebiaww/lambda-coding-round-evaluator\">Github</a>. </p>\n<h2>Prerequisite</h2>\n<p>To go through this tutorial you will need following:</p>\n<ol>\n<li>AWS account</li>\n<li>Node.js</li>\n<li>AWS CLI and configure it</li>\n</ol>\n<h2>What is the Serverless Framework?</h2>\n<p>The Serverless Framework makes it easy to build applications using AWS Lambda. It is multi-provider framework, which means you can use it to build Serverless applications using other providers as well. For AWS, Serverless relies on CloudFormation to do the provisioning. It also scaffolds the project structure and takes care of deploying functions.</p>\n<h2>Getting Started with the Serverless Framework</h2>\n<p>To install Serverless on your machine, run the below mentioned npm command.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> serverless -g</code></pre></div>\n<p>This will install Serverless command-line on your machine. You can use <code class=\"language-text\">sls</code> alias instead of typing <code class=\"language-text\">serverless</code> as well.</p>\n<p>Now, we will build the application in a step by step manner.</p>\n<h2>Step 1: Create a Node.js Serverless Project</h2>\n<p>Navigate to a convenient location on your filesystem and create a directory <code class=\"language-text\">coding-round-evaluator</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">mkdir</span> coding-round-evaluator <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> coding-round-evaluator</code></pre></div>\n<p>Once inside the <code class=\"language-text\">coding-round-evaluator</code> directory, we’ll scaffold our first microservice for working with candidates. This will be responsible for saving candidate details, listing candidates, and fetching a single candidate details.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ serverless create --template aws-nodejs --path candidate-service --name candidate</code></pre></div>\n<p>This will create a directory <code class=\"language-text\">candidate-service</code> with the following structure.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">.</span>\n├── .npmignore\n├── handler.js\n└── serverless.yml</code></pre></div>\n<p>Let’s look at each of these three files one by one.</p>\n<ol>\n<li><strong>.npmignore</strong>: This file is used to tell npm which files should be kept outside of the package. </li>\n<li><strong>handler.js</strong>: This declares your Lambda function. The created Lambda function returns a body with <code class=\"language-text\">Go Serverless v1.0! Your function executed successfully!</code> message. </li>\n<li>\n<p><strong>serverless.yml</strong>: This file declares configuration that Serverless Framework uses to create your service. serverless.yml file has three sections — provider, functions, and resources.</p>\n<ol>\n<li>provider: This section declares configuration specific to a cloud provider. You can use it to specify name of the cloud provider, region, runtime etc.</li>\n<li>functions: This section is used to specify all the functions that your service is composed off. A service can be composed of one or more functions.</li>\n<li>resources: This section declares all the resources that your functions use. Resources are declared using AWS CloudFormation.</li>\n</ol>\n</li>\n</ol>\n<h2>Step 2: Create a REST Resource for Submitting Candidates</h2>\n<p>Next, we’ll update serverless.yml as shown below. </p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> candidate<span class=\"token punctuation\">-</span>service\n\n<span class=\"token key atrule\">frameworkVersion</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\">=1.1.0 &lt;2.0.0\"</span>\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs4.3\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">candidateSubmission</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> api/candidate.submit\n    <span class=\"token key atrule\">memorySize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">128</span>\n    <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> Submit candidate information and starts interview process.\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> \n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> candidates\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> post</code></pre></div>\n<p>Let’s go over the YAML configuration:</p>\n<ol>\n<li>We defined name of the service — <code class=\"language-text\">candidate-service</code>. Service name has to be unique for your account.</li>\n<li>Next, we defined framework version range supported by this service.</li>\n<li>Next, we defined configuration of the cloud provider. As we are using AWS so we defined AWS corresponding configuration.</li>\n<li>Finally, we defined <code class=\"language-text\">candidateSubmission</code> function. In the configuration shown above, we declared that when the HTTP POST request is made to <code class=\"language-text\">/candidates</code> then <code class=\"language-text\">api/candidate.submit</code> handler should be invoked. We also specified memory we want to allocate to the function.</li>\n</ol>\n<p>Now, create a new directory <code class=\"language-text\">api</code> inside the <code class=\"language-text\">candidate-service</code> directory. Move the <code class=\"language-text\">handler.js</code> to the <code class=\"language-text\">api</code> directory. Rename <code class=\"language-text\">handler.js</code> to <code class=\"language-text\">candidate.js</code> and rename <code class=\"language-text\">handle</code> to <code class=\"language-text\">submit</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">submit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      message<span class=\"token operator\">:</span> <span class=\"token string\">'Go Serverless v1.0! Your function executed successfully!'</span><span class=\"token punctuation\">,</span>\n      input<span class=\"token operator\">:</span> event<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To deploy the function, execute <code class=\"language-text\">serverless deploy</code> command. </p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ sls deploy</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Serverless: Creating Stack<span class=\"token punctuation\">..</span>.\nServerless: Checking Stack create progress<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.\nServerless: Stack create finished<span class=\"token punctuation\">..</span>.\nServerless: Packaging service<span class=\"token punctuation\">..</span>.\nServerless: Uploading CloudFormation <span class=\"token function\">file</span> to S3<span class=\"token punctuation\">..</span>.\nServerless: Uploading <span class=\"token function\">service</span> .zip <span class=\"token function\">file</span> to S3 <span class=\"token punctuation\">(</span><span class=\"token number\">524</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span>.\nServerless: Updating Stack<span class=\"token punctuation\">..</span>.\nServerless: Checking Stack update progress<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\nServerless: Stack update finished<span class=\"token punctuation\">..</span>.\nService Information\nservice: candidate\nstage: dev\nregion: us-east-1\napi keys:\n  None\nendpoints:\n  POST - https://05ccffiraa.execute-api.us-east-1.amazonaws.com/dev/candidates\nfunctions:\n  candidate-dev-candidateSubmission</code></pre></div>\n<p>Now, POST operation of your service is available. You can use tools like cURL to make a POST request.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">curl</span> -X POST https://05ccffiraa.execute-api.us-east-1.amazonaws.com/dev/candidates</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{&quot;message&quot;:&quot;Go Serverless v1.0! Your function executed successfully!&quot;, &quot;input&quot;:{...}}</code></pre></div>\n<h2>Step 3: Saving Data to DynamoDB</h2>\n<p>Now that we are able to make HTTP POST request to our API let’s update the code so that data can be saved to DynamoDB. We’ll start by adding <code class=\"language-text\">iamRoleStatemements</code> to <code class=\"language-text\">serverless.yml</code>. This defines which actions are permissible.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs4.3\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">CANDIDATE_TABLE</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>service<span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span>opt<span class=\"token punctuation\">:</span>stage<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">:</span>provider.stage<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">CANDIDATE_EMAIL_TABLE</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"candidate-email-${opt:stage, self:provider.stage}\"</span>\n  <span class=\"token key atrule\">iamRoleStatements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">Effect</span><span class=\"token punctuation\">:</span> Allow\n      <span class=\"token key atrule\">Action</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>Query\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>Scan\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>GetItem\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>PutItem\n      <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span></code></pre></div>\n<p>Next, we’ll create a resource that will create DynamoDB table as shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">CandidatesDynamoDbTable</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::DynamoDB::Table'</span>\n      <span class=\"token key atrule\">DeletionPolicy</span><span class=\"token punctuation\">:</span> Retain\n      <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">AttributeDefinitions</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span>\n            <span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"id\"</span>\n            <span class=\"token key atrule\">AttributeType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"S\"</span>   \n        <span class=\"token key atrule\">KeySchema</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span>\n            <span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"id\"</span>\n            <span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"HASH\"</span>\n        <span class=\"token key atrule\">ProvisionedThroughput</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">ReadCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n          <span class=\"token key atrule\">WriteCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token key atrule\">StreamSpecification</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">StreamViewType</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"NEW_AND_OLD_IMAGES\"</span>\n        <span class=\"token key atrule\">TableName</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>provider.environment.CANDIDATE_TABLE<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, install a couple of node dependencies. These will be required by our code. </p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save bluebird\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save uuid</code></pre></div>\n<p>Update the <code class=\"language-text\">api/candidate.js</code> as shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> uuid <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'uuid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token constant\">AWS</span><span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">setPromisesDependency</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bluebird'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> dynamoDb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>DynamoDB<span class=\"token punctuation\">.</span>DocumentClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">submit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> requestBody <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> fullname <span class=\"token operator\">=</span> requestBody<span class=\"token punctuation\">.</span>fullname<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> email <span class=\"token operator\">=</span> requestBody<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> experience <span class=\"token operator\">=</span> requestBody<span class=\"token punctuation\">.</span>experience<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> fullname <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> email <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> experience <span class=\"token operator\">!==</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Validation Failed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Couldn\\'t submit candidate because of validation errors.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">submitCandidateP</span><span class=\"token punctuation\">(</span><span class=\"token function\">candidateInfo</span><span class=\"token punctuation\">(</span>fullname<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> experience<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Sucessfully submitted candidate with email </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>email<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n          candidateId<span class=\"token operator\">:</span> res<span class=\"token punctuation\">.</span>id\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        statusCode<span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n          message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unable to submit candidate with email </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>email<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">submitCandidateP</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">candidate</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Submitting candidate'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> candidateInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    TableName<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">CANDIDATE_TABLE</span><span class=\"token punctuation\">,</span>\n    Item<span class=\"token operator\">:</span> candidate<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> dynamoDb<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>candidateInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> candidate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">candidateInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fullname<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> experience</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> timestamp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    fullname<span class=\"token operator\">:</span> fullname<span class=\"token punctuation\">,</span>\n    email<span class=\"token operator\">:</span> email<span class=\"token punctuation\">,</span>\n    experience<span class=\"token operator\">:</span> experience<span class=\"token punctuation\">,</span>\n    submittedAt<span class=\"token operator\">:</span> timestamp<span class=\"token punctuation\">,</span>\n    updatedAt<span class=\"token operator\">:</span> timestamp<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, you can deploy the function as shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ serverless deploy -v</code></pre></div>\n<p>This will create the DynamoDB table.</p>\n<p>To test the API, you can use cURL again.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -H <span class=\"token string\">\"Content-Type: application/json\"</span> -X POST -d <span class=\"token string\">'{\"fullname\":\"Shekhar Gulati\",\"email\": \"shekhargulati84@gmail.com\", \"experience\":12}'</span> https://05ccffiraa.execute-api.us-east-1.amazonaws.com/dev/candidates</code></pre></div>\n<p>The response you’ll receive from the API is shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Sucessfully submitted candidate with email shekhargulati84@gmail.com\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"candidateId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"5343f0c0-f773-11e6-84ed-7bf29f824f23\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Step 4: Get All Candidates</h2>\n<p>Define a new function in the serverless.yml as shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">listCandidates</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> api/candidate.list\n    <span class=\"token key atrule\">memorySize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">128</span>\n    <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> List all candidates\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> \n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> candidates\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get  </code></pre></div>\n<p>Create new function in the <code class=\"language-text\">api/candidate.js</code> as shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">list</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        TableName<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">CANDIDATE_TABLE</span><span class=\"token punctuation\">,</span>\n        ProjectionExpression<span class=\"token operator\">:</span> <span class=\"token string\">\"id, fullname, email\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Scanning Candidate table.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onScan</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Scan failed to load data. Error JSON:'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Scan succeeded.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n                body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                    candidates<span class=\"token operator\">:</span> data<span class=\"token punctuation\">.</span>Items\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    dynamoDb<span class=\"token punctuation\">.</span><span class=\"token function\">scan</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> onScan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Deploy the function again.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sls deploy</code></pre></div>\n<p>Once deployed you will be able to test the API using cURL.</p>\n<h2>Step 5: Get Candidate Details by ID</h2>\n<p>Define a new function in serverless.yml as shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">candidateDetails</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> api/candidate.get\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> candidates/<span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get</code></pre></div>\n<p>Define a new function in <code class=\"language-text\">api/candidate.js</code></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    TableName<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">CANDIDATE_TABLE</span><span class=\"token punctuation\">,</span>\n    Key<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>pathParameters<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  dynamoDb<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Couldn\\'t fetch candidate.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, you can test the API using cURL.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> https://05ccffiraa.execute-api.us-east-1.amazonaws.com/dev/candidates/5343f0c0-f773-11e6-84ed-7bf29f824f23\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"experience\"</span>:12,<span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"5343f0c0-f773-11e6-84ed-7bf29f824f23\"</span>,<span class=\"token string\">\"email\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"shekhargulati84@gmail.com\"</span>,<span class=\"token string\">\"fullname\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Shekhar Gulati\"</span>,<span class=\"token string\">\"submittedAt\"</span>:1487598537164,<span class=\"token string\">\"updatedAt\"</span>:1487598537164<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Working with Local DynamoDB</h2>\n<p>Download the jar and run locally.</p>\n<h2>Invoking Functions Locally and Remotely</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sls invoke local -f function-name -p event.json</code></pre></div>\n<h2>Tailing the Logs</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sls logs -f candidateDetails -t</code></pre></div>\n<h2>Conclusion</h2>\n<p>In this part, you learned how to create a REST API with the Serverless Framework. To learn more read the <a href=\"https://github.com/shekhargulati/hands-on-serverless-guide/blob/master/01-aws-lambda-serverless-framework/01-introduction-to-serverless.md\">guide</a>.</p>","frontmatter":{"title":"Building a REST API in Node.js with AWS Lambda, API Gateway, DynamoDB, and Serverless Framework","date":"March 31, 2017","description":"A hands-on tutorial on building a REST API in Node.js using AWS Lambda, API Gateway, DynamoDB, and the Serverless Framework ."}}},"pageContext":{"slug":"/posts/2017-03-31-node-rest-api-with-serverless-lambda-and-dynamodb/","previous":{"fields":{"slug":"/posts/2017-03-30-dept-of-defense-doc-bot/"},"frontmatter":{"title":"How the US Department of Defense is Streamlining Open Source Contributions with Serverless Code"}},"next":{"fields":{"slug":"/posts/2017-04-04-python-eve-mongodb-serverless-aws-rest-api/"},"frontmatter":{"title":"Python EVE + MongoDB + Serverless + AWS = REST All Happiness"}}}}}
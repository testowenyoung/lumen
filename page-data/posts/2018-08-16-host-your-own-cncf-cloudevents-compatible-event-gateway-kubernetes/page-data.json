{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-08-16-host-your-own-cncf-cloudevents-compatible-event-gateway-kubernetes/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"1572109f-052f-5f54-9912-0d0d6c5625de","excerpt":"Last year, we launched the Event Gateway open source project: the event router for the serverless world. In a nutshell, the Event Gateway is the way you take…","html":"<p>Last year, we launched the <a href=\"https://github.com/serverless/event-gateway\">Event Gateway open source project</a>: the event router for the serverless world.</p>\n<p>In a nutshell, the Event Gateway is the way you take your business events, and route them to serverless (FaaS) compute. You can use it to easily build APIs or react to custom business events. You can even connect events across different vendors to integrate your new applications with legacy infrastructure or other SaaS.</p>\n<p>While we do have a hosted (read: serverless) version of the Event Gateway contained inside our new <a href=\"https://serverless.com/blog/serverless-platform-beta-helps-teams-operationalize-development/\">Serverless Platform</a>, the open source version is one that you have to host yourself.</p>\n<p>And today, doing that is about to get a lot easier. <strong>You can now deploy your own self-hosted Event Gateway instance to a Kubernetes cluster in just a few commands!</strong></p>\n<p>Even better: the Event Gateway uses the CNCF’s <a href=\"https://github.com/cloudevents/spec\">CloudEvents</a> format. Meaning, it’s cloud-agnostic down to its core. Use it with any FaaS provider you want.</p>\n<p>Read on to learn how to get set up with the Event Gateway on your own Kubernetes cluster, or <a href=\"https://github.com/serverless/event-gateway/blob/master/contrib/helm/README.md\">read the full release notes in GitHub</a>.</p>\n<h2>Self-hosting the Event Gateway</h2>\n<p>The Event Gateway is a distributed system. It’s designed to be highly-available and continue running even in the event that one of its component pieces fail.</p>\n<p>In order to self-host it, you would need to stand up all the underlying infrastructure for the Event Gateway. That means building out and managing the VM, setting up an etcd cluster, and handling ingress via a load balancer (nginx, proxy). This can be a complex undertaking.</p>\n<p>But now, if you’re already Kubernetes, self-hosting your own Event Gateway instance is easy. <em>YES.</em></p>\n<h3>Why Kubernetes?</h3>\n<p>Kubernetes abstracts away all the support logic required in running your own infrastructure. You can just let the system do it for you. <em>YES x2.</em></p>\n<h2>How to run the Event Gateway right now, on Kubernetes</h2>\n<p>Here are all the steps you need to get set up with a multi-node cluster.</p>\n<h2>Getting Started</h2>\n<p>You’ll need to have an existing Kubernetes cluster that supports Ingress for Deployments. The <a href=\"https://github.com/serverless/event-gateway/blob/master/contrib/helm/MINIKUBE.md\">instructions contained here</a> outline how to get that configured with minikube’s native nginx ingress.</p>\n<h3>Install Helm</h3>\n<p><a href=\"https://docs.helm.sh/using_helm/#quickstart\">You’ll also need Helm installed</a>.</p>\n<p>Run <code class=\"language-text\">helm init</code> on your cluster to generate the <code class=\"language-text\">helm</code> and <code class=\"language-text\">tiller</code> files. This will help us easily deploy our config files later.</p>\n<h3>Install the Helm Components</h3>\n<p>You’ll need to grab the <code class=\"language-text\">etcd-operator</code> from Helm, and use <code class=\"language-text\">event-gateway</code> components from the serverless/event-gateway github repo.</p>\n<p>The <code class=\"language-text\">etcd-operator</code> is a community-added component that starts, stops and manages the <code class=\"language-text\">etcd</code> cluster you’ll be using. In this case, we’re going to run 3 distinct Event Gateway copies and they’ll each hook into the central <code class=\"language-text\">etcd</code> cluster managed by the <code class=\"language-text\">etcd-operator</code>.</p>\n<p>To install the <code class=\"language-text\">etcd-operator</code> component, type:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">helm install stable/etcd-operator --name ego</code></pre></div>\n<p>Then install the <code class=\"language-text\">event-gateway</code> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">helm install event-gateway --name ego</code></pre></div>\n<p>These commands will install the components into the <code class=\"language-text\">default</code> namespace in Kubernetes. If you’d like to install them in a specific namespace, then you will need to append a <code class=\"language-text\">--namespace &lt;namespace&gt;</code> on the end of your install command, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">helm install stable/etcd-operator --name ego --namespace &lt;namespace&gt;\nhelm install event-gateway --name eg --namespace &lt;namespace&gt;</code></pre></div>\n<p><strong>Note:</strong> the <code class=\"language-text\">namespace</code> here is separate from the concept of a <code class=\"language-text\">space</code> within the Event Gateway. You can read more about Event Gateway spaces <a href=\"https://github.com/serverless/event-gateway/blob/master/README.md#spaces\">here</a>, but it’s not necessary for installation.</p>\n<h3>Accessing the Event Gateway</h3>\n<p>If you have successfully installed the helm charts as listed above, you should now be able to access the <code class=\"language-text\">event-gateway</code> at your minikube IP. The helm chart explicitly assigns <code class=\"language-text\">eventgateway.minikube</code> to your Ingress ExternalIP. To enable your DNS resolution you can add this to your <code class=\"language-text\">/etc/hosts</code> file as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">echo &quot;$(kubectl get ingress event-gateway-ingress -o jsonpath={.status.loadBalancer.ingress[0].ip}) eventgateway.minikube&quot; | sudo tee -a &quot;/etc/hosts&quot;</code></pre></div>\n<p>The Ingress explicitly routes path access to the Event Gateway on your behalf, sending all configuration API calls over to the <code class=\"language-text\">config</code> service and all events API calls over to the <code class=\"language-text\">events</code> service. To test this out, you can pull the Event Gateway Prometheus metrics as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">curl --request GET \\\n--url http://eventgateway.minikube/v1/metrics\n--header ‘content-type: application/json’</code></pre></div>\n<p><strong>Note:</strong> if you did not add the hostname to your <code class=\"language-text\">/etc/hosts</code> file as above, you can replace <code class=\"language-text\">eventgateway.minikube</code> with your Ingress IP to do the same.</p>\n<h2>Congrats, you’re done!</h2>\n<p>Well, that was easy. Now you have your very own self-hosted Event Gateway up and running on Kubernetes!</p>\n<h2>How (and why) you’d use the Event Gateway</h2>\n<p>The Event Gateway gives developers a really easy way to ingest all business events as data, which they can then route anywhere they want—other cloud providers, SaaS, legacy infrastructure or containers.</p>\n<p><strong>Building REST APIs</strong></p>\n<p>One of the most popular use cases is building REST APIs, which we <a href=\"https://serverless.com/blog/how-use-event-gateway-use-cases-rest-api-custom-events/\">have a walkthrough of here</a>.</p>\n<p><strong>Reacting to custom events</strong></p>\n<p>You can also use the Event Gateway to react to a single business event in multiple ways.</p>\n<p>Let’s say a new user gets created. This event would route to the Event Gateway, from where three different things can occur asynchronously: (1) a new user gets created in your user table; (2) the user gets a welcome message; (3) the sales team gets notified that a new user just signed up.</p>\n<p>All this can happen without updating any code on the original business event itself. (<a href=\"https://serverless.com/blog/how-use-event-gateway-use-cases-rest-api-custom-events/#using-the-event-gateway-with-custom-events\">Read more on this here</a>.)</p>\n<p><strong>Using services from different clouds together</strong></p>\n<p>Kelsey Hightower demoed a multi-cloud scenario earlier this year. He ran the Event Gateway on Kubernetes via his own integration, and deployed it to Google Cloud. An S3 event on AWS was sent through the Event Gateway and routed to a Google Cloud Function:</p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <iframe src=\"https://www.youtube.com/embed/_1-5YFfJCqM\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<p>Austen Collins from Serverless, Inc., used the Event Gateway to trigger 11 different cloud providers:</p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <iframe src=\"https://www.youtube.com/embed/TZPPjAv12KU\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<h2>Additional Resources</h2>\n<ul>\n<li><a href=\"https://github.com/serverless/event-gateway/blob/master/contrib/helm/README.md\">See the full release notes</a></li>\n<li><a href=\"https://github.com/serverless/event-gateway\">Check out the Event Gateway open source project</a></li>\n<li><a href=\"https://github.com/cloudevents/spec\">Learn more about the CNCF’s CloudEvents specification</a></li>\n<li><a href=\"https://serverless.com/blog/how-use-event-gateway-use-cases-rest-api-custom-events/\">Read up on popular Event Gateway use cases</a></li>\n<li><a href=\"https://dashboard.serverless.com/\">Try the fully-hosted (serverless) version in the Serverless Platform</a></li>\n</ul>","frontmatter":{"title":"Host your own CNCF CloudEvents compatible Event Gateway on Kubernetes, point to any FaaS","date":"August 16, 2018","description":"The Serverless Event Gateway quickstart for Kubernetes. Host your own private Event Gateway, point to any FaaS provider with CloudEvents."}}},"pageContext":{"slug":"/posts/2018-08-16-host-your-own-cncf-cloudevents-compatible-event-gateway-kubernetes/","previous":{"fields":{"slug":"/posts/2018-08-15-streamline-serverless-workflow-webstorm/"},"frontmatter":{"title":"How to streamline your serverless workflow with WebStorm"}},"next":{"fields":{"slug":"/posts/2018-08-21-strategies-implementing-user-authentication-serverless-applications/"},"frontmatter":{"title":"Strategies for implementing user authentication in serverless applications"}}}}}
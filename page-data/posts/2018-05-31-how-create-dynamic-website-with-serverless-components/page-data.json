{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-05-31-how-create-dynamic-website-with-serverless-components/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"35187fdc-4586-5f29-90ee-d5231553f35b","excerpt":"Update: This post is based on the beta version of Serverless Components, which is not compatible with the latest, and much faster, GA version. Please check out…","html":"<blockquote>\n<p><strong>Update:</strong> This post is based on the beta version of Serverless Components, which is not compatible with the latest, and much faster, GA version. Please check out the <a href=\"https://github.com/serverless/components\">latest docs</a> for more up to date information.</p>\n</blockquote>\n<p>In previous posts, we’ve explored how to <a href=\"https://serverless.com/blog/how-to-create-landing-page-with-serverless-components/\">create a static website</a> and a <a href=\"https://serverless.com/blog/how-create-rest-api-serverless-components/\">REST API</a> with Serverless Components. This post is going to build on top of that knowledge to create a dynamic website powered by a database.</p>\n<p>The example dynamic website we’re going to put together is a retail app. Just a simple eCommerce website that lists the products in your database via a REST API.</p>\n<h4>Getting started</h4>\n<p>First, a quick overview of the Components we are using, and how you’ll need to set up your environment.</p>\n<h5>Components we’re going to use</h5>\n<p>To assemble our dynamic site, we’re gonna use the following lower-level components:</p>\n<ul>\n<li><strong>static-website:</strong> For the frontend logic of our application</li>\n<li><strong>aws-lambda:</strong> For the backend logic of our application</li>\n<li><strong>aws-apigateway:</strong> For the REST API endpoints</li>\n<li><strong>aws-dynamodb:</strong> For our products database</li>\n</ul>\n<p>You can find all those components <a href=\"https://github.com/serverless/components/tree/master/registry\">in our registry</a>. Overall, our entire app architecture looks like this:</p>\n<img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/retail-app-arch.png\">\n<p>Ready to start? Let’s go.</p>\n<h5>Install Serverless Components</h5>\n<p>If you haven’t already, install Serverless Components with the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i serverless-components -g</code></pre></div>\n<p>You’ll also need to have an AWS account to host pretty much everything.</p>\n<p>Alright! Now that we have everything set up, lets starting building our retail app!</p>\n<h4>Setting up the frontend</h4>\n<p>We’ll start out by setting up the frontend via S3. All you have to do is create a <code class=\"language-text\">serverless.yml</code> file, use the <code class=\"language-text\">static-website</code> component, and pass in the required config.</p>\n<p>Add the following config to a <code class=\"language-text\">serverless.yml</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> retail<span class=\"token punctuation\">-</span>app\n<span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> 0.0.1\n\n<span class=\"token key atrule\">components</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">webFrontend</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> static<span class=\"token punctuation\">-</span>website\n    <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> retail<span class=\"token punctuation\">-</span>frontend\n      <span class=\"token key atrule\">contentPath</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self.path<span class=\"token punctuation\">}</span>/frontend\n      <span class=\"token key atrule\">templateValues</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">apiUrl</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>productsApi.url<span class=\"token punctuation\">}</span>\n      <span class=\"token key atrule\">contentIndex</span><span class=\"token punctuation\">:</span> index.html\n      <span class=\"token key atrule\">contentError</span><span class=\"token punctuation\">:</span> error.html\n      <span class=\"token key atrule\">hostingRegion</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n      <span class=\"token key atrule\">hostingDomain</span><span class=\"token punctuation\">:</span> retail<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span>self.serviceId<span class=\"token punctuation\">}</span>.example.com\n      <span class=\"token key atrule\">aliasDomain</span><span class=\"token punctuation\">:</span> www.retail<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span>self.serviceId<span class=\"token punctuation\">}</span>.example.com</code></pre></div>\n<p>Couple of things to notice here. We’re referencing the <code class=\"language-text\">self</code> object, which includes some useful information about your new component, like the <code class=\"language-text\">path</code>, and the <code class=\"language-text\">serviceId</code>. The <code class=\"language-text\">path</code> is the absolute path of your component, and <code class=\"language-text\">serviceId</code> is an auto-generated id for your component/service, which you can utilize to make sure your child components have unique ids that are associated with each other.</p>\n<p>Using this <code class=\"language-text\">path</code> property, we’re referencing our frontend code on our file system, which lives in a <code class=\"language-text\">frontend</code> directory. There are a lot of files in there, so to keep this post clean, you can check this directory in <a href=\"https://github.com/serverless/components/tree/master/examples/retail-app/frontend\">our examples directory</a> and add it to your filesystem. It should be pretty straightforward.</p>\n<p>You’ll also notice that we’re referring to a REST API component using the variable syntax <code class=\"language-text\">${productsApi.url}</code>. So we’ll need to add that component. Let’s do that!</p>\n<h4>Setting up the REST API</h4>\n<p>You can add a REST API by adding the <code class=\"language-text\">rest-api</code> component. This component supports both AWS API Gateway and <a href=\"https://serverless.com/event-gateway/\">Serverless Event Gateway</a>.</p>\n<p>In this example, we’re going to use the API Gateway. Let’s add this component to our <code class=\"language-text\">serverless.yml</code> file by adding this config:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">  <span class=\"token key atrule\">productsApi</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> rest<span class=\"token punctuation\">-</span>api\n    <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">gateway</span><span class=\"token punctuation\">:</span> aws<span class=\"token punctuation\">-</span>apigateway\n      <span class=\"token key atrule\">routes</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">/products</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">post</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">function</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>createProduct<span class=\"token punctuation\">}</span>\n            <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n          /<span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">get</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">function</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>getProduct<span class=\"token punctuation\">}</span>\n              <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n        /catalog/<span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span>categories<span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">get</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">function</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>listProducts<span class=\"token punctuation\">}</span>\n            <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>Sweet! Now we have a REST API set in place. As you can see, this REST API needs 3 function backends to process your API requests. So we’ll need to add 3 Lambda function components. We’re going to do that next.</p>\n<h4>Setting up the backend code</h4>\n<p>Just add 3 <code class=\"language-text\">aws-lambda</code> components to your config along with the actual logic.</p>\n<p>To do that, you can add the following config:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">  <span class=\"token key atrule\">createProduct</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> aws<span class=\"token punctuation\">-</span>lambda\n    <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> <span class=\"token number\">512</span>\n      <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n      <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> products.create\n      <span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self.path<span class=\"token punctuation\">}</span>/code\n      <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">productTableName</span><span class=\"token punctuation\">:</span> products<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span>self.serviceId<span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">getProduct</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> aws<span class=\"token punctuation\">-</span>lambda\n    <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> <span class=\"token number\">512</span>\n      <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n      <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> products.get\n      <span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self.path<span class=\"token punctuation\">}</span>/code\n      <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">productTableName</span><span class=\"token punctuation\">:</span> products<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span>self.serviceId<span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">listProducts</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> aws<span class=\"token punctuation\">-</span>lambda\n    <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> <span class=\"token number\">512</span>\n      <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>\n      <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> products.list\n      <span class=\"token key atrule\">root</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self.path<span class=\"token punctuation\">}</span>/code\n      <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">productTableName</span><span class=\"token punctuation\">:</span> products<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span>self.serviceId<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You’ll notice that we’re referencing to our code base with the <code class=\"language-text\">root: ${self.path}/code</code> property. So we’ll need to add that before moving forward.</p>\n<p>Just create a <code class=\"language-text\">code</code> directory in the root directory of your component (where <code class=\"language-text\">serverless.yml</code> lives) and add an <code class=\"language-text\">index.js</code> file inside that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> dynamo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>DynamoDB<span class=\"token punctuation\">.</span>DocumentClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> region<span class=\"token operator\">:</span> <span class=\"token string\">'us-east-1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> tableName <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>productTableName\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  dynamo<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      Item<span class=\"token operator\">:</span> item<span class=\"token punctuation\">,</span>\n      TableName<span class=\"token operator\">:</span> tableName\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> resp</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          statusCode<span class=\"token operator\">:</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span>\n          headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token operator\">:</span> <span class=\"token string\">'*'</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> vId <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">.</span>pathParameters<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  dynamo<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      Key<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token operator\">:</span> vId\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      TableName<span class=\"token operator\">:</span> tableName\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>Item\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n          headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token operator\">:</span> <span class=\"token string\">'*'</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  dynamo<span class=\"token punctuation\">.</span><span class=\"token function\">scan</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      TableName<span class=\"token operator\">:</span> tableName\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>Items\n        <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n          headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token operator\">:</span> <span class=\"token string\">'*'</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>products<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> create<span class=\"token punctuation\">,</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">,</span> list <span class=\"token punctuation\">}</span></code></pre></div>\n<p>We won’t get into the details of the code above, but it should be pretty self explanatory. Essentially, you’ll be exporting the 3 Lambda handlers needed by your REST API.</p>\n<p>Wait a minute, our Lambda codebase is referring to a DynamoDB database table to query. So we’ll need to add this final piece of the puzzle. Let’s do it!</p>\n<h4>Setting up the database</h4>\n<p>We’re going to use the <code class=\"language-text\">aws-dynamodb</code> component to provision this products database. To do that, just add the following config to your <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">  <span class=\"token key atrule\">productsDb</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> aws<span class=\"token punctuation\">-</span>dynamodb\n    <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n      <span class=\"token key atrule\">tables</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> products<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span>self.serviceId<span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">hashKey</span><span class=\"token punctuation\">:</span> id\n          <span class=\"token key atrule\">indexes</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ProductIdIndex\n              <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> global\n              <span class=\"token key atrule\">hashKey</span><span class=\"token punctuation\">:</span> id\n          <span class=\"token key atrule\">schema</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> number\n            <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> string\n            <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> string\n            <span class=\"token key atrule\">price</span><span class=\"token punctuation\">:</span> number\n          <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">timestamps</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>Awesome! We just assembled the final piece of our new component. It’s a lot like LEGO, isn’t it?</p>\n<p>If you deploy your component, your entire app should be deployed. However, for the sake of demonstration, let’s add a final step to seed some product data in the database so that you can view it on the website.</p>\n<h4>BONUS: Seeding data</h4>\n<p>Remember that, at the end of the day, you’re creating a brand new component using lower-level components. You can add logic specific to this new higher-order component just like you do with other components.</p>\n<p>In our use case, we need some logic to seed data into our database. We can do that by adding an <code class=\"language-text\">index.js</code> file with the following logic:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> readFile <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">deploy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputs<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> productsDb <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">.</span>productsDb\n    <span class=\"token keyword\">const</span> products <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n      <span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data/products.json'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>products<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> tablename <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">products-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>context<span class=\"token punctuation\">.</span>serviceId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n      context<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Seeding </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>products<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> items into table </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>tablename<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">insertItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">triesLeft<span class=\"token punctuation\">,</span> wait</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">product</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        productsDb<span class=\"token punctuation\">.</span>fns\n          <span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>productsDb<span class=\"token punctuation\">.</span>inputs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            log<span class=\"token operator\">:</span> context<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span>\n            state<span class=\"token operator\">:</span> productsDb<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span>\n            options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n              tablename<span class=\"token punctuation\">,</span>\n              itemdata<span class=\"token operator\">:</span> product\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>triesLeft <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token keyword\">const</span> doInsert <span class=\"token operator\">=</span> <span class=\"token function\">insertItem</span><span class=\"token punctuation\">(</span>triesLeft <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>product<span class=\"token punctuation\">)</span>\n                  doInsert<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">throw</span> error\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">const</span> insertions <span class=\"token operator\">=</span> products<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span>stringify<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">insertItem</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>insertions<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Did you notice our reference to the <code class=\"language-text\">serviceId</code>? Just like with the config above, you can access the <code class=\"language-text\">serviceId</code> along with other useful information under the passed in <code class=\"language-text\">context</code> object. It’s a lot like the <code class=\"language-text\">self</code> object above, but on steroids!</p>\n<p>We’re also loading a <code class=\"language-text\">products.json</code> file from a <code class=\"language-text\">data</code> directory. So let’s create a <code class=\"language-text\">data</code> directory in our component root and add this <code class=\"language-text\">products.json</code> file in there. It should look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Model A\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Our standard, highly reliable part.\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"6.99\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Model B\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A cost-reduced version of our classic offering, providing the highest value.\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4.99\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Model A+\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A precision-milled, highly durable enhancement of the Model A for performance applications.\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"price\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"8.99\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<h2>Visit your new website</h2>\n<p>Alright! Now we’re ready to deploy! Just run the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">components deploy</code></pre></div>\n<p>At this point, all your components are being provisioned, and your seed data will be inserted into the newly created database.</p>\n<p>After deployment is complete, you should see the following output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">REST API resources:\n  POST - https://ohp05ymthk.execute-api.us-east-1.amazonaws.com/dev/products\n  GET - https://ohp05ymthk.execute-api.us-east-1.amazonaws.com/dev/products/{id}\n  GET - https://ohp05ymthk.execute-api.us-east-1.amazonaws.com/dev/catalog/{...categories}\nStatic Website resources:\n  http://retail-kqrpf6qiie.example.com.s3-website-us-east-1.amazonaws.com\nObjects Found: 31 , Files Found: 31 , Files Deleted: 0\nretail-app (master) ⚡️</code></pre></div>\n<p>Now you can see your REST API endpoints, along with the root url of your newly created dynamic website. Just copy this website and open it in your browser.</p>\n<img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/retail-app.png\">\n<p>Voila! Your dynamic website is live!</p>\n<p>Notice all the frontcode we’ve added, along with the seeded products from the database getting queried by the Lambda functions via our REST API.</p>\n<h4>Summary</h4>\n<p>In a nutshell, what we’ve done is added the following components, along with their required config &#x26; code:</p>\n<ul>\n<li><code class=\"language-text\">static-website</code>: Hosted on AWS S3 to hold our frontend codebase</li>\n<li><code class=\"language-text\">rest-api</code>: Using AWS API Gateway to provision our 3 RESTful API endpoints</li>\n<li><code class=\"language-text\">aws-lambda</code>: We added 3 of those as backend for our 3 API endpoints</li>\n<li><code class=\"language-text\">aws-dynamodb</code>: Our products database, and seeded some fixture data into it</li>\n</ul>\n<p>And this is how you can create a dynamic website with Serverless Components!</p>\n<p>You can extend this app by adding even more frontend code and routes and do more queries to our backend. You can also add more backend logic and infrastructure, all with nothing but Serverless Components.</p>\n<p>Hope you found this walkthrough useful. You can check the <a href=\"https://github.com/serverless/components/tree/master/examples/retail-app/\">entire example app in our components directory</a>.</p>\n<p>Happy hacking!</p>","frontmatter":{"title":"How to Create a Dynamic Site with Pre-built Serverless Components","date":"May 31, 2018","description":"A step-by-step tutorial that guides you through creating a dynamic website with pre-built Serverless Components."}}},"pageContext":{"slug":"/posts/2018-05-31-how-create-dynamic-website-with-serverless-components/","previous":{"fields":{"slug":"/posts/2018-05-17-serverless-platform-updates-framework-components-event-gateway/"},"frontmatter":{"title":"Serverless Platform updates - Install Components from url, Fn Project support, CloudEvents"}},"next":{"fields":{"slug":"/posts/2018-06-04-how-write-first-serverless-component/"},"frontmatter":{"title":"How to write your first Serverless Component"}}}}}
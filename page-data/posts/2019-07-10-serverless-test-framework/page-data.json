{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2019-07-10-serverless-test-framework/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"70beee89-2092-58c0-9ea4-4fdcd8ee2bfd","excerpt":"With the latest Serverless Framework release, we made it easier to test APIs built with the Serverless Framework. Testing is important! We do it all the time…","html":"<p>With the latest Serverless Framework release, we made it easier to test APIs built with the Serverless Framework.</p>\n<p>Testing is important! We do it all the time when getting started developing a new service with the Serverless Framework. We might not have unit tests or a CI/CD in place yet, but at a minimum we will run <code class=\"language-text\">serverless invoke</code> or <code class=\"language-text\">curl</code> a few times with various inputs to make sure our APIs don’t return 500s. After hitting <code class=\"language-text\">[up]</code> &#x26; <code class=\"language-text\">[enter]</code> in the terminal once too many times we begin to wonder if there is a better way.</p>\n<p>Yes, you should probably write some unit tests. When you are ready for that, here is an in depth guide on <a href=\"https://serverless.com/blog/unit-testing-nodejs-serverless-jest/\">writing unit tests for Node.js Serverless projects with Jest</a>. Once you have the coverage and maturity you need, you’ll also need some integration tests. However, integration tests can be complicated and time consuming to implement. So if you need some basic integration tests in the meantime but you are not ready to commit to writing integration tests, then let me introduce you to a new testing tool in Serverless Framework to add to your testing arsenal.</p>\n<p>Serverless Framework provides a new way to define basic integration tests for functions with HTTP endpoints. It’s goal is to enable you to test your serverless applications without having to manually write a lot of code to do so.  Tests are defined in a new file, <code class=\"language-text\">serverless.test.yml</code> and they are tested using the <code class=\"language-text\">serverless test</code> command.  The <a href=\"https://github.com/serverless/enterprise/blob/master/docs/testing.md\">testing documentation</a> goes into detail about writing tests but here is a quick preview.</p>\n<p>As an example let’s look at this <code class=\"language-text\">handler.js</code> and <code class=\"language-text\">serverless.yml</code> file.</p>\n<p><strong>handler.js</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">module.exports.hello <span class=\"token operator\">=</span> async <span class=\"token punctuation\">(</span>event, context<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">let</span> body <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event.body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    body <span class=\"token operator\">=</span> JSON.parse<span class=\"token punctuation\">(</span>event.body<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  const name <span class=\"token operator\">=</span> body.name <span class=\"token operator\">||</span> <span class=\"token string\">'world'</span>\n\n  <span class=\"token builtin class-name\">return</span> <span class=\"token punctuation\">{</span>\n    statusCode: <span class=\"token number\">200</span>,\n    body: <span class=\"token variable\"><span class=\"token variable\">`</span>Hello, $<span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token variable\">`</span></span>,\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This function will return <code class=\"language-text\">hello, &lt;name&gt;</code> if a name was provided in the JSON request body, and <code class=\"language-text\">hello, world</code> if the name wasn’t set.</p>\n<p>Here is the <code class=\"language-text\">serverless.yml</code> for this function with an HTTP POST endpoint.</p>\n<p><strong>serverless.yml</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">tenant</span><span class=\"token punctuation\">:</span> skierkowski\n<span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> greeter\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> hello\n\n<span class=\"token key atrule\">frameworkVersion</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\">=1.46.1\"</span>\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs8.10\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n    \n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> hello\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> post</code></pre></div>\n<p>Go ahead and deploy the service using <code class=\"language-text\">sls deploy</code>. Now let’s write some basic integration tests in a new <code class=\"language-text\">serverless.test.yml</code> file. </p>\n<p><strong>serverless.test.yml</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> says hello to the world by default\n  <span class=\"token key atrule\">endpoint</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token key atrule\">function</span><span class=\"token punctuation\">:</span> hello<span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">response</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">body</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello, world\"</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> says hello to alice\n  <span class=\"token key atrule\">endpoint</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token key atrule\">function</span><span class=\"token punctuation\">:</span> hello<span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">body</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> alice\n  <span class=\"token key atrule\">response</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">body</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello, alice\"</span></code></pre></div>\n<p>Once the service is deployed run <code class=\"language-text\">sls test</code> and you can expect output like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Serverless Enterprise: Test Results:\n\n   Summary --------------------------------------------------\n\n   passed - POST hello - says hello to the world by default\n   passed - POST hello - says hello to alice\n\nServerless Enterprise: Test Summary: 2 passed, 0 failed</code></pre></div>\n<p>As you can see, this light-weight test framework enables us to write some basic integration tests and run them on the live service. The <a href=\"https://github.com/serverless/enterprise/blob/master/docs/testing.md#serverlesstestyml-specification\">docs</a> show you how to send HTTP headers, JSON bodies, string bodies, and submit forms. You can also test the responses for HTTP response codes, string bodies, or JSON content.</p>","frontmatter":{"title":"Basic Integration Testing with Serverless Framework","date":"July 10, 2019","description":"With the latest Serverless Framework release, we made it easier to test APIs built with the Serverless Framework."}}},"pageContext":{"slug":"/posts/2019-07-10-serverless-test-framework/","previous":{"fields":{"slug":"/posts/2019-07-09-buildcenter-serverless-development-cycle/"},"frontmatter":{"title":"How BuildCenter and Serverless Guru Streamlined Their Serverless Development Cycle"}},"next":{"fields":{"slug":"/posts/2019-07-11-serverless-guru-development-partner/"},"frontmatter":{"title":"Serverless Guru Joins Serverless as a Development Partner"}}}}}
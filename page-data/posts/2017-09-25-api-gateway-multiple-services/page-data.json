{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-09-25-api-gateway-multiple-services/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"0e0ec562-c151-5c92-b0c6-48e2a9833b8d","excerpt":"In this post, I’ll show you how to put multiple Serverless services on the same domain name. This is the most requested issue in the Serverless repo right now…","html":"<p>In this post, I’ll show you how to put multiple Serverless services on the same domain name. This is the <a href=\"https://github.com/serverless/serverless/issues/3078\">most requested issue in the Serverless repo</a> right now but is a tricky feature to implement directly within the Framework.</p>\n<p>Using the power of Serverless and the <a href=\"https://github.com/amplify-education/serverless-domain-manager\">serverless-domain-manager</a> plugin, we can use API Gateway’s <a href=\"http://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html#how-to-custom-domains-mapping-console\">base path mappings</a> to handle this. Follow the instructions below to deploy your two services to the same domain.</p>\n<p><em>Addendum: Many users asked about how to deploy to different domains based on the stage, e.g. <code class=\"language-text\">staging-api.mycompany.com</code> when deploying to staging. I’ve added a section on <a href=\"#working-with-multiple-stages\">Working with multiple stages</a> below.</em></p>\n<p>If you already have your own services set up and just want the simple instructions, skip to the <a href=\"#tldr\">TL;DR section</a> below.</p>\n<h4>Getting Started</h4>\n<p>To get started, you’ll need the <a href=\"https://serverless.com/framework/docs/providers/aws/guide/quick-start/\">Serverless Framework</a> installed.</p>\n<p>You should also have your desired domain name registered through AWS. Read the documentation on that <a href=\"http://docs.aws.amazon.com/Route53/latest/DeveloperGuide/registrar.html\">here</a>. You should also register a certificate for that domain through the AWS Certificate Manager. If you need help with that, read the <em>Getting a certificate for your domain</em> section of my previous post on <a href=\"https://serverless.com/blog/serverless-api-gateway-domain/\">using API Gateway with Serverless</a>.</p>\n<h4>Deploying your two services</h4>\n<p>Before we dive it, let’s discuss exactly what we’re trying to build. Imagine you have an e-commerce store which is a single-page application that consumes a backend REST API. Your REST API is hosted at <code class=\"language-text\">api.mycompany.com</code>, and you have two services: <code class=\"language-text\">users</code> and <code class=\"language-text\">products</code>.</p>\n<p>You would like all <code class=\"language-text\">users</code> requests to be accessed at <code class=\"language-text\">api.mycompany.com/users</code> while all <code class=\"language-text\">products</code> requests would be accessed at <code class=\"language-text\">api.mycompany.com/products</code>. Further, you would like to separate these two services so they could be deployed independently — changes to a products endpoint wouldn’t require a redeploy of all users functions as well.</p>\n<p>For this example, do the following:</p>\n<p>First, create a new directory for your application:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> api-gateway-application\n$ <span class=\"token builtin class-name\">cd</span> api-gateway-application</code></pre></div>\n<p>Then, create a directory for your <code class=\"language-text\">users</code> service:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> users-service\n$ <span class=\"token builtin class-name\">cd</span> users-service</code></pre></div>\n<p>In your <code class=\"language-text\">users-service</code> directory, add the following <code class=\"language-text\">serverless.yml</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> users<span class=\"token punctuation\">-</span>service\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> python3.6\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">SERVICE_NAME</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>service<span class=\"token punctuation\">}</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> GET hello</code></pre></div>\n<p>Then add the following as <code class=\"language-text\">handler.py</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># handler.py</span>\n\n<span class=\"token keyword\">import</span> os\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"statusCode\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"body\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello from the {}!\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'SERVICE_NAME'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> response</code></pre></div>\n<p>This is a super simple service with a single endpoint (<code class=\"language-text\">/hello</code>) that will return the name of the service. To test it, deploy the service:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls deploy\n<span class=\"token punctuation\">..</span>.\nService Information\nservice: users-service\nstage: dev\nregion: us-east-1\nstack: users-service-dev\napi keys:\n  None\nendpoints:\n  GET - https://n0benf6jn4.execute-api.us-east-1.amazonaws.com/dev/hello\nfunctions:\n  hello: users-service-dev-hello</code></pre></div>\n<p>Copy and paste the endpoint into your browser, and you should see the following message:</p>\n<img width=\"697\" alt=\"User Service Example\" src=\"https://user-images.githubusercontent.com/6509926/30782885-7557f496-a0ff-11e7-86e7-7cddc1e4fb06.png\">\n<p>As you can see, the URL isn’t very friendly. We’ll fix that during this walkthrough. To finish our setup, let’s make a products service as well. Move up a level in your directory structure, then copy the users-service into a products-service directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n$ <span class=\"token function\">cp</span> -r users-service/ products-service\n$ <span class=\"token builtin class-name\">cd</span> products-service</code></pre></div>\n<p>Then edit the name of the <code class=\"language-text\">service</code> in your products-service <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> products<span class=\"token punctuation\">-</span>service\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> python3.6\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">SERVICE_NAME</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>service<span class=\"token punctuation\">}</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> GET hello</code></pre></div>\n<p>Run <code class=\"language-text\">sls deploy</code> to deploy the products-service, and make sure it’s working in your browser:</p>\n<img width=\"682\" alt=\"Product Service Example\" src=\"https://user-images.githubusercontent.com/6509926/30782947-8ba43a56-a100-11e7-9003-d52911cdac3b.png\">\n<p>Again, it’s an ugly URL, which we’re going to change soon.</p>\n<h4>Adding your services to your custom domain</h4>\n<p>Now that we have our two services set up, let’s add them to a custom domain. You should still be in your <code class=\"language-text\">products-service</code>. Let’s install the <a href=\"https://github.com/amplify-education/serverless-domain-manager\">serverless-domain-manager</a> plugin:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> init -f\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> serverless-domain-manager</code></pre></div>\n<p>Then add the configuration to your <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> products<span class=\"token punctuation\">-</span>service\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> python3.6\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">SERVICE_NAME</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>service<span class=\"token punctuation\">}</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> GET hello\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>domain<span class=\"token punctuation\">-</span>manager\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">customDomain</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">domainName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api.mycompany.com'</span> <span class=\"token comment\"># Change this to your domain.</span>\n    <span class=\"token key atrule\">basePath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'products'</span> <span class=\"token comment\"># This will be prefixed to all routes</span>\n    <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>provider.stage<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">createRoute53Record</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>We’ve added two sections to the <code class=\"language-text\">serverless.yml</code>. First, we registered the <code class=\"language-text\">serverless-domain-manager</code> in the <code class=\"language-text\">plugins</code> block. Then, we configured the plugin via the <code class=\"language-text\">customDomain</code> section of the <code class=\"language-text\">custom</code> block.</p>\n<p>Note the <code class=\"language-text\">basePath</code> attribute that we’re configuring. This will be prefixed to every route in our <code class=\"language-text\">products-service</code>. Thus, our route that is registered as <code class=\"language-text\">/hello</code> will actually be located at <code class=\"language-text\">products/hello</code>.</p>\n<p>If you haven’t previously registered this domain with <a href=\"https://serverless.com/amazon-api-gateway/\">API Gateway</a>, you’ll need to register it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ serverless create_domain\nServerless: Domain was created, may take up to <span class=\"token number\">40</span> mins to be initialized</code></pre></div>\n<p>As the output notes, it can take up to 40 minutes to provision this in AWS. This is a one-time setup cost.</p>\n<p>Once your domain is set up, deploy your service with <code class=\"language-text\">sls deploy</code>. Once the deploy is done, your endpoint will be available at <code class=\"language-text\">api.mycompany.com/products/hello</code>:</p>\n<img width=\"605\" alt=\"Products Service Base Path\" src=\"https://user-images.githubusercontent.com/6509926/30783072-03c6a8fa-a103-11e7-9402-36717b131077.png\">\n<p>That’s a much cleaner URL!</p>\n<p>Let’s do the same with our users service. Change into that directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/users-service</code></pre></div>\n<p>and follow the same steps as above. Install the <code class=\"language-text\">serverless-domain-manager</code> plugin:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> init -f\n$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> serverless-domain-manager</code></pre></div>\n<p>and add the config to your <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> users<span class=\"token punctuation\">-</span>service\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> python3.6\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">SERVICE_NAME</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>service<span class=\"token punctuation\">}</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> GET hello\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>domain<span class=\"token punctuation\">-</span>manager\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">customDomain</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">domainName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api.mycompany.com'</span> <span class=\"token comment\"># Change this to your domain.</span>\n    <span class=\"token key atrule\">basePath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'users'</span> <span class=\"token comment\"># This will be prefixed to all routes</span>\n    <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>provider.stage<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">createRoute53Record</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>Note that the <code class=\"language-text\">basePath</code> in this one is <code class=\"language-text\">users</code>, which will be prefixed to all routes in the users-service.</p>\n<p>You don’t need to run <code class=\"language-text\">serverless create_domain</code> again. Because you created the domain already, it is available for any services that want to use it.</p>\n<p>Run <code class=\"language-text\">sls deploy</code> to deploy the users service, then check it in your browser:</p>\n<img width=\"604\" alt=\"Users Service Base Path\" src=\"https://user-images.githubusercontent.com/6509926/30783122-81ead4f4-a103-11e7-9809-75e108e5506e.png\">\n<p>That’s it! Now you easily separate your functions into services while still keeping them on the same domain. You’re not limited to two services on this domain — as you add additional services, just use a new <code class=\"language-text\">basePath</code> to add it to your domain.</p>\n<h4>Working with multiple stages</h4>\n<blockquote>\n<p>Addendum: A few people have asked about how to handle this with multiple stages (prod, staging, dev). I’ve added this section to show how to structure your project to handle this.</p>\n</blockquote>\n<p>When working with Serverless services, you’ll often have multiple stages for your project. In this section, I’ll show you how to set up your project to deploy to custom domains for different stages.</p>\n<p>To set the scene, let’s imagine we have three stages:</p>\n<ul>\n<li><code class=\"language-text\">prod</code>, which is accessible at <code class=\"language-text\">api.mycompany.com</code>;</li>\n<li><code class=\"language-text\">staging</code>, which is accessible at <code class=\"language-text\">staging-api.mycompany.com</code>; and</li>\n<li><code class=\"language-text\">dev</code>, which is accessible at <code class=\"language-text\">dev-api.mycompany.com</code>.</li>\n</ul>\n<p>The first thing you need to do is get certificates for each of these domains in Amazon Certificate Manager. Please read the <em>Getting a certificate for your domain</em> section of my previous post on <a href=\"https://serverless.com/blog/serverless-api-gateway-domain/\">using API Gateway with Serverless</a>.</p>\n<p>Once you’ve done that, use the following config for your <code class=\"language-text\">custom</code> block in <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>opt<span class=\"token punctuation\">:</span>stage<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">:</span>provider.stage<span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">domains</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">prod</span><span class=\"token punctuation\">:</span> api.mycompany.com\n    <span class=\"token key atrule\">staging</span><span class=\"token punctuation\">:</span> staging<span class=\"token punctuation\">-</span>api.mycompany.com\n    <span class=\"token key atrule\">dev</span><span class=\"token punctuation\">:</span> dev<span class=\"token punctuation\">-</span>api.mycompany.com\n\n  <span class=\"token key atrule\">customDomain</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">basePath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token key atrule\">domainName</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.domains.$<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.stage<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"${self:custom.stage}\"</span>\n    <span class=\"token key atrule\">createRoute53Record</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>Pay particular attention to this line:</p>\n<p><code class=\"language-text\">domainName: ${self:custom.domains.${self:custom.stage}}&quot;</code></p>\n<p>We’re using the Serverless Framework’s powerful <a href=\"https://serverless.com/framework/docs/providers/aws/guide/variables/\">variable system</a> to infer the domain name based on the stage. I’ve set up my three stages in the <code class=\"language-text\">domains</code> block of the <code class=\"language-text\">custom</code> section. This will use my given stage to determine which domain to use.</p>\n<p>Once this is set up, you’ll need to create your custom domain <em>for each of your stages</em>. This is a one-time setup step. If you use the stages I gave above, you would run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls create_domain --stage prod\n$ sls create_domain --stage staging\n$ sls create_domain --stage dev</code></pre></div>\n<p>Once your domains are set up, you can deploy to your proper stages! Use <code class=\"language-text\">sls deploy --stage prod</code> to deploy to <code class=\"language-text\">api.mycompany.com</code> and the other stages to deploy to their respective domains.</p>\n<h4>TL;DR</h4>\n<p>If you already have multiple services set up and are looking to add them to the same domain, follow these steps.</p>\n<p>Before you begin, you’ll need to get a certificate for your domain with the AWS Certificate Manager and register your domain with API Gateway. To do that, follow the steps in my previous post on <a href=\"https://serverless.com/blog/serverless-api-gateway-domain/\">using a custom domain with API Gateway and Serverless</a>. Stop after the step that says <code class=\"language-text\">sls create_domain</code>.</p>\n<p>In each service, install the <a href=\"https://github.com/amplify-education/serverless-domain-manager\">serverless-domain-manager</a> plugin:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> serverless-domain-manager</code></pre></div>\n<p>Then, add the following configuration to your <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>domain<span class=\"token punctuation\">-</span>manager\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">customDomain</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">domainName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'api.mycompany.com'</span> <span class=\"token comment\"># Change this to your domain.</span>\n    <span class=\"token key atrule\">basePath</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'myprefix'</span> <span class=\"token comment\"># This will be prefixed to all routes</span>\n    <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>provider.stage<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">createRoute53Record</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>Make sure you change the <code class=\"language-text\">domainName</code> value to the domain name you want to use. Change the <code class=\"language-text\">basePath</code> value to the prefix you want for your routes in that service. For example, if you want your routes to start with <code class=\"language-text\">/products/</code>, the <code class=\"language-text\">basePath</code> value should be <code class=\"language-text\">products</code>.</p>\n<p>Then, run <code class=\"language-text\">sls deploy</code> to get your service deployed to your custom domain with a base path!</p>","frontmatter":{"title":"How to deploy multiple micro-services under one API domain with Serverless","date":"September 25, 2017","description":"Learn how to use the same domain name for multiple Serverless services with API Gateway base path mappings."}}},"pageContext":{"slug":"/posts/2017-09-25-api-gateway-multiple-services/","previous":{"fields":{"slug":"/posts/2017-09-21-serverless-webtasks/"},"frontmatter":{"title":"Webtasks brings node 8, no cold starts, and streamlined on-boarding to Serverless"}},"next":{"fields":{"slug":"/posts/2017-09-26-serverless-monitoring-the-good-the-bad-and-the-ugly/"},"frontmatter":{"title":"Serverless monitoring - the good, the bad and the ugly"}}}}}
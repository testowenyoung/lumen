{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-02-15-writing-serverless-plugins-2/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"5c51dda2-8616-5090-b528-a01220beb0a0","excerpt":"Hi, I’m Anna Doubkova, a software engineer at Red Badger in London. In my previous post (How To Write Your First Plugin for the Serverless Framework - Part…","html":"<p>Hi, I’m <a href=\"https://github.com/lithin\">Anna Doubkova</a>, a software engineer at <a href=\"https://red-badger.com/\">Red Badger</a> in London. In my previous post (<a href=\"https://serverless.com/blog/writing-serverless-plugins/\">How To Write Your First Plugin for the Serverless Framework - Part 1</a>), you learned what Serverless plugins are and how you can use them to hook into the Serverless Framework yourself. In this follow-up post, you’ll see how to write implementation of a plugin that could be used in real life.</p>\n<h2>Extending The Serverless Framework</h2>\n<p>Plugins extend functionality of the framework to tailor it for your use case. The framework is very flexible and allows you to take different approaches to implementing your logic. The main ways are:</p>\n<ol>\n<li>Writing a new command</li>\n<li>Extending an existing command to implement additional functionality</li>\n<li>Writing your own implementation of an existing command from scratch</li>\n</ol>\n<h2>Writing A New Command</h2>\n<p>Let’s have a look at a practical example that will illustrate why you’d want to write a new command for the Serverless Framework.</p>\n<p>Imagine you have a microservice defined in your <code class=\"language-text\">serverless.yml</code> that contains a DynamoDB table. You can deploy the functions, add API Gateway endpoints, and create the table automatically by running <code class=\"language-text\">serverless deploy</code>. Easy!</p>\n<p>What if you want to copy data from production to dev table so that you can test your application with real data? You could export and import data from one table to another, but that’d be very tedious if done frequently. Instead, we’ll write a plugin for it.</p>\n<h2>Copy Data Plugin</h2>\n<p>You can start by defining the command in a new class as shown in <a href=\"https://serverless.com/blog/writing-serverless-plugins/\">Part 1 of this series</a>. I imagine the command would have two steps, or lifecycle events - one for downloading the data and one for uploading it. It could look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CopyDataPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'copy-data'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        lifecycleEvents<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'downloadData'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'uploadData'</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        usage<span class=\"token operator\">:</span> <span class=\"token string\">'Pushes data from one database to another'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> CopyDataPlugin<span class=\"token punctuation\">;</span></code></pre></div>\n<p>When the command is defined, you attach lifecycle functions by defining them as hooks. Again, one function will handle downloading the data and the other one will upload it. Notice that we’re binding <code class=\"language-text\">serverless</code> and <code class=\"language-text\">options</code> to these functions so that they can access their data.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Version 1</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CopyDataPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'copy-data'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        lifecycleEvents<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'downloadData'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'uploadData'</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        usage<span class=\"token operator\">:</span> <span class=\"token string\">'Pushes data from one database to another'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'copy-data:downloadData'</span><span class=\"token operator\">:</span> <span class=\"token function\">downloadData</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> serverless<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'copy-data:uploadData'</span><span class=\"token operator\">:</span> <span class=\"token function\">uploadData</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> serverless<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Object-Oriented Programming (OOP) Approach</h2>\n<p>If you’d rather not bind <code class=\"language-text\">serverless</code> and <code class=\"language-text\">options</code> to these functions, there’s another more object-oriented approach.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Version 2</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CopyDataPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverless <span class=\"token operator\">=</span> serverless<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'copy-data:downloadData'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">downloadData</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'copy-data:uploadData'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">uploadData</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">downloadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...code</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">uploadData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...code</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or if you’re using babel and like cutting-edge ES features, you can use <a href=\"http://babeljs.io/docs/plugins/transform-class-properties/\">Class Properties Transform</a> to use arrow functions and remove the need for binding completely.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Version 3</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CopyDataPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverless <span class=\"token operator\">=</span> serverless<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'copy-data:downloadData'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>downloadData<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'copy-data:uploadData'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uploadData<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">downloadData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...code</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">uploadData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...code</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, I personally prefer a more functional approach. That’s why we’ll carry on in this tutorial with the two functions completely separate from the class itself - as per <code class=\"language-text\">Version 1</code>.</p>\n<p>Having defined the command, it’s time to jump to the implementation.</p>\n<h2>Downloading Data</h2>\n<p>First, you want to download the data from a production database and save it somewhere so that you can upload it in the second step. I decided in this case to save the downloaded data to <code class=\"language-text\">serverless.variables</code> so that it can be easily accessed.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">downloadData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function configuring aws-sdk and getting the DynamoDB client</span>\n  <span class=\"token keyword\">const</span> dynamodb <span class=\"token operator\">=</span> <span class=\"token function\">getDynamoDB</span><span class=\"token punctuation\">(</span>serverless<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    TableName<span class=\"token operator\">:</span> <span class=\"token string\">'users-production'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  dynamodb<span class=\"token punctuation\">.</span><span class=\"token function\">scan</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      serverless<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error on downloading data! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    serverless<span class=\"token punctuation\">.</span>variables<span class=\"token punctuation\">.</span>copyData <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n    serverless<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Downloaded </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>Items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> items</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As downloading is likely an asynchronous event, your function needs to return a promise. This way, the Serverless Framework will know to wait for this step to finish before starting the following one.</p>\n<p>Another handy thing to notice here is <code class=\"language-text\">cli.log()</code> function on the serverless object. It provides you with uniform message logs to the console.</p>\n<p><em>Note:</em> In your implementation, you can easily swap DynamoDB for another database (or even provider!) entirely - however, for now we’ll stick to AWS - the most widely used provider.</p>\n<h2>Uploading Data</h2>\n<p>In the second step of the implementation, we simply need to take data from <code class=\"language-text\">serverless.variables.copyData</code> and upload it to the test/dev database. As far as I’m aware, we can only do that by uploading the data one by one:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getPutPromise</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dynamodb<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> serverless</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  dynamodb<span class=\"token punctuation\">.</span><span class=\"token function\">putItem</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    serverless<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Uploaded: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">uploadData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function configuring aws-sdk and getting the DynamoDB client</span>\n  <span class=\"token keyword\">const</span> dynamodb <span class=\"token operator\">=</span> <span class=\"token function\">getDynamoDB</span><span class=\"token punctuation\">(</span>serverless<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> uploads <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  serverless<span class=\"token punctuation\">.</span>variables<span class=\"token punctuation\">.</span>copyData<span class=\"token punctuation\">.</span>Items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      TableName<span class=\"token operator\">:</span> <span class=\"token string\">'users-dev'</span><span class=\"token punctuation\">,</span>\n      Item<span class=\"token operator\">:</span> data\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    uploads<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPutPromise</span><span class=\"token punctuation\">(</span>dynamodb<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> serverless<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>uploads<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    serverless<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Data uploaded successfully!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    serverless<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Data upload failed: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And we’re done!</p>\n<p>Somehow, this doesn’t quite feel satisfying. Why should this be a Serverless plugin when really we could write this easily as node or bash script?</p>\n<h2>Why Create A Serverless Plugin?</h2>\n<p>To see where the Serverless Framework helps us, we need to dig a bit deeper. Generally speaking, it contains whatever we specified in <code class=\"language-text\">serverless.yml</code>. To give a few practical examples related to our case:</p>\n<ul>\n<li>region</li>\n<li>default stage and custom variables</li>\n<li>service resources</li>\n</ul>\n<p>If we look at the implementation of <code class=\"language-text\">getDynamoDB</code>, some of its benefits become immediately obvious:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> aws <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getDynamoDB</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">serverless</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  aws<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    region<span class=\"token operator\">:</span> serverless<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>provider<span class=\"token punctuation\">.</span>region<span class=\"token punctuation\">,</span>\n    apiVersions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      dynamodb<span class=\"token operator\">:</span> <span class=\"token string\">'2012-08-10'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">aws<span class=\"token punctuation\">.</span>DynamoDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Getting region from the <code class=\"language-text\">serverless</code> object makes our plugin more resilient. If we decide to deploy the service to another region, the plugin will still work.</p>\n<p>It also makes it useful outside of our particular service. We could use it across our codebase or even open source it. Well, nearly…</p>\n<h2>Defining Stage</h2>\n<p>Our plugin is so far really useful only if I have a <code class=\"language-text\">users</code> table deployed to <code class=\"language-text\">production</code> and <code class=\"language-text\">dev</code>. I might also want to use it for <code class=\"language-text\">customers</code>, moving data from <code class=\"language-text\">test</code> to <code class=\"language-text\">dev</code> for debugging and testing purposes.</p>\n<p>We’ve already used region to configure <code class=\"language-text\">aws-sdk</code>. For the others, we need to first consider what we might have defined in <code class=\"language-text\">serverless.yml</code>. One of the typical set-ups would be to have a default stage that can be optionally replaced by passing <code class=\"language-text\">--stage</code> flag to <code class=\"language-text\">sls</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">provider:\n  name: aws\n  runtime: nodejs4.3\n  region: eu-west-1\n  stage: dev\n\ncustom:\n  stage: ${opt:stage, self:provider.stage}</code></pre></div>\n<p>We are now sure we’ll have a stage specified whenever we’re running serverless commands. This allows us to swap <code class=\"language-text\">users-production</code> for a more generic formulation:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">downloadData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// function configuring aws-sdk and getting the DynamoDB client</span>\n  <span class=\"token keyword\">const</span> dynamodb <span class=\"token operator\">=</span> <span class=\"token function\">getDynamoDB</span><span class=\"token punctuation\">(</span>serverless<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    TableName<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">users-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>serverless<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>custom<span class=\"token punctuation\">.</span>stage<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//...scan</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This code is equivalent to the original one if we run <code class=\"language-text\">serverless copy-data -s production</code>.</p>\n<h2>Upload Stage</h2>\n<p>Being able to choose which stage of the table to upload data to will be a bit more tricky. In the original example, we’re using a flag already used by the service. We now want to introduce a new one - and that’s done by defining <code class=\"language-text\">options</code>.</p>\n<p>This is very easy in serverless:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CopyDataPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'copy-data'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        lifecycleEvents<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'downloadData'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'uploadData'</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        usage<span class=\"token operator\">:</span> <span class=\"token string\">'Pushes data from one database to another'</span><span class=\"token punctuation\">,</span>\n        options<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'target-stage'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            usage<span class=\"token operator\">:</span> <span class=\"token string\">'Stage you want to upload data to'</span><span class=\"token punctuation\">,</span>\n            required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n            shortcut<span class=\"token operator\">:</span> <span class=\"token string\">'t'</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// hooks...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now in the upload function, we update table name the same way we did in upload; this time however, getting target from the options.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">uploadData</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// dynamodb...</span>\n\n  serverless<span class=\"token punctuation\">.</span>variables<span class=\"token punctuation\">.</span>copyData<span class=\"token punctuation\">.</span>Items<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      TableName<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">users-</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>options<span class=\"token punctuation\">[</span><span class=\"token string\">'target-stage'</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      Item<span class=\"token operator\">:</span> data\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    uploads<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPutPromise</span><span class=\"token punctuation\">(</span>dynamodb<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">,</span> serverless<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// wait for promises...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now the plugin can get data from <code class=\"language-text\">users</code> table in any stage and upload it to another one by running <code class=\"language-text\">sls copy-data -s production -t dev</code>.</p>\n<h2>Which Table?</h2>\n<p>To get the right table, you can again specify an option and swap <code class=\"language-text\">users</code> for <code class=\"language-text\">options.tableName</code>. However, there’s another way to do it that illustrates the capabilities of the Serverless Framework.</p>\n<p>Let’s say you’ve defined your DynamoDB as a resource in your <code class=\"language-text\">serverless.yml</code> in a following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">resources:\n  Resources:\n    ArticlesTable:\n      Type: &quot;AWS::DynamoDB::Table&quot;\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: &quot;Title&quot;\n            AttributeType: &quot;S&quot;\n          -\n            AttributeName: &quot;Author&quot;\n            AttributeType: &quot;S&quot;\n        KeySchema:\n          -\n            AttributeName: &quot;Title&quot;\n            KeyType: &quot;HASH&quot;\n          -\n            AttributeName: &quot;Author&quot;\n            KeyType: &quot;RANGE&quot;\n        ProvisionedThroughput:\n          ReadCapacityUnits: &quot;5&quot;\n          WriteCapacityUnits: &quot;5&quot;\n        TableName: &quot;articles-${self:custom.stage}&quot;</code></pre></div>\n<p>Although the format of the table name is still <code class=\"language-text\">name-stage</code>, it won’t work with our plugin because it expects a <code class=\"language-text\">user</code> table. Luckily, the format of the data can be defined in any way, so you only need to change the way you’re getting the table name.</p>\n<p>You add a new option <code class=\"language-text\">--resource</code> that will point to the Resource name. Then you get the right table name from its Resource definition, and can replace the original stage with the target one:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTableName</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> isUpload <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> table <span class=\"token operator\">=</span> serverless<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>resources<span class=\"token punctuation\">.</span>Resources<span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">.</span>resource<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Properties<span class=\"token punctuation\">.</span>TableName<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isUpload<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>serverless<span class=\"token punctuation\">.</span>service<span class=\"token punctuation\">.</span>custom<span class=\"token punctuation\">.</span>stage<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">[</span><span class=\"token string\">'target-stage'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Although this solution has its issues, it makes the plugin yet a bit more reusable and resilient.</p>\n<h2>Ready</h2>\n<p>Well done! You’ve just finished a Serverless Framework plugin that not only solves a real-world issue, but also can be easily packaged, published to npm and shared with others!</p>\n<p>There’s yet much more to explore. What other things can we get from the <code class=\"language-text\">serverless</code> object? How do we hook into existing commands to extend them? How do we write a plugin that could be used, say, with both AWS and OpenWhisk?</p>\n<p>I’ll leave these questions for you to answer with your own experiments.</p>\n<p>PS: To see the whole plugin together, including a service it works with, <a href=\"https://github.com/lithin/sls-plugins-example\">check my GitHub</a>.</p>","frontmatter":{"title":"How To Write Your First Plugin For The Serverless Framework - Part 2","date":"February 15, 2017","description":"Now that you've written your first Serverless plugin, learn about different approaches to implementation in part 2 of this series."}}},"pageContext":{"slug":"/posts/2017-02-15-writing-serverless-plugins-2/","previous":{"fields":{"slug":"/posts/2017-02-14-serverless-v1.7.0/"},"frontmatter":{"title":"Trigger Lambda functions through CloudWatch Events with Serverless v1.7"}},"next":{"fields":{"slug":"/posts/2017-02-17-cicd-for-serverless-part-1/"},"frontmatter":{"title":"CICD for Serverless Part 1 - Mocha Endpoint Testing"}}}}}
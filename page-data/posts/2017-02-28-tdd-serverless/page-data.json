{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-02-28-tdd-serverless/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"36385edb-5b7f-5594-85d3-5e3ef6d497e3","excerpt":"Quick Start to Test-Driven Development with Serverless Framework If you don’t possess the magic that keeps your code working, the following instructions will…","html":"<h1>Quick Start to Test-Driven Development with Serverless Framework</h1>\n<p>If you don’t possess the <a href=\"http://www.commitstrip.com/en/2017/02/08/where-are-the-tests/\">magic</a> that keeps your code working, the following instructions will help you start test-driven Serverless application development.</p>\n<p>What I like most about the Serverless Framework as a development tool is that it gathers together all of the cloud resources for a structured project. With the whole stack in the same project, it’s convenient and easy to start writing tests. </p>\n<p>Usually for a new project I use the <a href=\"https://github.com/sc5/sc5-serverless-boilerplate\">SC5 Serverless boilerplate</a>. It’s a good setup to begin with. But in this tutorial, I start with an existing example <a href=\"https://github.com/serverless/examples/tree/master/aws-node-simple-http-endpoint\">aws-node-simple-http-endpoint</a> project, to show how easy it is to add Serverless testing plugin even to an existing project. </p>\n<p>Let’s start by installing the service, changing the directory to the one that <code class=\"language-text\">sls install</code> command creates, and installing dependencies that service requires to run.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sls <span class=\"token function\">install</span> -u https://github.com/serverless/examples/tree/master/aws-node-simple-http-endpoint -n my-tdd-service\n<span class=\"token builtin class-name\">cd</span> my-tdd-service\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span></code></pre></div>\n<p>Then install the <a href=\"https://github.com/sc5/serverless-mocha-plugin\">Mocha plugin</a> with <code class=\"language-text\">npm install --save-dev serverless-mocha-plugin</code>. If you’re more familiar with writing tests with Jest, you can use <a href=\"https://github.com/sc5/serverless-jest-plugin\">Jest plugin</a>.</p>\n<p>The next step is to add the installed plugin to serverless.yml. This project doesn’t have any plugins yet installed so the <code class=\"language-text\">plugins</code> key is also added.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>mocha<span class=\"token punctuation\">-</span>plugin</code></pre></div>\n<p>Now, run <code class=\"language-text\">sls</code> and the output should include following new commands that the Mocha plugin adds to the Serverless Framework.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">create test ................... Create mocha tests for service / function\ncreate function ............... Create a function into the service\ninvoke test ................... Invoke test(s)</code></pre></div>\n<p>To create a test to an existing function, use the <code class=\"language-text\">create test</code> command with parameter <code class=\"language-text\">-f</code> or <code class=\"language-text\">--function</code>. In this example project, there is already a function called <code class=\"language-text\">currentTime</code>. To create a test stub for that, run <code class=\"language-text\">sls create test -f currentTime</code> and it should print out <code class=\"language-text\">Serverless: serverless-mocha-plugin: created test/currentTime.js</code> as a result.</p>\n<p>Next, invoke the test by running <code class=\"language-text\">sls invoke test</code> and the output should be something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  currentTime\n    ✓ implement tests here\n\n\n  <span class=\"token number\">1</span> passing <span class=\"token punctuation\">(</span>8ms<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now for the fun part – implementing the actual tests. The tests that the Serverless Mocha plugin creates are in the <code class=\"language-text\">test</code> directory, which is the default directory for Mocha tests. If you prefer to use a different directory you can create tests using <code class=\"language-text\">-p</code> or <code class=\"language-text\">--path</code> parameter when creating and invoking tests. Open the <code class=\"language-text\">tests/currentTime.js</code> to your code editor.</p>\n<p>There is a generated test that only tests that the response is not empty.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'implement tests here'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> wrapped<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Replace that with the following one, which tests that statusCode is 200 and that the response body contains a message that has the time. In real life, you may want to fake the date with <a href=\"http://sinonjs.org/\">Sinon.JS</a> or similar so that you can test the response with predefined dates.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should return current time'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> wrapped<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/.*\\s\\d{2}:\\d{2}:\\d{2}\\sGMT(\\+|-){1}\\d{4}\\s\\(.*\\)\\./</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>After invoking the tests again with <code class=\"language-text\">sls invoke test</code> command, the output should be:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  currentTime\n    ✓ should <span class=\"token builtin class-name\">return</span> current <span class=\"token function\">time</span>\n\n\n  <span class=\"token number\">1</span> passing <span class=\"token punctuation\">(</span>8ms<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The first test is now ready. Let’s create some more! Now we have a function that returns time, so we need to know the date also. With <code class=\"language-text\">sls create function</code> command you are able to create a function and test case for it.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sls create <span class=\"token keyword\">function</span> -f currentDate --handler date/handler.endpoint</code></pre></div>\n<p>Then open <code class=\"language-text\">test/currentDate.js</code> to your editor and replace the default <code class=\"language-text\">implement tests here</code> test block with snippet:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should return current date'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> wrapped<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span>be<span class=\"token punctuation\">.</span><span class=\"token function\">equal</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/.*\\s(Sun|Mon|Tue|Wed|Thu|Fri|Sat)\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s[0-3]\\d{1}\\s\\d{4}\\./</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When invoking tests with <code class=\"language-text\">sls invoke test</code> command, you should get the following error:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">AssertionError: expected <span class=\"token string\">'Go Serverless v1.0! Your function executed successfully!'</span>\nto match \n/.*<span class=\"token punctuation\">\\</span>s<span class=\"token punctuation\">(</span>Sun<span class=\"token operator\">|</span>Mon<span class=\"token operator\">|</span>Tue<span class=\"token operator\">|</span>Wed<span class=\"token operator\">|</span>Thu<span class=\"token operator\">|</span>Fri<span class=\"token operator\">|</span>Sat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">\\</span>s<span class=\"token punctuation\">(</span>Jan<span class=\"token operator\">|</span>Feb<span class=\"token operator\">|</span>Mar<span class=\"token operator\">|</span>Apr<span class=\"token operator\">|</span>May<span class=\"token operator\">|</span>Jun<span class=\"token operator\">|</span>Jul<span class=\"token operator\">|</span>Aug<span class=\"token operator\">|</span>Sep<span class=\"token operator\">|</span>Oct<span class=\"token operator\">|</span>Nov<span class=\"token operator\">|</span>Dec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">\\</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span>-3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">\\</span>d<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">\\</span>s<span class=\"token punctuation\">\\</span>d<span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">\\</span>./</code></pre></div>\n<p>Next fix the function to match the test, open <code class=\"language-text\">date/handler.js</code> and replace the code with one that returns the date.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">endpoint</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, the current date is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDateString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Once again, run the <code class=\"language-text\">sls invoke test</code> command and the result should be successful.</p>\n<p>In addition to test keeping your code functional, the benefit of using test instead of e.g. <code class=\"language-text\">sls invoke local</code> is that you can test the same handler function easily with different payloads.</p>\n<p>If you’d like a working example, here’s the <a href=\"https://github.com/laardee/my-tdd-service\">repository</a> I used while making this tutorial.</p>","frontmatter":{"title":"Test-Driven Serverless Application Development","date":"February 28, 2017","description":"Quick Start to Test-Driven Development with Serverless Framework."}}},"pageContext":{"slug":"/posts/2017-02-28-tdd-serverless/","previous":{"fields":{"slug":"/posts/2017-02-28-serverless-v1.8.0/"},"frontmatter":{"title":"Azure Functions Support with Serverless v1.8"}},"next":{"fields":{"slug":"/posts/2017-03-07-static-site-post-scheduler/"},"frontmatter":{"title":"How To Schedule Posts for Static Site Generators (Jekyll, Hugo, Phenomic etc.)"}}}}}
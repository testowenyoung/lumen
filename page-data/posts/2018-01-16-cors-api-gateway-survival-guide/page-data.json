{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-01-16-cors-api-gateway-survival-guide/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"15784318-4d22-599a-bd39-7bf2e0469c45","excerpt":"Building web API backends is one of the most popular use cases for Serverless applications. You get the benefit of a simple, scalable backend without the…","html":"<p>Building web API backends is one of the most popular use cases for Serverless applications. You get the benefit of a simple, scalable backend without the operations overhead.</p>\n<p>However, if you have a web page that’s making calls to a backend API, you’ll have to deal with the dreaded <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\">Cross-Origin Resource Sharing</a>, or CORS. If your web page makes an HTTP request to a <em>different domain</em> than you’re currently on, it needs to be CORS-friendly.</p>\n<p>If you’ve ever found yourself with the following error:</p>\n<blockquote>\n<p>No ‘Access-Control-Allow-Origin’ header is present on the requested resource</p>\n</blockquote>\n<p>then this page is for you!</p>\n<p>In this post, we’ll cover all you need to know about Serverless + CORS. If you don’t care about the specifics, hit the <a href=\"#tldr\">TL;DR</a> section below. Otherwise, we’ll cover:</p>\n<ul>\n<li><a href=\"#cors-preflight-requests\">Preflight requests</a></li>\n<li><a href=\"#cors-response-headers\">Response headers</a></li>\n<li><a href=\"#cors-with-custom-authorizers\">CORS with custom authorizers</a></li>\n<li><a href=\"#cors-with-cookie-credentials\">CORS with cookie credentials</a></li>\n</ul>\n<p>Let’s get started!</p>\n<h4>TL;DR</h4>\n<p>If you want the quick and dirty way to solve CORS in your Serverless application, do this.</p>\n<ol>\n<li>\n<p>To handle <a href=\"#cors-preflight-requests\">preflight requests</a>, add the <code class=\"language-text\">cors: true</code> flag to <em>each HTTP endpoint</em> in your <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> products<span class=\"token punctuation\">-</span>service\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">getProduct</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.getProduct\n   <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n         <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> product/<span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span>\n         <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get\n         <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># &lt;-- CORS!</span>\n <span class=\"token key atrule\">createProduct</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.createProduct\n   <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n         <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> product\n         <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> post\n         <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># &lt;-- CORS!</span></code></pre></div>\n</li>\n<li>\n<p>To handle the <a href=\"#cors-response-headers\">CORS headers</a>, return the CORS headers in your response. The main headers are <code class=\"language-text\">Access-Control-Allow-Origin</code> and <code class=\"language-text\">Access-Control-Allow-Credentials</code>.</p>\n<p>You can use the example below, or check out the middleware libraries discussed below to help with this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Do work to retrieve Product</span>\n  <span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> <span class=\"token function\">retrieveProduct</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token operator\">:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Access-Control-Allow-Credentials'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      product<span class=\"token operator\">:</span> product\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Do work to create Product</span>\n  <span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> <span class=\"token function\">createProduct</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token operator\">:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Access-Control-Allow-Credentials'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      product<span class=\"token operator\">:</span> product\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>If you’re using a custom authorizer, you’ll need to add the following CloudFormation in your <code class=\"language-text\">resources</code> block of <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token punctuation\">...</span>\n\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">GatewayResponseDefault4XX</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::ApiGateway::GatewayResponse'</span>\n      <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">ResponseParameters</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">gatewayresponse.header.Access-Control-Allow-Origin</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"'*'\"</span>\n          <span class=\"token key atrule\">gatewayresponse.header.Access-Control-Allow-Headers</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"'*'\"</span>\n        <span class=\"token key atrule\">ResponseType</span><span class=\"token punctuation\">:</span> DEFAULT_4XX\n        <span class=\"token key atrule\">RestApiId</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">Ref</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ApiGatewayRestApi'</span></code></pre></div>\n</li>\n</ol>\n<h4>CORS Preflight Requests</h4>\n<p>If you’re not making a “simple request”, your browser will send a <strong>preflight request</strong> to the resource using the <code class=\"language-text\">OPTIONS</code> method. The resource you’re requesting will return with methods that are safe to send to the resource and may optionally return the headers that are valid to send across.</p>\n<p>Let’s break that down.</p>\n<h5>When does my browser send a preflight request?</h5>\n<p>Your browser will send a preflight request on almost all cross-origin requests. (The exceptions are “simple requests”, but it’s a pretty narrow subset of requests.)</p>\n<p>Basically, a simple request is only a <code class=\"language-text\">GET</code> request or a <code class=\"language-text\">POST</code> request with form data that has <em>no authentication</em>. If you’re outside of that, it will need a preflight.</p>\n<p>If you use a <code class=\"language-text\">PUT</code> or <code class=\"language-text\">DELETE</code> request, it will send a preflight. If you use a <code class=\"language-text\">Content-Type</code> header outside of <code class=\"language-text\">application/x-www-form-urlencoded</code>, <code class=\"language-text\">multipart/form-data</code>, or <code class=\"language-text\">text/plain</code>, it will send a preflight. If you include any headers outside some very basic ones, such as Authentication headers, it will send a preflight.</p>\n<h5>What’s in the response to the preflight request?</h5>\n<p>The response to a preflight request includes the domains it allows to access the resources and the methods it allows at that resource, such as <code class=\"language-text\">GET</code>, <code class=\"language-text\">POST</code>, <code class=\"language-text\">PUT</code>, etc. It may also include headers that are allowed at that resource, such as <code class=\"language-text\">Authentication</code>.</p>\n<h5>How do I handle preflight requests with Serverless?</h5>\n<p>To set up the preflight response, you’ll need to configure an <code class=\"language-text\">OPTIONS</code> method handler at your endpoint in <a href=\"https://serverless.com/amazon-api-gateway/\">API Gateway</a>. Fortunately, this is very simple with the Serverless Framework.</p>\n<p>Simply add <code class=\"language-text\">cors: true</code> to <em>each endpoint</em> in your <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> products<span class=\"token punctuation\">-</span>service\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">getProduct</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.getProduct\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> product/<span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get\n          <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># &lt;-- CORS!</span>\n  <span class=\"token key atrule\">createProduct</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.createProduct\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> product\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> post\n          <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># &lt;-- CORS!</span></code></pre></div>\n<p>This configures API Gateway to allow any domain to access, and it includes a basic set of allowed headers. If you want additional customization (advanced usage only), it will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> products<span class=\"token punctuation\">-</span>service\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">getProduct</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.getProduct\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> product/<span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get\n          <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">origin</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'*'</span> <span class=\"token comment\"># &lt;-- Specify allowed origin</span>\n            <span class=\"token key atrule\">headers</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># &lt;-- Specify allowed headers</span>\n              <span class=\"token punctuation\">-</span> Content<span class=\"token punctuation\">-</span>Type\n              <span class=\"token punctuation\">-</span> X<span class=\"token punctuation\">-</span>Amz<span class=\"token punctuation\">-</span>Date\n              <span class=\"token punctuation\">-</span> Authorization\n              <span class=\"token punctuation\">-</span> X<span class=\"token punctuation\">-</span>Api<span class=\"token punctuation\">-</span>Key\n              <span class=\"token punctuation\">-</span> X<span class=\"token punctuation\">-</span>Amz<span class=\"token punctuation\">-</span>Security<span class=\"token punctuation\">-</span>Token\n              <span class=\"token punctuation\">-</span> X<span class=\"token punctuation\">-</span>Amz<span class=\"token punctuation\">-</span>User<span class=\"token punctuation\">-</span>Agent\n            <span class=\"token key atrule\">allowCredentials</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></code></pre></div>\n<h4>CORS Response Headers</h4>\n<p>While the preflight request only applies to some cross-origin requests, the CORS response headers must be present in <em>every</em> cross-origin request. This means you must add the <code class=\"language-text\">Access-Control-Allow-Origin</code> header to your responses in your handlers.</p>\n<p>If you’re using cookies or other authentication, you’ll also need to add the <code class=\"language-text\">Access-Control-Allow-Credentials</code> header to your response.</p>\n<p>To match the <code class=\"language-text\">serverless.yml</code> in the section above, your <code class=\"language-text\">handler.js</code> file should look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// handler.js</span>\n\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Do work to retrieve Product</span>\n  <span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> <span class=\"token function\">retrieveProduct</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token operator\">:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Access-Control-Allow-Credentials'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      product<span class=\"token operator\">:</span> product\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">createProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Do work to create Product</span>\n  <span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> <span class=\"token function\">createProduct</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token operator\">:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Access-Control-Allow-Credentials'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      product<span class=\"token operator\">:</span> product\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note how the <code class=\"language-text\">response</code> object has a <code class=\"language-text\">headers</code> property, which contains an object with <code class=\"language-text\">Access-Control-Allow-Origin</code> and <code class=\"language-text\">Access-Control-Allow-Credentials</code>.</p>\n<p>It can be a real pain to add these headers everywhere in your function, particularly if you have multiple logical paths. Luckily, there are some nice tools to help with this!</p>\n<p>If you use Javascript, check out the <a href=\"https://middy.js.org/\">Middy</a> middleware engine for use with Lambda. It has a lot of nice middlewares that handle the boring boilerplate of your Lambda functions. One is the <code class=\"language-text\">cors</code> middleware, which automatically adds CORS headers to your functions.</p>\n<p>A basic example looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// handler.js</span>\n\n<span class=\"token keyword\">const</span> middy <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'middy'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> cors <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'middy/middlewares'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// This is your common handler, no way different than what you are used to do every day</span>\n<span class=\"token comment\">// in AWS Lambda</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token string\">\"Hello, world!\"</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Let's \"middyfy\" our handler, then we will be able to attach middlewares to it</span>\n<span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> <span class=\"token function\">middy</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Adds CORS headers to responses</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> handler <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Perfect—automatic CORS headers! Check out the whole Middy library for lots of other nice utilities.</p>\n<p>If you’re a Pythonista, <a href=\"https://twitter.com/schep_\">Daniel Schep</a> has made a nice <a href=\"https://github.com/dschep/lambda-decorators\"><code class=\"language-text\">lambda-decorators</code></a> library with the same goals as Middy—replacing Lambda boilerplate.</p>\n<p>Here’s an example of using it in your Python functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># handler.py</span>\n\n<span class=\"token keyword\">from</span> lambda_decorators <span class=\"token keyword\">import</span> cors_headers\n\n<span class=\"token decorator annotation punctuation\">@cors_headers</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token string\">'statusCode'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'body'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello, world!\"</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Note:</strong> Daniel is the creator of the <a href=\"https://github.com/UnitedIncome/serverless-python-requirements\"><code class=\"language-text\">serverless-python-requirements</code></a> package, which you should absolutely be using if you’re writing Lambda functions in Python. Check out our previous <a href=\"https://serverless.com/blog/serverless-python-packaging/\">blog post on Python packaging</a>.</p>\n<h4>CORS with custom authorizers</h4>\n<p><a href=\"https://serverless.com/framework/docs/providers/aws/events/apigateway/#http-endpoints-with-custom-authorizers\">Custom authorizers</a> allow you to protect your Lambda endpoints with a function that is responsible for handling authorization.</p>\n<p>If the authorization is successful, it will forward the request onto the Lambda handler. If it’s unsuccessful, it will reject the request and return to the user.</p>\n<p>The CORS difficulty lies in the second scenario—if you reject an authorization request, you don’t have the ability to specify the CORS headers in your response. This can make it difficult for the client browser to understand the response.</p>\n<p>To handle this, you’ll need to add a custom GatewayResponse to your API Gateway. You’ll add this in the <code class=\"language-text\">resources</code> block of your <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n   <span class=\"token punctuation\">...</span>\n\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">GatewayResponseDefault4XX</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::ApiGateway::GatewayResponse'</span>\n      <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">ResponseParameters</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">gatewayresponse.header.Access-Control-Allow-Origin</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"'*'\"</span>\n          <span class=\"token key atrule\">gatewayresponse.header.Access-Control-Allow-Headers</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"'*'\"</span>\n        <span class=\"token key atrule\">ResponseType</span><span class=\"token punctuation\">:</span> DEFAULT_4XX\n        <span class=\"token key atrule\">RestApiId</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">Ref</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ApiGatewayRestApi'</span></code></pre></div>\n<p>This will ensure that the proper response headers are returned from your custom authorizer rejecting an authorization request.</p>\n<h4>CORS with Cookie credentials</h4>\n<p><em>Note: This section was added on January 29, 2018 thanks to a request from <a href=\"https://twitter.com/orKoN\">Alex Rudenko</a>. Hat tip to Martin Splitt for <a href=\"http://50linesofco.de/post/2017-03-06-cors-a-guided-tour#credentials-and-cors\">a great article</a> on this issue.</em></p>\n<p>In the examples above, we’ve given a wildcard ”*” as the value for the <code class=\"language-text\">Access-Control-Allow-Origin</code> header. However, if you’re making a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Requests_with_credentials\">request using credentials</a>, the wildcard value is not allowed. For your browser to make use of the response, the <code class=\"language-text\">Access-Control-Allow-Origin</code> response headers <em>must</em> include the specific origin that made the request.</p>\n<p>There are two ways you can handle this. First, if you only have one origin website that’s making the request, you can just hardcode that into your Lambda function’s response:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// handler.js</span>\n\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Do work to retrieve Product</span>\n  <span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> <span class=\"token function\">retrieveProduct</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://myorigin.com'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// &lt;-- Add your specific origin here</span>\n      <span class=\"token string\">'Access-Control-Allow-Credentials'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      product<span class=\"token operator\">:</span> product\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you have multiple origin websites that may be hitting your API, then you’ll need to do a more dynamic approach. You can inspect the <code class=\"language-text\">origin</code> header to see if its in your list of approved origins. If it is, return the origin value in your <code class=\"language-text\">Access-Control-Allow-Origin</code> header:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// handler.js</span>\n\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ALLOWED_ORIGINS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t<span class=\"token string\">'https://myfirstorigin.com'</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token string\">'https://mysecondorigin.com'</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getProduct</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> origin <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> headers<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">ALLOWED_ORIGINS</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">origin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token operator\">:</span> origin<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'Access-Control-Allow-Credentials'</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token operator\">:</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Do work to retrieve Product</span>\n  <span class=\"token keyword\">const</span> product <span class=\"token operator\">=</span> <span class=\"token function\">retrieveProduct</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    headers\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      product<span class=\"token operator\">:</span> product\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this example, we check if the <code class=\"language-text\">origin</code> header matches one of our allowed headers. If so, we include the specific origin in our <code class=\"language-text\">Access-Control-Allow-Origin</code> header, and we state that <code class=\"language-text\">Access-Control-Allow-Credentials</code> are allowed. If the <code class=\"language-text\">origin</code> is not one of our allowed origins, we include the standard headers which will be rejected if the origin attempts a credentialed request.</p>\n<h4>Conclusion</h4>\n<p>CORS can be a pain, but there are a few straightforward steps you can take to make it much easier to deal with.</p>\n<p>You know what that means. Goodbye forever, inexplicable <code class=\"language-text\">No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource</code> error. 👋</p>","frontmatter":{"title":"Your CORS and API Gateway survival guide","date":"January 16, 2018","description":"Get the basics on Cross-Origin Resource Sharing (CORS) and how to avoid problems with your Serverless web APIs on Lambda."}}},"pageContext":{"slug":"/posts/2018-01-16-cors-api-gateway-survival-guide/","previous":{"fields":{"slug":"/posts/2018-01-15-serverless-cloudtrail-cloudwatch-events/"},"frontmatter":{"title":"How to monitor AWS account activity with Cloudtrail, Cloudwatch Events and Serverless"}},"next":{"fields":{"slug":"/posts/2018-01-18-framework-example-golang-lambda-support/"},"frontmatter":{"title":"Serverless Framework example for Golang and Lambda"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-06-29-quick-tips-for-faster-serverless-development/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"0d17527b-db7e-5f7e-9fba-3951fab94ee9","excerpt":"One of the biggest pain points we hear from developers moving into the serverless world, is the slower feedback loop while developing. In this post, I’m going…","html":"<img align=\"right\" width=\"250\" height=\"250\" src=\"https://s3-us-west-2.amazonaws.com/assets.site.serverless.com/blog/sls-speed.jpg\">\n<p>One of the biggest pain points we hear from developers moving into the serverless world, is the slower feedback loop while developing.</p>\n<p>In this post, I’m going to walk through some of the ways I speed up building and deploying live serverless services.</p>\n<p>The serverless framework has a ton of hidden gems to speed up your dev cycle.</p>\n<p><strong>Lets explore!</strong></p>\n<h2>1. Deploy changes faster with <code class=\"language-text\">sls deploy function</code></h2>\n<p>Many users aren’t aware of the <code class=\"language-text\">serverless deploy function</code> command and instead use <code class=\"language-text\">serverless deploy</code> each time their code has changed.</p>\n<p><strong>What is the difference?</strong></p>\n<p><code class=\"language-text\">sls deploy</code> re-deploys the entire stack through cloud formation and can be noticeably slooowww.</p>\n<p>On the flip side, <code class=\"language-text\">sls deploy function</code> only zips up the code (&#x26; any dependencies) and updates the lambda function only. This is much much faster than waiting for an entire stack update.</p>\n<p>So, when developing you can use <code class=\"language-text\">sls deploy function -f myFuncName</code> for speedier code changes in your live AWS account.</p>\n<p>One note: If you make any changes to <code class=\"language-text\">serverless.yml</code> config, like changing endpoint paths or updating custom resources, etc that will require a full <code class=\"language-text\">sls deploy</code> to update the entire stack.</p>\n<p>If you have only make changes to your function code, <code class=\"language-text\">sls deploy function -f myFuncName</code> will work just fine and be much snappier.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Redeploy entire stack through cloud formation</span>\nsls deploy\n\n<span class=\"token comment\"># Redeploy only the code + dependencies to update the AWS lambda function</span>\nsls deploy <span class=\"token keyword\">function</span> -f myFuncName</code></pre></div>\n<h2>2. Tail your live service logs</h2>\n<p>Debugging remote code in the serverless world can be tricky. Luckily <code class=\"language-text\">console.log</code> and lambda functions go together like peanut butter and jelly.</p>\n<p>One of my favorite serverless framework commands is the <code class=\"language-text\">sls logs</code> command. It will pull the logs from your remote function directly into the terminal.</p>\n<p>This is handy for debugging errors or inspecting what the <code class=\"language-text\">event</code> or <code class=\"language-text\">context</code> args contain.</p>\n<p>It’s even more useful when you tail the logs and get a live update as you are pinging your live functions.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># View logs of myFuncName and tail via -t flag</span>\nserverless logs -f myFuncName -t</code></pre></div>\n<p>I will pop open a new terminal window and run <code class=\"language-text\">sls logs -f funcName -t</code> and then ping my lambda function with Postman (or my UI) and live debug the function.</p>\n<p>Having 2 terminal windows open and combining <code class=\"language-text\">sls deploy function -f funcName</code> for quicker code changes and watching the live logs with <code class=\"language-text\">sls logs -f funcName -t</code> is super easy to do and speeds up my feedback loop.</p>\n<h2>3. Offline Emulation</h2>\n<p>Now you might be asking, what about offline emulation? It’s absolutely a way to speed up dev cycles without having to re-deploy anything.  </p>\n<p>With the <a href=\"https://github.com/dherault/serverless-offline\">serverless offline plugin</a> you can speed up local dev is by emulating AWS lambda and API Gateway locally when developing your Serverless project.</p>\n<ol>\n<li>Install the plugin</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> serverless-offline --save-dev</code></pre></div>\n<ol start=\"2\">\n<li>Then add the <code class=\"language-text\">plugins</code> key in <code class=\"language-text\">serverless.yml</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>offline</code></pre></div>\n<ol start=\"3\">\n<li>Now you should have the <code class=\"language-text\">serverless offline</code> commands available when running <code class=\"language-text\">serverless -help</code></li>\n</ol>\n<p>Serverless has a lot of useful plugins to test code locally before deploying to a remote environment. This helps developers save time of unnecessary deploys.</p>\n<h3>Additional emulation resources:</h3>\n<ul>\n<li><a href=\"https://github.com/dherault/serverless-offline\">Emulate AWS Lambdas and API Gateway locally</a></li>\n<li><a href=\"https://www.npmjs.com/package/serverless-dynamodb-local\">Emulate DynamoDB locally</a></li>\n<li><a href=\"https://github.com/atlassian/localstack\">Local Stack</a></li>\n</ul>\n<p><em>PS! How do you speed up your dev flow?!</em></p>\n<p><a href=\"https://unsplash.com/search/faste?photo=WR-ifjFy4CI\">Image credit</a></p>","frontmatter":{"title":"3 Steps To Faster Serverless Development","date":"June 29, 2017","description":"Sometimes the development feedback loop can be slow when working with serverless functions. This posts walks through some quick tips I use to speed things up"}}},"pageContext":{"slug":"/posts/2017-06-29-quick-tips-for-faster-serverless-development/","previous":{"fields":{"slug":"/posts/2017-06-27-announcing-emit-2017/"},"frontmatter":{"title":"Announcing Emit 2017"}},"next":{"fields":{"slug":"/posts/2017-06-29-aws-lambda-power-tuning/"},"frontmatter":{"title":"AWS Lambda Power Tuning with AWS Step Functions"}}}}}
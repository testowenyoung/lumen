{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-02-20-etl-job-processing-with-serverless-lambda-and-redshift/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"b1c14d4c-d6fe-5eb7-a32c-a70e69411938","excerpt":"One of the big use cases of using serverless is ETL job processing: dumping data into a database, and possibily visualizing the data. In this post, I’ll go over…","html":"<p>One of the big use cases of using serverless is ETL job processing: dumping data into a database, and possibily visualizing the data.</p>\n<p>In this post, I’ll go over the process step by step. We’ll build a serverless ETL job service that will fetch data from a public API endpoint and dump it into an AWS Redshift database. The service will be scheduled to run every hour, and we’ll visualize the data using Chart.io.</p>\n<p>At Serverless Inc., we use ETL jobs just like this for tracking metrics across an array of data points (though feel free to modify the one I’ll show here to fit your own needs).</p>\n<p>Let’s get to it.</p>\n<p>What we will cover:</p>\n<ul>\n<li>Prerequisites</li>\n<li>Creating the ETL job service</li>\n<li>Deploying and scheduling the job</li>\n<li>Visualizing the data</li>\n</ul>\n<h2>Prerequisites</h2>\n<p>Before we begin, you’ll need the <a href=\"https://serverless.com/framework/docs/providers/aws/guide/quick-start/\">Serverless Framework installed</a> with an AWS account set up. Your version of Serverless must be 1.25 or higher to take advantage of all the latest updates.</p>\n<h3>AWS Redshift</h3>\n<p>Setting up AWS Redshift is out of the scope of this post, but you’ll need one set up to dump data into it from our ETL job. Once you have it set up and configured, keep the cluster endpoint in Redshift handy, as we will need it later to configure the database connection string.</p>\n<p>Redshift cluster endpoint:</p>\n<p><code class=\"language-text\">&lt;cluster_name&gt;.xxxxxxxxxxxx.&lt;region&gt;.redshift.amazonaws.com:&lt;port&gt;</code></p>\n<p>DB connection string:</p>\n<p><code class=\"language-text\">postgres://&lt;username&gt;:&lt;password&gt;@&lt;hostname&gt;:&lt;port&gt;/&lt;db_name&gt;</code>\nwhere <code class=\"language-text\">&lt;hostname&gt;:&lt;port&gt;</code> is the cluster endpoint.</p>\n<h2>Building the ETL job service</h2>\n<p>My previous projects were in Node.js, but I’m going to write this in Python because I have recently started to play with Python. And, (to the chagrin ofmy colleague <a href=\"https://twitter.com/alexbdebrie\">Alex DeBrie</a> I love it! But you can write this in any language you want.</p>\n<p>Let’s create a new Serverless project from a template. Use the <code class=\"language-text\">sls create</code> command and change into that directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls create -t aws-python3 -p serverless-etl\n$ <span class=\"token builtin class-name\">cd</span> serverless-etl</code></pre></div>\n<p>Next, let’s install some required dependencies.</p>\n<p>We’ll use the <code class=\"language-text\">serverless-python-requirements</code> plugin for handling our Python packages on deployment:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev serverless-python-requirements</code></pre></div>\n<p><strong>Note:</strong> If you want a deeper dive on the <code class=\"language-text\">serverless-python-requirements</code> plugin, check out our previous post on <a href=\"https://serverless.com/blog/serverless-python-packaging/\">handling Python packaging with Serverless</a>.</p>\n<p>With the dependencies out of the way, let’s get started. Replace the <code class=\"language-text\">serverless.yml</code> file contents with the following <code class=\"language-text\">yaml</code> code:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> sample<span class=\"token punctuation\">-</span>etl\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>python<span class=\"token punctuation\">-</span>requirements\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">pythonRequirements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">dockerizePip</span><span class=\"token punctuation\">:</span> non<span class=\"token punctuation\">-</span>linux\n  <span class=\"token key atrule\">dbConn</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>ssm<span class=\"token punctuation\">:</span>/ETL/RedshiftConn~true<span class=\"token punctuation\">}</span>\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> python3.6\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>west<span class=\"token punctuation\">-</span><span class=\"token number\">2</span>\n  <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">DB_CONN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.dbConn<span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">vpc</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">securityGroupIds</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> sg<span class=\"token punctuation\">-</span>xxxxxxx\n    <span class=\"token key atrule\">subnetIds</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> subnet<span class=\"token punctuation\">-</span>xxxxxxx\n  <span class=\"token key atrule\">iamRoleStatements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">Effect</span><span class=\"token punctuation\">:</span> Allow\n      <span class=\"token key atrule\">Action</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">\"ec2:CreateNetworkInterface\"</span>\n      <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">etlSample</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.main\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span> rate(1 hour)</code></pre></div>\n<p>Let’s review the above <code class=\"language-text\">serverless.yml</code> configuration for our service.</p>\n<p>We need to specify the connection string to the Redshift postgres database. You’ll notice I have used the AWS Parameter Store (SSM) to store the connection string for obvious security reasons:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">...</span>\n  <span class=\"token key atrule\">dbConn</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>ssm<span class=\"token punctuation\">:</span>/ETL/RedshiftConn~true<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Note:</strong> For a detailed explanation of secrets management strategies, check out our previous post on <a href=\"https://serverless.com/blog/serverless-secrets-api-keys/\">managing secrets, API keys and more with Serverless</a>.</p>\n<p>Since Redshift is secured by running under a VPC, you’ll need to supply the appropriate security groups, subnets, and IAM roles like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">  <span class=\"token punctuation\">...</span>\n  <span class=\"token key atrule\">vpc</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">securityGroupIds</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> sg<span class=\"token punctuation\">-</span>xxxxxxx\n    <span class=\"token key atrule\">subnetIds</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> subnet<span class=\"token punctuation\">-</span>xxxxxxx\n\n  <span class=\"token key atrule\">iamRoleStatements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">Effect</span><span class=\"token punctuation\">:</span> Allow\n      <span class=\"token key atrule\">Action</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">\"ec2:CreateNetworkInterface\"</span>\n      <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span>\n  <span class=\"token punctuation\">...</span></code></pre></div>\n<h3>Using a Public API</h3>\n<p>To keep it simple, I wanted to use a free, public API without any authentication.</p>\n<p>We’ll be using the <a href=\"https://coinmarketcap.com/api/\">CoinMarketCap API</a>. Bitcoin is in peak hype, and I thought it would be interesting to see the metrics over time.</p>\n<h3>Fetch data and stash into Redshift</h3>\n<p>Now that we have our configuration set, let’s replace the <code class=\"language-text\">handler.py</code> file with the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># handler.py</span>\n\n<span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> logging\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> pprint\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> date\n\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> sqlalchemy <span class=\"token keyword\">import</span> create_engine<span class=\"token punctuation\">,</span> MetaData<span class=\"token punctuation\">,</span> text<span class=\"token punctuation\">,</span> Table<span class=\"token punctuation\">,</span> Column<span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">,</span> Boolean<span class=\"token punctuation\">,</span> Numeric\n\nSAMPLE_ENDPOINT <span class=\"token operator\">=</span> <span class=\"token string\">\"https://api.coinmarketcap.com/v1/ticker\"</span>\nDB_CONN<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'DB_CONN'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#### Raw API calls</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_data</span><span class=\"token punctuation\">(</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    payload <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'limit'</span><span class=\"token punctuation\">:</span> limit\n    <span class=\"token punctuation\">}</span>\n\n    resp <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>SAMPLE_ENDPOINT<span class=\"token punctuation\">,</span> params<span class=\"token operator\">=</span>payload<span class=\"token punctuation\">)</span>\n    resp<span class=\"token punctuation\">.</span>raise_for_status<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> data\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">cleanup</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"symbol\"</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"symbol\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"rank\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"rank\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"price_usd\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"price_usd\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"24h_volume_usd\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"24h_volume_usd\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"total_supply\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"total_supply\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"percent_change_1h\"</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"percent_change_1h\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"last_updated\"</span><span class=\"token punctuation\">:</span> make_datetime<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"last_updated\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">#### util methods</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">make_datetime</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> datetime<span class=\"token punctuation\">.</span>datetime<span class=\"token punctuation\">.</span>fromtimestamp<span class=\"token punctuation\">(</span>timestamp <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># SQL Tables</span>\nmetadata <span class=\"token operator\">=</span> MetaData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nsample_table <span class=\"token operator\">=</span> Table<span class=\"token punctuation\">(</span><span class=\"token string\">'sample_coinmarketcap'</span><span class=\"token punctuation\">,</span> metadata<span class=\"token punctuation\">,</span>\n    Column<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nullable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Column<span class=\"token punctuation\">(</span><span class=\"token string\">'symbol'</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nullable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Column<span class=\"token punctuation\">(</span><span class=\"token string\">'rank'</span><span class=\"token punctuation\">,</span> Integer<span class=\"token punctuation\">,</span> nullable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Column<span class=\"token punctuation\">(</span><span class=\"token string\">'price_usd'</span><span class=\"token punctuation\">,</span> Numeric<span class=\"token punctuation\">,</span> nullable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Column<span class=\"token punctuation\">(</span><span class=\"token string\">'24h_volume_usd'</span><span class=\"token punctuation\">,</span> Numeric<span class=\"token punctuation\">,</span> nullable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Column<span class=\"token punctuation\">(</span><span class=\"token string\">'total_supply'</span><span class=\"token punctuation\">,</span> Numeric<span class=\"token punctuation\">,</span> nullable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Column<span class=\"token punctuation\">(</span><span class=\"token string\">'percent_change_1h'</span><span class=\"token punctuation\">,</span> Numeric<span class=\"token punctuation\">,</span> nullable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    Column<span class=\"token punctuation\">(</span><span class=\"token string\">'last_updated'</span><span class=\"token punctuation\">,</span> DateTime<span class=\"token punctuation\">,</span> nullable<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">init_tables</span><span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sample_table<span class=\"token punctuation\">.</span>drop<span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">,</span> checkfirst<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    metadata<span class=\"token punctuation\">.</span>create_all<span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># get sample data</span>\n    data <span class=\"token operator\">=</span> get_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    sample_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>cleanup<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">]</span>\n\n    engine <span class=\"token operator\">=</span> create_engine<span class=\"token punctuation\">(</span>DB_CONN<span class=\"token punctuation\">)</span>\n    init_tables<span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">)</span>\n    conn <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    conn<span class=\"token punctuation\">.</span>execute<span class=\"token punctuation\">(</span>sample_table<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span>sample_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    pprint<span class=\"token punctuation\">.</span>pprint<span class=\"token punctuation\">(</span>sample_data<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Let’s review the code.</p>\n<p>We start by importing the required libraries, and specifically we are using the <a href=\"https://www.sqlalchemy.org/\">SqlAlchemy</a> library to work with postgres.</p>\n<p>The <code class=\"language-text\">get_data()</code> method accesses the API to fetch the data for bitcoin. The <code class=\"language-text\">cleanup()</code> method is a helper method to filter out only the fields from the API that we need.</p>\n<p>In the following code segment, we define the schema for the <code class=\"language-text\">sample_coinmarketcap</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nmetadata <span class=\"token operator\">=</span> MetaData<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nsample_table <span class=\"token operator\">=</span> Table<span class=\"token punctuation\">(</span><span class=\"token string\">'sample_coinmarketcap'</span><span class=\"token punctuation\">,</span> metadata<span class=\"token punctuation\">,</span>\n    Column<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nullable<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>In the <code class=\"language-text\">init_tables()</code> method, we first drop the table if it exists, and then create the table, if it does not exist. We are dropping the table each time because we want to store the latest set of data every time we process. If instead you want to append data to the table, do not drop the table.</p>\n<p>Finally, the <code class=\"language-text\">main()</code> method brings it all together by fetching data and inserting the data into the database.</p>\n<p>You can review the full source code at the <a href=\"https://github.com/rupakg/serverless-etl\">serverless-etl</a> Github repo.</p>\n<h2>Test the job service</h2>\n<p>Before we deploy the service, let’s test the service to see if our code is functioning properly. Since we’re mainly concerned with testing whether or not our API call gets us the required data correctly, we’ll comment out the database-related code for now.</p>\n<p>Comment out the code in the <code class=\"language-text\">main()</code> method as shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># handler.py</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token comment\"># get sample data</span>\n    data <span class=\"token operator\">=</span> get_data<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    sample_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>cleanup<span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># engine = create_engine(DB_CONN)</span>\n    <span class=\"token comment\"># init_tables(engine)</span>\n    <span class=\"token comment\"># conn = engine.connect()</span>\n    <span class=\"token comment\">#</span>\n    <span class=\"token comment\"># conn.execute(sample_table.insert().values(sample_data))</span>\n\n    pprint<span class=\"token punctuation\">.</span>pprint<span class=\"token punctuation\">(</span>sample_data<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>To test locally, simply do:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls invoke <span class=\"token builtin class-name\">local</span> -f etlSample</code></pre></div>\n<p>The output is shown below:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n    '<span class=\"token number\">24</span>h_volume_usd'<span class=\"token operator\">:</span> <span class=\"token number\">8529300000.0</span><span class=\"token punctuation\">,</span>\n    'last_updated'<span class=\"token operator\">:</span> datetime.datetime(<span class=\"token number\">1970</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">567000</span>)<span class=\"token punctuation\">,</span>\n    'name'<span class=\"token operator\">:</span> 'Bitcoin'<span class=\"token punctuation\">,</span>\n    'percent_change_<span class=\"token number\">1</span>h'<span class=\"token operator\">:</span> <span class=\"token number\">2.01</span><span class=\"token punctuation\">,</span>\n    'price_usd'<span class=\"token operator\">:</span> <span class=\"token number\">11077.9</span><span class=\"token punctuation\">,</span>\n    'rank'<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    'symbol'<span class=\"token operator\">:</span> 'BTC'<span class=\"token punctuation\">,</span>\n    'total_supply'<span class=\"token operator\">:</span> <span class=\"token number\">16870925.0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    '<span class=\"token number\">24</span>h_volume_usd'<span class=\"token operator\">:</span> <span class=\"token number\">2510770000.0</span><span class=\"token punctuation\">,</span>\n    'last_updated'<span class=\"token operator\">:</span> datetime.datetime(<span class=\"token number\">1970</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">551000</span>)<span class=\"token punctuation\">,</span>\n    'name'<span class=\"token operator\">:</span> 'Ethereum'<span class=\"token punctuation\">,</span>\n    'percent_change_<span class=\"token number\">1</span>h'<span class=\"token operator\">:</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span>\n    'price_usd'<span class=\"token operator\">:</span> <span class=\"token number\">975.651</span><span class=\"token punctuation\">,</span>\n    'rank'<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    'symbol'<span class=\"token operator\">:</span> 'ETH'<span class=\"token punctuation\">,</span>\n    'total_supply'<span class=\"token operator\">:</span> <span class=\"token number\">97679773.0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    '<span class=\"token number\">24</span>h_volume_usd'<span class=\"token operator\">:</span> <span class=\"token number\">1172320000.0</span><span class=\"token punctuation\">,</span>\n    'last_updated'<span class=\"token operator\">:</span> datetime.datetime(<span class=\"token number\">1970</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">541000</span>)<span class=\"token punctuation\">,</span>\n    'name'<span class=\"token operator\">:</span> 'Ripple'<span class=\"token punctuation\">,</span>\n    'percent_change_<span class=\"token number\">1</span>h'<span class=\"token operator\">:</span> <span class=\"token number\">0.96</span><span class=\"token punctuation\">,</span>\n    'price_usd'<span class=\"token operator\">:</span> <span class=\"token number\">1.21</span><span class=\"token punctuation\">,</span>\n    'rank'<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    'symbol'<span class=\"token operator\">:</span> 'XRP'<span class=\"token punctuation\">,</span>\n    'total_supply'<span class=\"token operator\">:</span> <span class=\"token number\">99992725510.0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    '<span class=\"token number\">24</span>h_volume_usd'<span class=\"token operator\">:</span> <span class=\"token number\">663760000.0</span><span class=\"token punctuation\">,</span>\n    'last_updated'<span class=\"token operator\">:</span> datetime.datetime(<span class=\"token number\">1970</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">553000</span>)<span class=\"token punctuation\">,</span>\n    'name'<span class=\"token operator\">:</span> 'Bitcoin Cash'<span class=\"token punctuation\">,</span>\n    'percent_change_<span class=\"token number\">1</span>h'<span class=\"token operator\">:</span> <span class=\"token number\">0.78</span><span class=\"token punctuation\">,</span>\n    'price_usd'<span class=\"token operator\">:</span> <span class=\"token number\">1547.14</span><span class=\"token punctuation\">,</span>\n    'rank'<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n    'symbol'<span class=\"token operator\">:</span> 'BCH'<span class=\"token punctuation\">,</span>\n    'total_supply'<span class=\"token operator\">:</span> <span class=\"token number\">16973175.0</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    '<span class=\"token number\">24</span>h_volume_usd'<span class=\"token operator\">:</span> <span class=\"token number\">865458000.0</span><span class=\"token punctuation\">,</span>\n    'last_updated'<span class=\"token operator\">:</span> datetime.datetime(<span class=\"token number\">1970</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">542000</span>)<span class=\"token punctuation\">,</span>\n    'name'<span class=\"token operator\">:</span> 'Litecoin'<span class=\"token punctuation\">,</span>\n    'percent_change_<span class=\"token number\">1</span>h'<span class=\"token operator\">:</span> <span class=\"token number\">0.19</span><span class=\"token punctuation\">,</span>\n    'price_usd'<span class=\"token operator\">:</span> <span class=\"token number\">230.273</span><span class=\"token punctuation\">,</span>\n    'rank'<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n    'symbol'<span class=\"token operator\">:</span> 'LTC'<span class=\"token punctuation\">,</span>\n    'total_supply'<span class=\"token operator\">:</span> <span class=\"token number\">55263408.0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Now that all the data we want looks good, we can deploy our service.</p>\n<h3>Deploy and schedule the job</h3>\n<p>Before we deploy, <strong>remember to uncomment the database code that we commented above</strong>.</p>\n<p>Once that’s done, deploy the ETL job service:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls deploy\n\nServerless: WARNING: You provided a docker related option but dockerizePip is <span class=\"token builtin class-name\">set</span> to false.\nServerless: Installing required Python packages with python3.6<span class=\"token punctuation\">..</span>.\nServerless: Linking required Python packages<span class=\"token punctuation\">..</span>.\nServerless: Packaging service<span class=\"token punctuation\">..</span>.\nServerless: Excluding development dependencies<span class=\"token punctuation\">..</span>.\nServerless: Unlinking required Python packages<span class=\"token punctuation\">..</span>.\nServerless: Uploading CloudFormation <span class=\"token function\">file</span> to S3<span class=\"token punctuation\">..</span>.\nServerless: Uploading artifacts<span class=\"token punctuation\">..</span>.\nServerless: Uploading <span class=\"token function\">service</span> .zip <span class=\"token function\">file</span> to S3 <span class=\"token punctuation\">(</span><span class=\"token number\">6.78</span> MB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span>.\nServerless: Validating template<span class=\"token punctuation\">..</span>.\nServerless: Updating Stack<span class=\"token punctuation\">..</span>.\nServerless: Checking Stack update progress<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.\nServerless: Stack update finished<span class=\"token punctuation\">..</span>.\nService Information\nservice: sample-etl\nstage: prod\nregion: us-west-2\nstack: sample-etl-prod\napi keys:\n  None\nendpoints:\n  None\nfunctions:\n  etlSample: sample-etl-prod-etlSample</code></pre></div>\n<p>This will set up our ETL job service in AWS to run as per the specified schedule. In our case, the job will run every hour.</p>\n<h2>Visualizing the data</h2>\n<p>I thought it would be useful to show the fact that you can visualize that data easily via services like <a href=\"https://chartio.com/\">Chart.io</a> or Metabase.io. Without going into too much detail about these services, you can see the visualization below:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/36358496-7043c5f0-14dd-11e8-9236-69d9e9f13d33.png\" alt=\"Chart.io graph\"></p>\n<h2>Summary</h2>\n<p>We saw how easy it is to create an ETL job service in Serverless, fetch data via an API, and store it in a database like Redshift. The service can be deployed on AWS and executed based on a schedule.</p>\n<p>The cost savings of running this kind of service with serverless is huge. Redshift instances are pretty expensive; with serverless you’ll only pay when the job executes. No need for dedicated infrastructure.</p>\n<p>If you have other use cases you’ve implemented or have any questions, please leave a comment below. I’d be happy to discuss it with you.</p>","frontmatter":{"title":"ETL job processing with Serverless, Lambda, and AWS Redshift","date":"February 20, 2018","description":"Build an ETL job service by fetching data from a public API endpoint and dumping it into an AWS Redshift database."}}},"pageContext":{"slug":"/posts/2018-02-20-etl-job-processing-with-serverless-lambda-and-redshift/","previous":{"fields":{"slug":"/posts/2018-02-14-running-scalable-reliable-graphql-endpoint-with-serverless/"},"frontmatter":{"title":"Running a scalable & reliable GraphQL endpoint with Serverless"}},"next":{"fields":{"slug":"/posts/2018-02-23-serverless-path-building-better-software/"},"frontmatter":{"title":"The serverless path to building better software"}}}}}
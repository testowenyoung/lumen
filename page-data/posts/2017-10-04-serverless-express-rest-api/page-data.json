{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-10-04-serverless-express-rest-api/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"14384248-c4bb-56a9-aaf1-412373a7e07b","excerpt":"We’re seeing more and more people using Serverless to deploy web applications. The benefits are huge—lightning-fast deployments, automatic scaling, and pay-per…","html":"<p>We’re seeing more and more people using Serverless to deploy web applications. The benefits are huge—lightning-fast deployments, automatic scaling, and pay-per-execution pricing.</p>\n<p>But moving to serverless has a learning curve as well. You need to learn the intricacies of the platform you’re using, including low-level details like format of the request input and the required shape of the response output. This can get in the way and slow your development process.</p>\n<p>Today, I come with good news: your existing web framework tooling will work seamlessly with Serverless. In this post, I’ll show you how to use the popular Node web framework <a href=\"https://expressjs.com/\">Express.js</a> to deploy a Serverless REST API. This means you can use your existing code + the vast Express.js ecosystem while still getting all the benefits of Serverless 💥!</p>\n<p>Below is a step-by-step walkthrough of creating a new Serverless service using Express.js. We will:</p>\n<ul>\n<li>Deploy a simple API endpoint</li>\n<li>Add a DynamoDB table and two endpoints to create and retrieve a User object</li>\n<li>Set up path-specific routing for more granular metrics and monitoring</li>\n<li>Configure your environment for local development for a faster development experience.</li>\n</ul>\n<p>If you already have an Express application that you want to convert to Serverless, skip to the <a href=\"#converting-an-existing-express-application\">Converting an existing Express application</a> section below.</p>\n<h4>Getting Started</h4>\n<p>To get started, you’ll need the <a href=\"https://serverless.com/framework/docs/providers/aws/guide/quick-start/\">Serverless Framework</a> installed. You’ll also need your environment configured with <a href=\"https://serverless.com/framework/docs/providers/aws/guide/credentials/\">AWS credentials</a>.</p>\n<h4>Creating and deploying a single endpoint</h4>\n<p>Let’s start with something easy—deploying a single endpoint. First, create a new directory with a <code class=\"language-text\">package.json</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> my-express-application <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> my-express-application\n$ <span class=\"token function\">npm</span> init -f</code></pre></div>\n<p>Then, let’s install a few dependencies. We’ll install the <code class=\"language-text\">express</code> framework, as well as the <a href=\"https://github.com/dougmoscrop/serverless-http\"><code class=\"language-text\">serverless-http</code></a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save express serverless-http</code></pre></div>\n<p>The <code class=\"language-text\">serverless-http</code> package is a handy piece of middleware that handles the interface between your Node.js application and the specifics of API Gateway. Huge thanks to <a href=\"https://github.com/dougmoscrop\">Doug Moscrop</a> for developing it.</p>\n<p>With our libraries installed, let’s create an <code class=\"language-text\">index.js</code> file that has our application code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token keyword\">const</span> serverless <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'serverless-http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> <span class=\"token function\">serverless</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is a very simple application that returns <code class=\"language-text\">&quot;Hello World!&quot;</code> when a request comes in on the root path <code class=\"language-text\">/</code>.</p>\n<p>It’s straight out of the <a href=\"https://expressjs.com/en/starter/hello-world.html\">Express documentation</a> with two small additions. First, we imported the <code class=\"language-text\">serverless-http</code> package at the top. Second, we exported a <code class=\"language-text\">handler</code> function which is our application wrapped in the <code class=\"language-text\">serverless</code> package.</p>\n<p>To get this application deployed, let’s create a <code class=\"language-text\">serverless.yml</code> in our working directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>express<span class=\"token punctuation\">-</span>application\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> index.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> ANY /\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ANY {proxy+}'</span></code></pre></div>\n<p>This is a pretty basic configuration. We’ve created one function, <code class=\"language-text\">app</code>, which uses the exported handler from our <code class=\"language-text\">index.js</code> file. Finally, it’s configured with some HTTP triggers.</p>\n<p>We’ve used a very broad path matching so that all requests on this domain are routed to this function. All of the HTTP routing logic will be done inside the Express application.</p>\n<p>Now, deploy your function:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls deploy\n<span class=\"token punctuation\">..</span>. snip <span class=\"token punctuation\">..</span>.\nService Information\nservice: my-express-application\nstage: dev\nregion: us-east-1\nstack: my-express-application-dev\napi keys:\n  None\nendpoints:\n  ANY - https://bl4r0gjjv5.execute-api.us-east-1.amazonaws.com/dev\n  ANY - https://bl4r0gjjv5.execute-api.us-east-1.amazonaws.com/dev/<span class=\"token punctuation\">{</span>proxy+<span class=\"token punctuation\">}</span>\nfunctions:\n  app: my-express-application-dev-app</code></pre></div>\n<p>After a minute, the console will show your <code class=\"language-text\">endpoints</code> in the <code class=\"language-text\">Service Information</code> section. Navigate to that route in your browser:</p>\n<img width=\"608\" alt=\"Express Hello World\" src=\"https://user-images.githubusercontent.com/6509926/31132443-6fe23b14-a822-11e7-9abf-ebd05ac72991.png\">\n<p>Your application is live!</p>\n<h4>Adding a DynamoDB table with REST-like endpoints</h4>\n<p>It’s fun to get a simple endpoint live, but it’s not very valuable. Often, your application will need to persist some sort of state to be useful. Let’s add a <a href=\"https://aws.amazon.com/dynamodb/\">DynamoDB table</a> as our backing store.</p>\n<p>For this simple example, let’s say we’re storing Users in a database. We want to store them by <code class=\"language-text\">userId</code>, which is a unique identifier for a particular user.</p>\n<p>First, we’ll need to configure our <code class=\"language-text\">serverless.yml</code> to provision the table. This involves three parts:</p>\n<ol>\n<li>Provisioning the table in the <a href=\"https://serverless.com/framework/docs/providers/aws/guide/resources/\"><code class=\"language-text\">resources</code></a> section;</li>\n<li>Adding the proper <a href=\"https://serverless.com/framework/docs/providers/aws/guide/iam/\">IAM permissions</a>; and</li>\n<li>Passing the table name as an <a href=\"https://serverless.com/framework/docs/providers/aws/guide/functions/#environment-variables\">environment variable</a> so our functions can use it.</li>\n</ol>\n<p>Change your <code class=\"language-text\">serverless.yml</code> to look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>express<span class=\"token punctuation\">-</span>application\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">tableName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'users-table-${self:provider.stage}'</span>\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n  <span class=\"token key atrule\">iamRoleStatements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">Effect</span><span class=\"token punctuation\">:</span> Allow\n      <span class=\"token key atrule\">Action</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>Query\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>Scan\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>GetItem\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>PutItem\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>UpdateItem\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>DeleteItem\n      <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">\"Fn::GetAtt\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"UsersDynamoDBTable\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Arn\"</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">USERS_TABLE</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.tableName<span class=\"token punctuation\">}</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> index.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> ANY /\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ANY {proxy+}'</span>\n\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">UsersDynamoDBTable</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::DynamoDB::Table'</span>\n      <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">AttributeDefinitions</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span>\n            <span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> userId\n            <span class=\"token key atrule\">AttributeType</span><span class=\"token punctuation\">:</span> S\n        <span class=\"token key atrule\">KeySchema</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span>\n            <span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> userId\n            <span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> HASH\n        <span class=\"token key atrule\">ProvisionedThroughput</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">ReadCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n          <span class=\"token key atrule\">WriteCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token key atrule\">TableName</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.tableName<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We provisioned the table in the <code class=\"language-text\">resources</code> section using CloudFormation syntax. We also added IAM permissions for our functions under the <code class=\"language-text\">iamRoleStatements</code> portion of the <code class=\"language-text\">provider</code> block. Finally, we passed the table name as the environment variable <code class=\"language-text\">USERS_TABLE</code> in the <code class=\"language-text\">environment</code> portion of the <code class=\"language-text\">provider</code> block.</p>\n<p>Now, let’s update our application to use the table. We’ll implement two endpoints: <code class=\"language-text\">POST /user</code> to create a new user, and <code class=\"language-text\">GET /user/{userId}</code> to get information on a particular user.</p>\n<p>First, install the <code class=\"language-text\">aws-sdk</code> and <code class=\"language-text\">body-parser</code>, which is used for parsing the body of HTTP requests:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save aws-sdk body-parser</code></pre></div>\n<p>Then update your <code class=\"language-text\">index.js</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token keyword\">const</span> serverless <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'serverless-http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">USERS_TABLE</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">USERS_TABLE</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> dynamoDb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>DynamoDB<span class=\"token punctuation\">.</span>DocumentClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> strict<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Get User endpoint</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users/:userId'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    TableName<span class=\"token operator\">:</span> <span class=\"token constant\">USERS_TABLE</span><span class=\"token punctuation\">,</span>\n    Key<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      userId<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>userId<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  dynamoDb<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> result</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'Could not get user'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>userId<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>Item<span class=\"token punctuation\">;</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> userId<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">\"User not found\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Create User endpoint</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/users'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> userId<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> userId <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'\"userId\" must be a string'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> name <span class=\"token operator\">!==</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'\"name\" must be a string'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    TableName<span class=\"token operator\">:</span> <span class=\"token constant\">USERS_TABLE</span><span class=\"token punctuation\">,</span>\n    Item<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      userId<span class=\"token operator\">:</span> userId<span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> name<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  dynamoDb<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">'Could not create user'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> userId<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> <span class=\"token function\">serverless</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In addition to base “Hello World” endpoint, we now have two new endpoints:</p>\n<ul>\n<li><code class=\"language-text\">GET /users/:userId</code> for getting a User</li>\n<li><code class=\"language-text\">POST /users</code> for creating a new User</li>\n</ul>\n<p>Let’s deploy the service and test it out!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls deploy</code></pre></div>\n<p>We’ll use <code class=\"language-text\">curl</code> for these examples. Set the <code class=\"language-text\">BASE_DOMAIN</code> variable to your unique domain and base path so it’s easier to reuse:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">BASE_DOMAIN</span><span class=\"token operator\">=</span>https://bl4r0gjjv5.execute-api.us-east-1.amazonaws.com/dev</code></pre></div>\n<p>Then, let’s create a user:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -H <span class=\"token string\">\"Content-Type: application/json\"</span> -X POST <span class=\"token variable\">${BASE_DOMAIN}</span>/users -d <span class=\"token string\">'{\"userId\": \"alexdebrie1\", \"name\": \"Alex DeBrie\"}'</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"userId\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"alexdebrie1\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Alex DeBrie\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nice! We’ve created a new user! Now, let’s retrieve the user with the GET /users/:userId` endpoint:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -H <span class=\"token string\">\"Content-Type: application/json\"</span> -X GET <span class=\"token variable\">${BASE_DOMAIN}</span>/users/alexdebrie1\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"userId\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"alexdebrie1\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Alex DeBrie\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Perfect!</p>\n<p>This isn’t a full-fledged REST API, and you’ll want to add things like error handling, authentication, and additional business logic. This does give a framework in which you can work to set up those things.</p>\n<h4>Path-specific routing</h4>\n<p>Let’s take another look at our function configuration in <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">functions:\n  app:\n    handler: index.handler\n    events:\n      - http: ANY /\n      - http: &#39;ANY {proxy+}&#39;</code></pre></div>\n<p>We’re forwarding all traffic on the domain to our application and letting Express handle the entirety of the routing logic. There is a benefit to this—I don’t have to manually string up all my routes and functions. I can also limit the impact of cold-starts on lightly-used routes.</p>\n<p>However, we also lose some of the benefits of the serverless architecture. I can isolate my bits of logic into separate functions and get a decent look at my application from standard metrics. If each route is handled by a different Lambda function, then I can see:</p>\n<ul>\n<li>How many times each route is invoked</li>\n<li>How many errors I have for each route</li>\n<li>How long each route takes (and how much money I could save if I made that route faster)</li>\n</ul>\n<p>Luckily, you can still get these things if you want them! You can configure your <code class=\"language-text\">serverless.yml</code> so that different routes are routed to different instances of your function.</p>\n<p>Each function instance will have the same code, but they’ll be segmented for metrics purposes:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> index.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> ANY /\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ANY {proxy+}'</span>\n  <span class=\"token key atrule\">getUser</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> index.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'GET /users/{proxy+}'</span>\n  <span class=\"token key atrule\">createUser</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> index.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'POST /users'</span></code></pre></div>\n<p>Now, all requests to <code class=\"language-text\">GET /users/:userId</code> will be handled by the <code class=\"language-text\">getUser</code> instance of your application, and all requests to <code class=\"language-text\">POST /users/</code> will be handled by the <code class=\"language-text\">createUser</code> instance. For any other requests, they’ll be handled by the main <code class=\"language-text\">app</code> instance of your function.</p>\n<p>Again, none of this is required, and it’s a bit of an overweight solution since each specific endpoint will include the full application code for your other endpoints. However, it’s a good balance between speed of development by using the tools you’re used to along with the per-endpoint granularity that serverless application patterns provide.</p>\n<h4>Local development configuration with Serverless offline plugin</h4>\n<p>When developing an application, it’s nice to rapidly iterate by developing and testing locally rather than doing a full deploy between changes. In this section, I’ll show you how to configure your environment for local development.</p>\n<p>First, let’s use the <a href=\"https://github.com/dherault/serverless-offline\"><code class=\"language-text\">serverless-offline</code></a> plugin. This plugin helps to emulate the API Gateway environment for local development.</p>\n<p>Install the <code class=\"language-text\">serverless-offline</code> plugin:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev serverless-offline</code></pre></div>\n<p>Then add the plugin to your <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>offline</code></pre></div>\n<p>Then, start the serverless-offline server:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls offline start\nServerless: Starting Offline: dev/us-east-1.\n\nServerless: Routes <span class=\"token keyword\">for</span> app:\nServerless: ANY /\nServerless: ANY /<span class=\"token punctuation\">{</span>proxy*<span class=\"token punctuation\">}</span>\n\nServerless: Routes <span class=\"token keyword\">for</span> getUser:\nServerless: GET /users/<span class=\"token punctuation\">{</span>proxy*<span class=\"token punctuation\">}</span>\n\nServerless: Routes <span class=\"token keyword\">for</span> createUser:\nServerless: POST /users\n\nServerless: Offline listening on http://localhost:3000</code></pre></div>\n<p>Then navigate to your root page on <code class=\"language-text\">localhost:3000</code> in your browser:</p>\n<img width=\"541\" alt=\"Serverless Offline\" src=\"https://user-images.githubusercontent.com/6509926/31183451-3d7c6a08-a8ec-11e7-9282-0e474b68caf6.png\">\n<p>It works! If you make a change in your <code class=\"language-text\">index.js</code> file, it will be updated the next time you hit your endpoint. This rapidly improves development time.</p>\n<p>While this works easily for a stateless endpoint like “Hello World!”, it’s a little trickier for our <code class=\"language-text\">/users</code> endpoints that interact with a database.</p>\n<p>Luckily, there’s a plugin for doing local development with a local DynamoDB emulator! We’ll use the <a href=\"https://github.com/99xt/serverless-dynamodb-local\"><code class=\"language-text\">serverless-dynamodb-local</code></a> plugin for this.</p>\n<p>First, let’s install the plugin:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev serverless-dynamodb-local</code></pre></div>\n<p>Then, let’s add the plugin to our <code class=\"language-text\">serverless.yml</code>. Note that it must come before the <code class=\"language-text\">serverless-offline</code> plugin. We’ll also add some config in the <code class=\"language-text\">custom</code> block so that it locally creates our tables defined in the <code class=\"language-text\">resources</code> block:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>dynamodb<span class=\"token punctuation\">-</span>local\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>offline <span class=\"token comment\">#serverless-offline needs to be last in the list</span>\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">tableName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'users-table-${self:provider.stage}'</span>\n  <span class=\"token key atrule\">dynamodb</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">start</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">migrate</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>Then, run a command to install DynamoDB local:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls dynamodb <span class=\"token function\">install</span></code></pre></div>\n<p>Finally, we need to make some small changes to our application code. When instantiating our DynamoDB client, we’ll add in some special configuration if we’re in a local, offline environment. The <code class=\"language-text\">serverless-offline</code> plugin sets an environment variable of <code class=\"language-text\">IS_OFFLINE</code> to <code class=\"language-text\">true</code>, so we’ll use that to handle our config. Change the beginning of <code class=\"language-text\">index.js</code> to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token keyword\">const</span> serverless <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'serverless-http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">USERS_TABLE</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">USERS_TABLE</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">IS_OFFLINE</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">IS_OFFLINE</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> dynamoDb<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">IS_OFFLINE</span> <span class=\"token operator\">===</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  dynamoDb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>DynamoDB<span class=\"token punctuation\">.</span>DocumentClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    region<span class=\"token operator\">:</span> <span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n    endpoint<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:8000'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dynamoDb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  dynamoDb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>DynamoDB<span class=\"token punctuation\">.</span>DocumentClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> strict<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span> rest <span class=\"token keyword\">of</span> application code <span class=\"token operator\">...</span></code></pre></div>\n<p>Now, our DocumentClient constructor is configured to use DynamoDB local if we’re running locally or uses the default options if running in Lambda.</p>\n<p>Let’s see it if works. Start up your offline server again:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls offline start\nDynamodb Local Started, Visit: http://localhost:8000/shell\nServerless: DynamoDB - created table users-table-dev\nServerless: Starting Offline: dev/us-east-1.\n\nServerless: Routes <span class=\"token keyword\">for</span> app:\nServerless: ANY /\nServerless: ANY /<span class=\"token punctuation\">{</span>proxy*<span class=\"token punctuation\">}</span>\n\nServerless: Routes <span class=\"token keyword\">for</span> getUser:\nServerless: GET /users/<span class=\"token punctuation\">{</span>proxy*<span class=\"token punctuation\">}</span>\n\nServerless: Routes <span class=\"token keyword\">for</span> createUser:\nServerless: POST /users\n\nServerless: Offline listening on http://localhost:3000</code></pre></div>\n<p>Let’s run our <code class=\"language-text\">curl</code> command from earlier to hit our local endpoint and create a user:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -H <span class=\"token string\">\"Content-Type: application/json\"</span> -X POST http://localhost:3000/users -d <span class=\"token string\">'{\"userId\": \"alexdebrie1\", \"name\": \"Alex DeBrie\"}'</span>\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"userId\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"alexdebrie1\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Alex DeBrie\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>And then retrieve the user:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -H <span class=\"token string\">\"Content-Type: application/json\"</span> -X GET http://localhost:3000/users/alexdebrie1\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"userId\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"alexdebrie1\"</span>,<span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Alex DeBrie\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>It works just like it did on Lambda!</p>\n<p>This local setup can really speed up your workflow while still allowing you to emulate a close approximation of the Lambda environment.</p>\n<h4>Converting an existing Express application</h4>\n<p>If you already have an existing Express application, it’s very easy to convert to a Serverless-friendly application. Do the following steps:</p>\n<ol>\n<li>Install the <code class=\"language-text\">serverless-http</code> package — <code class=\"language-text\">npm install --save serverless-http</code></li>\n<li>\n<p>Add the <code class=\"language-text\">serverless-http</code> configuration to your Express application.</p>\n<p>You’ll need to import the serverless-http library at the top of your file:</p>\n<p><code class=\"language-text\">const serverless = require(&#39;serverless-http&#39;);</code></p>\n<p>then export your wrapped application:</p>\n<p><code class=\"language-text\">module.exports.handler = serverless(app);.</code></p>\n<p>For reference, an example application might look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># app.js\n\nconst serverless = require(&#39;serverless-http&#39;); &lt;-- Add this.\nconst express = require(&#39;express&#39;)\nconst app = express()\n\n\n... All your Express code ...\n\n\nmodule.exports.handler = serverless(app); &lt;-- Add this.</code></pre></div>\n</li>\n<li>\n<p>Set up your <code class=\"language-text\">serverless.yml</code> with a single function that captures all traffic:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> express<span class=\"token punctuation\">-</span>app\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> app.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> ANY /\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ANY {proxy+}'</span></code></pre></div>\n</li>\n</ol>\n<p>That’s it! Run <code class=\"language-text\">sls deploy</code> and your app will deploy!</p>\n<p>Note that if you use other resources (databases, credentials, etc.), you’ll need to make sure those make it into your application, likely via <a href=\"https://serverless.com/framework/docs/providers/aws/guide/functions/#environment-variables\">Environment Variables</a>.</p>\n<h4>Additional Resources</h4>\n<p>Here are a few other resources you might find useful while building Express applications with Serverless:</p>\n<ul>\n<li><a href=\"https://serverless.com/blog/serverless-api-gateway-domain/\">Adding a custom domain name to your API</a></li>\n<li><a href=\"https://serverless.com/blog/quick-tips-for-faster-serverless-development/\">3 Steps to Faster Serverless Development</a></li>\n<li><a href=\"https://serverless.com/blog/serverless-ops-metrics/\">Monitoring with Metrics and Alarms</a></li>\n<li><a href=\"https://serverless.com/blog/serverless-ops-logs/\">Function introspection with logging</a></li>\n</ul>\n<h4>Architectural Diagram</h4>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/Thom&#x27;s+Posts/node.jpg\" alt=\"Architectural Diagram\"></p>","frontmatter":{"title":"Deploy a REST API using Serverless, Express and Node.js","date":"October 04, 2017","description":"Learn how to use the popular Express.js framework to deploy a REST API with Serverless, DynamoDB and API Gateway."}}},"pageContext":{"slug":"/posts/2017-10-04-serverless-express-rest-api/","previous":{"fields":{"slug":"/posts/2017-10-03-things-i-learned-designing-developer-tools/"},"frontmatter":{"title":"3 things I learned designing developer-centric tools at Serverless"}},"next":{"fields":{"slug":"/posts/2017-10-06-serverless-faas-vs-containers/"},"frontmatter":{"title":"Serverless (FaaS) vs. Containers - when to pick which?"}}}}}
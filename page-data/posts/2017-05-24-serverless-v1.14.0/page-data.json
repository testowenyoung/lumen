{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-05-24-serverless-v1.14.0/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"29a0add9-6266-509d-a5a3-3bcab0299c0f","excerpt":"We’re thrilled to announce the v1.14 release of the Serverless Framework! This release is yet another special one since we’re officially announcing our Google…","html":"<p>We’re thrilled to announce the v1.14 release of the Serverless Framework!</p>\n<p>This release is yet another special one since we’re officially announcing our Google Cloud Functions integration with the Serverless Framework.</p>\n<p>But this isn’t the only thing we’ve been working on. Let’s take a look at the full feature set v1.14 introduces.</p>\n<h2>Highlights of 1.14.0</h2>\n<p><strong>Note:</strong> You can find a complete list of all the updates in the <a href=\"https://github.com/serverless/serverless/blob/master/CHANGELOG.md\">changelog</a>.</p>\n<h3>Google Cloud Functions support</h3>\n<img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/serverless-google-cloudfunctions.png\">\n<p>We’re proud to announce official support for deployment the the Google Cloud Platform with the help of our <a href=\"https://github.com/serverless/serverless-google-cloudfunctions\">Google Cloud Functions Provider plugin</a>.</p>\n<p>Adding the <code class=\"language-text\">google</code> integration strengthens the multi-provider support of the framework and gives you a 4th provider to choose from when building your next serverless project.</p>\n<p>Curious how to get started? Let’s take a look!</p>\n<p>The easiest way to get started is to follow our <a href=\"https://serverless.com/framework/docs/providers/google/guide/quick-start/\">quickstart guide</a> in our docs.</p>\n<p>You might also want to check out our <a href=\"https://github.com/serverless/examples/tree/master/google-node-simple-http-endpoint\">Google HTTP endpoint example</a> in our <a href=\"https://github.com/serverless/examples\">Serverless Examples</a> repository.</p>\n<p><strong>Protip:</strong> Google offers a free $300 credit if you create a Google Cloud account via their <a href=\"https://console.cloud.google.com/freetrial\">Free Trial link</a>.</p>\n<h3>Rollback function support</h3>\n<p>The Serverless Framework has offered the <code class=\"language-text\">rollback</code> command, which rolls your stack back to a specific state, since version <code class=\"language-text\">1.1.0</code>. This command has proven very popular as a way of rolling back infrastructure changes.</p>\n<p>However shortly after we released this command it became apparent that it was not ideal for cases in which users only want to rollback code changes for a single function. Creating an entirely new stack is slow, inconvenient, and overkill for this simply rolling back a single function.</p>\n<p>With Serverless v1.14 we’re excited to add support for quickly and easily rolling back single functions to a specific version.</p>\n<p>Let’s take a look at an example to see how this works in practice.</p>\n<p>Let’s say we’ve accidentally ran a <code class=\"language-text\">serverless deploy</code> which updated our functions code and introduced a bug.</p>\n<p>First we could take a look at all the functions and their available versions for the service that we’re working on by running <code class=\"language-text\">deploy list functions</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">serverless deploy list functions</code></pre></div>\n<p>We can see that our latest versions is <code class=\"language-text\">15</code> so we want to rollback our function to version <code class=\"language-text\">14</code>.</p>\n<p>Next up we simply run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">serverless rollback <span class=\"token keyword\">function</span> -f hello -v <span class=\"token number\">14</span></code></pre></div>\n<p>This will roll back our function <code class=\"language-text\">hello</code> to version <code class=\"language-text\">14</code>.</p>\n<p><strong>Important:</strong> Rolling back a single function is an operation which should be used in an emergency situation as it might put the stack into a non atomic state. Serverless will directly push the function code into the function without going through a whole stack deployemnt through CloudFormation (which will be significantly slower).</p>\n<p>It’s recommended to issue a <code class=\"language-text\">serverless deploy</code> with the updated / fixed code some time after rolling back to put the service into a stable state again.</p>\n<p><strong>Note:</strong> Lambda versioning needs to be enabled to use this feature. Serverless automatically adds versioning support for your Lambda functions unless you’ve opted out. See <a href=\"https://serverless.com/framework/docs/providers/aws/guide/functions#versioning-deployed-functions\">our docs</a> for more information on Lambda versioning.</p>\n<h3>DeadLetterConfig support</h3>\n<p>With Serverless v1.14 you can use <code class=\"language-text\">DeadLetterConfig</code> support natively in Serverless.</p>\n<p>We’ve implemented the <code class=\"language-text\">onError</code> config parameter which you can specify at the function level. All you need to do is plug in your <code class=\"language-text\">SNS</code> topic <code class=\"language-text\">arn</code> and re-deploy your stack.</p>\n<p>Once done you can react to failed Lambda calls with your <code class=\"language-text\">SNS</code> topic.</p>\n<p>Here’s an example configuration to showcase the usage:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> service\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n     <span class=\"token key atrule\">onError</span><span class=\"token punctuation\">:</span> arn<span class=\"token punctuation\">:</span>aws<span class=\"token punctuation\">:</span>sns<span class=\"token punctuation\">:</span>us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span>1<span class=\"token punctuation\">:</span>XXXXX<span class=\"token punctuation\">:</span>test</code></pre></div>\n<p>You can read more about this feature in <a href=\"https://serverless.com/framework/docs/providers/aws/guide/functions/#deadletterconfig\">our docs</a>.</p>\n<p><strong>Note:</strong> Serverless currently only supports <code class=\"language-text\">sns</code> topic arns due to a race condition when using SQS queue arns and updating the permissions in the IAM role. We’re currently looking into this so that we can add support for SQS topic arns soon!</p>\n<h3>Login command</h3>\n<p>We’re excited to introduce the <code class=\"language-text\">serverless login</code> &#x26; <code class=\"language-text\">serverless logout</code> commands for the Serverless CLI.</p>\n<p>We are adding these commands in preparation of our upcoming platform release.</p>\n<p>Run <code class=\"language-text\">serverless login</code> to create your account.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">serverless login</code></pre></div>\n<p>If you already signed up for a beta account, you can connect the CLI with your beta account with the <code class=\"language-text\">sls login</code> command.</p>\n<p>The login functionality also will give us the power to personalize &#x26; improve the framework onboarding experience. Our mission is to help users learn and adopt the serverless ecosytem as fast as possible!</p>\n<p>We are investing heavily on improving the overall developer experience of the framework and would love to hear <a href=\"https://github.com/serverless/serverless/issues?utf8=%E2%9C%93&#x26;q=dx%20\">your thoughts on other UX/DX initiatives</a></p>\n<h3>Support for <code class=\"language-text\">s3</code> variables</h3>\n<p>Serverless v1.14 adds another Serverless Variable called <code class=\"language-text\">s3</code>. This enables  a way to reference values in a S3 bucket (e.g. stored credentials).</p>\n<p>Here’s how you can use this new Serverless Variable in your <code class=\"language-text\">serverless.yml</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> service\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">myKey</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>s3<span class=\"token punctuation\">:</span>my<span class=\"token punctuation\">-</span>bucket/my<span class=\"token punctuation\">-</span>key<span class=\"token punctuation\">}</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello</code></pre></div>\n<p>You can read more about this feature in our <a href=\"https://serverless.com/framework/docs/providers/aws/guide/variables#referencing-s3-options\">docs about Serverless Variables</a>.</p>\n<h3>More API Gateway integration types and AWS_IAM auth support</h3>\n<p>The <code class=\"language-text\">http</code> event definition was updated and now supports the <code class=\"language-text\">HTTP</code>, <code class=\"language-text\">HTTP_PROXY</code> and <code class=\"language-text\">MOCK</code> integration types:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">create</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.create\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> test/create\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> GET\n          <span class=\"token key atrule\">integration</span><span class=\"token punctuation\">:</span> mock\n          <span class=\"token key atrule\">request</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">headers</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"'application/json'\"</span>\n            <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">application/json</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'{ \"statusCode\": 200 }'</span>\n          <span class=\"token key atrule\">response</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">headers</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"'text/html'\"</span>\n            <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello World\"</span>\n            <span class=\"token key atrule\">statusCodes</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">200</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># headers and templates defaults to the values defined above</span>\n                <span class=\"token key atrule\">pattern</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span></code></pre></div>\n<p>Furthermore you can use the <code class=\"language-text\">aws_iam</code> authorization type:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">create</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.create\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> create\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> POST\n          <span class=\"token key atrule\">authorizer</span><span class=\"token punctuation\">:</span> aws_iam</code></pre></div>\n<p>More information about all the new config parameters can be found in our <a href=\"https://serverless.com/framework/docs/providers/aws/events/apigateway/\">API Gateway docs</a>.</p>\n<h3>Access to <code class=\"language-text\">IS_LOCAL</code> environment variable during local invocation</h3>\n<p>Ever faced the situation where you’ve invoked your Lambda function locally with the <code class=\"language-text\">invoke local</code> command and accidentally triggered a request against a service which should only be used in production?</p>\n<p>Serverless v1.14 has you covered and adds a <code class=\"language-text\">IS_LOCAL</code> environment variable which is available during local invocation.</p>\n<p>Here’s an example how you can use this feature:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">IS_LOCAL</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'true'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// send some analytics data to the tracking system used in production</span>\n    <span class=\"token function\">sendAnalytics</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      some<span class=\"token operator\">:</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// ... normal processing</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Enhancements &#x26; Bug Fixes</h3>\n<p>This release also includes a bunch of bug fixes and several enhancements.</p>\n<blockquote>\n<p>Thanks for reporting bugs and opening issues!</p>\n</blockquote>\n<h3>Contributors</h3>\n<p>This release contains lots of hard work from our awesome community, and wouldn’t have been possible without passionate people who decided to spend their time contributing to make Serverless better.</p>\n<p>Thank You to all of the contributors who submitted changes for this release:</p>\n<ul>\n<li>Alex Oskotsky</li>\n<li>Andre Rabold</li>\n<li>Doug Moscrop</li>\n<li>Frank Schmid</li>\n<li>Helen Yau</li>\n<li>Mark Chance</li>\n<li>Tom Saleeba</li>\n</ul>\n<h3>Get Involved</h3>\n<p>Serverless has a really helpful, vibrant and awesome community. Want to help us build the best Serverless tooling out there?</p>\n<p>Contributing isn’t just about code! Chime in on <a href=\"https://github.com/serverless/serverless/labels/stage%2Fneeds-feedback\">discussions</a>, help with <a href=\"https://github.com/serverless/serverless/labels/kind%2Fdocs\">documentation updates</a> or <a href=\"https://github.com/serverless/serverless/pulls\">review Pull Requests</a>.</p>\n<p>Just filter by <a href=\"https://github.com/serverless/serverless/labels\">our labels</a> such as <a href=\"https://github.com/serverless/serverless/issues?q=is%3Aopen+is%3Aissue+label%3Astatus%2Feasy-pick\">easy-pick</a>, <a href=\"https://github.com/serverless/serverless/issues?q=is%3Aopen+is%3Aissue+label%3Astatus%2Fhelp-wanted\">help-wanted</a> or <a href=\"https://github.com/serverless/serverless/labels/stage%2Fneeds-feedback\">needs-feedback</a> to find areas where you can help us!</p>\n<p>Furthermore, we’re always seeking feedback from our community to build the features in the best way possible. <a href=\"https://github.com/serverless/serverless/labels/stage%2Fneeds-feedback\">Here’s a list</a> with issues where we need your feedback and insights in your real world usage of Serverless.</p>\n<h3>Next Steps</h3>\n<p>We’ve already started filling in the next <a href=\"https://github.com/serverless/serverless/milestones\">milestones</a>. Check out the <a href=\"https://github.com/serverless/serverless/milestone/30\">1.15 milestone</a> to see what we have planned for the next release.</p>\n<p>We hope that you like the new release! Let us know if you have any questions or feedback in <a href=\"http://forum.serverless.com/\">our Forum</a> or <a href=\"https://github.com/serverless/serverless/issues\">GitHub Issues</a>.</p>\n<h2>Serverless Examples</h2>\n<p>The <a href=\"https://github.com/serverless/examples\">Serverless Examples Repository</a> is an excellent resource if you want to explore some real world examples and learn more about what Serverless architectures look like.</p>\n<h2>Serverless Plugins</h2>\n<p>Serverless provides a completely customizable and pluggable codebase. Our community has written a vast amount of awesome plugins you can install and therefore enhance the capabilities of the Framework.</p>\n<p>A list with all the different plugins can be found at our <a href=\"https://github.com/serverless/plugins\">Serverless Plugins Repository</a>.</p>\n<p>Don’t hestitate to open up a PR over there if you’ve authored or found a new Serverless plugin!</p>","frontmatter":{"title":"Serverless v1.14 - Deploy to Google Cloud Functions & rollback function support added","date":"May 24, 2017","description":"Google Cloud Functions, Rollback function, DeadLetterConfig, Login command and more in the Serverless Framework v1.14 release."}}},"pageContext":{"slug":"/posts/2017-05-24-serverless-v1.14.0/","previous":{"fields":{"slug":"/posts/2017-05-19-build-a-serverless-rest-api/"},"frontmatter":{"title":"How To Build A Serverless REST API with AWS Lambda & DynamoDB [Video Tutorial]"}},"next":{"fields":{"slug":"/posts/2017-06-05-devops-serverless-variables/"},"frontmatter":{"title":"DevOps Use Cases With Serverless Variables"}}}}}
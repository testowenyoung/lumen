{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-08-04-serverless-python-packaging/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"95aa22a6-41ec-5b2b-a9a4-3658983211dc","excerpt":"I use AWS Lambda for almost all of my projects these days-from Flask apps and Slack bots to cron jobs and monitoring tools. I love how cheap and easy it is to…","html":"<p>I use AWS Lambda for almost all of my projects these days-from Flask apps and Slack bots to cron jobs and monitoring tools. I love how cheap and easy it is to deploy something valuable.</p>\n<p>Python is my go-to language, but handling Python packages in Lambda can be tricky. Many important packages need to compile C extensions, like psycopg2 for Postgres access, or numpy, scipy, pandas, or sklearn for numerical analysis. If you compile these on a Mac or Windows system, you’ll get an error when your Lambda tries to load them.</p>\n<p>The import path also requires finesse. You can install your dependencies directly into your top-level directory, but that clutters up your workspace. If you install them into a subdirectory like <code class=\"language-text\">deps/</code> or <code class=\"language-text\">vendored/</code>, you have to mess with your <code class=\"language-text\">sys.path</code> at the beginning of your function.</p>\n<p>But there is a much better way. In this post, I’ll show you a how, by using the <a href=\"https://github.com/UnitedIncome/serverless-python-requirements\"><code class=\"language-text\">serverless-python-requirements</code></a> plugin for the Serverless Framework.</p>\n<h4>Initial Setup</h4>\n<p>Let’s get our environment ready. If you have Node and NPM installed, install the Serverless Framework globally with:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g serverless</code></pre></div>\n<p>You’ll also need to configure your environment with AWS credentials.</p>\n<p><strong>Note:</strong> if you need a refresher on how to install the Framework or get AWS credentials, check out the Prerequisites portion on the top of our <a href=\"https://serverless.com/framework/docs/providers/aws/guide/quick-start/\">Quick Start Guide</a>.</p>\n<h1>Creating your service locally</h1>\n<p>For this quick demo, we’ll deploy a Lambda function that uses the popular <a href=\"http://www.numpy.org/\">NumPy</a> package.</p>\n<p>We can create a service from a template. I’m going to use Python 3, but this works with Python 2 as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ serverless create <span class=\"token punctuation\">\\</span>\n  --template aws-python3 <span class=\"token punctuation\">\\</span>\n  --name numpy-test <span class=\"token punctuation\">\\</span>\n  --path numpy-test</code></pre></div>\n<p>This will create a Serverless Python 3 template project at the given path (<code class=\"language-text\">numpy-test/</code>) with a service name of <code class=\"language-text\">numpy-test</code>. You’ll need to change into that directory and create a virtual environment for developing locally.</p>\n<p>(<strong>Note:</strong> further reading <a href=\"https://python-guide-pt-br.readthedocs.io/pt_BR/latest/dev/virtualenvs.html\">here</a> about how and why to use virtual environments with Python.)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> numpy-test\n$ virtualenv venv --python<span class=\"token operator\">=</span>python3\nRunning virtualenv with interpreter /usr/local/bin/python3\nUsing base prefix <span class=\"token string\">'/usr/local/Cellar/python3/3.6.1/Frameworks/Python.framework/Versions/3.6'</span>\nNew python executable <span class=\"token keyword\">in</span> /Users/username/scratch/numpy-test/venv/bin/python3.6\nAlso creating executable <span class=\"token keyword\">in</span> /Users/username/scratch/numpy-test/venv/bin/python\nInstalling setuptools, pip, wheel<span class=\"token punctuation\">..</span>.done.\n$ <span class=\"token builtin class-name\">source</span> venv/bin/activate\n<span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> $</code></pre></div>\n<p>Let’s set up the function we want to deploy. Edit the contents of <code class=\"language-text\">handler.py</code> so that it contains the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># handler.py</span>\n\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your numpy array:\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is a super simple function using an example from the <a href=\"https://docs.scipy.org/doc/numpy-dev/user/quickstart.html#an-example\">NumPy Quick Start</a>. When working with Lambda, you’ll need to define a function that accepts two arguments: <code class=\"language-text\">event</code>, and <code class=\"language-text\">context</code>. You can read more at AWS about the <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/python-programming-model-handler-types.html\">Lambda Function Handler for Python</a>.</p>\n<p>Notice the last two lines of the file, which give us a way to quickly test the function locally. If we run <code class=\"language-text\">python handler.py</code>, it will run our <code class=\"language-text\">main()</code> function. Let’s give it a shot:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> $ python handler.py\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"handler.py\"</span>, line <span class=\"token number\">1</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    <span class=\"token function\">import</span> numpy as np\nImportError: No module named numpy</code></pre></div>\n<p>Ah, we haven’t installed <code class=\"language-text\">numpy</code> in our virtual environment yet. Let’s do that now, and save the package versions of our environment to a <code class=\"language-text\">requirements.txt</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> $ pip <span class=\"token function\">install</span> numpy\nCollecting numpy\n  Downloading numpy-1.13.1-cp36-cp36m-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.macosx_10_10_intel.macosx_10_10_x86_64.whl <span class=\"token punctuation\">(</span><span class=\"token number\">4</span>.5MB<span class=\"token punctuation\">)</span>\n    <span class=\"token number\">100</span>% <span class=\"token operator\">|</span>████████████████████████████████<span class=\"token operator\">|</span> <span class=\"token number\">4</span>.6MB 305kB/s\nInstalling collected packages: numpy\nSuccessfully installed numpy-1.13.1\n<span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> $ pip freeze <span class=\"token operator\">></span> requirements.txt\n<span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> $ <span class=\"token function\">cat</span> requirements.txt\n<span class=\"token assign-left variable\">numpy</span><span class=\"token operator\">==</span><span class=\"token number\">1.13</span>.1</code></pre></div>\n<p>If we run our command locally now, we’ll see the output we want:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> $ python handler.py\nYour numpy array:\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0</span>  <span class=\"token number\">1</span>  <span class=\"token number\">2</span>  <span class=\"token number\">3</span>  <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">[</span> <span class=\"token number\">5</span>  <span class=\"token number\">6</span>  <span class=\"token number\">7</span>  <span class=\"token number\">8</span>  <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">[</span><span class=\"token number\">10</span> <span class=\"token number\">11</span> <span class=\"token number\">12</span> <span class=\"token number\">13</span> <span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Perfect.</p>\n<h4>Deploying your service</h4>\n<p>Our function is working locally, and it’s ready for us to deploy to Lambda. Edit the <code class=\"language-text\">serverless.yml</code> file to look like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> numpy<span class=\"token punctuation\">-</span>test\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> python3.6\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">numpy</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.main</code></pre></div>\n<p>This is a basic service called <code class=\"language-text\">numpy-test</code>. It will deploy a single Python 3.6 function named <code class=\"language-text\">numpy</code> to AWS, and the entry point for the <code class=\"language-text\">numpy</code> function is the <code class=\"language-text\">main</code> function in the <code class=\"language-text\">handler.py</code> module.</p>\n<p>Our last step before deploying is to add the <code class=\"language-text\">serverless-python-requirements</code> plugin. Create a package.json file for saving your node dependencies. Accept the defaults, then install the plugin:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> $ <span class=\"token function\">npm</span> init\nThis utility will walk you through creating a package.json file.\n\n<span class=\"token punctuation\">..</span>.Truncated<span class=\"token punctuation\">..</span>.\n\nIs this ok? <span class=\"token punctuation\">(</span>yes<span class=\"token punctuation\">)</span> <span class=\"token function\">yes</span>\n\n<span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> $ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save serverless-python-requirements</code></pre></div>\n<p>To configure our <code class=\"language-text\">serverless.yml</code> file to use the plugin, we’ll add the following lines in our <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>python<span class=\"token punctuation\">-</span>requirements\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">pythonRequirements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">dockerizePip</span><span class=\"token punctuation\">:</span> non<span class=\"token punctuation\">-</span>linux</code></pre></div>\n<p><em>Note: a previous version of this post set <code class=\"language-text\">dockerizePip: true</code> instead of <code class=\"language-text\">dockerizePip: non-linux</code>. You’ll need <code class=\"language-text\">serverless-python-requirements</code> v3.0.5 or higher for this option.</em></p>\n<blockquote>\n<p>You need to have Docker <a href=\"https://docs.docker.com/install/\">installed</a> to be able to set <code class=\"language-text\">dockerizePip: true</code> or <code class=\"language-text\">dockerizePip: non-linux</code>. Alternatively, you can set <code class=\"language-text\">dockerizePip: false</code>, and it will not use Docker packaging.\nBut, Docker packaging is essential if you need to build native packages that are part of your dependencies like Psycopg2, NumPy, Pandas, etc.</p>\n</blockquote>\n<p>The <code class=\"language-text\">plugins</code> section registers the plugin with the Framework. In the <code class=\"language-text\">custom</code> section, we tell the plugin to use Docker when installing packages with pip. It will use a Docker container that’s similar to the Lambda environment so the compiled extensions will be compatible. You will need Docker installed for this to work.</p>\n<p>The plugin works by hooking into the Framework on a deploy command. Before your package is zipped, it uses Docker to install the packages listed in your <code class=\"language-text\">requirements.txt</code> file and save them to a <code class=\"language-text\">.requirements/</code> directory. It then symlinks the contents of <code class=\"language-text\">.requirements/</code> into your top-level directory so that Python imports work as expected. After the deploy is finished, it cleans up the symlinks to keep your directory clean.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> $ serverless deploy\nServerless: Parsing Python requirements.txt\nServerless: Installing required Python packages <span class=\"token keyword\">for</span> runtime python3.6<span class=\"token punctuation\">..</span>.\nServerless: Docker Image: lambci/lambda:build-python3.6\nServerless: Linking required Python packages<span class=\"token punctuation\">..</span>.\n\n<span class=\"token punctuation\">..</span>. Truncated <span class=\"token punctuation\">..</span>.\n\nServerless: Stack update finished<span class=\"token punctuation\">..</span>.\nService Information\nservice: numpy-test\nstage: dev\nregion: us-east-1\napi keys:\n  None\nendpoints:\n  None\nfunctions:\n  numpy: numpy-test-dev-numpy</code></pre></div>\n<p>Great. Let’s invoke our <code class=\"language-text\">numpy</code> function and read the logs:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> $ serverless invoke -f numpy --log\n--------------------------------------------------------------------\nSTART RequestId: b32af7a8-52fb-4145-9e85-5985a0f64fe4 Version: <span class=\"token variable\">$LATEST</span>\nYour numpy array:\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0</span>  <span class=\"token number\">1</span>  <span class=\"token number\">2</span>  <span class=\"token number\">3</span>  <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">[</span> <span class=\"token number\">5</span>  <span class=\"token number\">6</span>  <span class=\"token number\">7</span>  <span class=\"token number\">8</span>  <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">[</span><span class=\"token number\">10</span> <span class=\"token number\">11</span> <span class=\"token number\">12</span> <span class=\"token number\">13</span> <span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nEND RequestId: b32af7a8-52fb-4145-9e85-5985a0f64fe4\nREPORT RequestId: b32af7a8-52fb-4145-9e85-5985a0f64fe4\tDuration: <span class=\"token number\">0.52</span> ms\tBilled Duration: <span class=\"token number\">100</span> ms \tMemory Size: <span class=\"token number\">1024</span> MB\tMax Memory Used: <span class=\"token number\">37</span> MB</code></pre></div>\n<p>And there it is. You’ve got NumPy in your Lambda!</p>\n<p>Be sure to check out the repo for additional functionality, including automatic compression of libraries before deploying, which can be a huge help with the larger numerical libraries in Python.</p>\n<p><em>Many thanks to the <a href=\"https://unitedincome.com/\">United Income</a> team and <a href=\"https://twitter.com/schep_\">Daniel Schep</a> in particular for creating the <code class=\"language-text\">serverless-python-requirements</code> package. If you want to work on serverless full-time, check out United Income. They use a 100% serverless architecture for everything from serving up their web application to running millions of financial simulations, and they are always looking for talented engineers to join their growing team in Washington, DC.</em></p>","frontmatter":{"title":"How to Handle your Python packaging in Lambda with Serverless plugins","date":"August 04, 2017","description":"Handling Python dependencies in your Lambda functions can be a pain. Here's how I handle Python packaging with Serverless for dev/prod parity."}}},"pageContext":{"slug":"/posts/2017-08-04-serverless-python-packaging/","previous":{"fields":{"slug":"/posts/2017-08-02-serverless-v1.19.0/"},"frontmatter":{"title":"Serverless v1.19 - Enhancements, bug fixes and tweaks added"}},"next":{"fields":{"slug":"/posts/2017-08-04-serverless-cron-icle-7/"},"frontmatter":{"title":"Serverless (Cron)icle #7 - News from the Serverless Community"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-04-02-aws-lambda-node-8-support-what-changes-serverless-developers/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"fbf7c659-9f85-5f89-88ce-63166c092191","excerpt":"Node 8 support for AWS Lambda is here! If youâ€™re a serverless developer on Lambda, read on for what you need to know about Node 8. Namely: speed, Async/Awaitâ€¦","html":"<p>Node 8 support for AWS Lambda is here!</p>\n<p>If youâ€™re a serverless developer on Lambda, read on for what you need to know about Node 8. Namely: speed, Async/Await, object rest and spread, and NPX.</p>\n<h4>Speed</h4>\n<p>Node 8 is faster. (YES.)</p>\n<p>Specifically: about 7% reduction in runtime and 23% reduction in render time (if youâ€™re doing server-side rendering in your Lambda function).</p>\n<p>You can see the full performance benchmarks in <a href=\"https://hackernoon.com/upgrading-from-node-6-to-node-8-a-real-world-performance-comparison-3dfe1fbc92a3\">this great post by David Gilbertson</a>.</p>\n<p>(Though we must say, if you want maximum speed, <a href=\"https://serverless.com/blog/framework-example-golang-lambda-support/\">Go is still faster</a>.)</p>\n<h4>Async/Await</h4>\n<p>With Node 6, if you wanted to execute asynchronous code, you were probably using promises. Honestly, we kind of like promises; theyâ€™re just straightforward and readable.</p>\n<p><em>Except</em> when you hit a situation where you need to nest 15 rows of them together.</p>\n<p>With Async/Await, those nested promises can be no more. Just use keyword <code class=\"language-text\">await</code> to await a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wow</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">meFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">meSecond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">meThird</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>Simplify your build</h5>\n<p>If you are using webpack to build your functions to polyfill async/await, you can simply use the native functionality now and simplify your build.</p>\n<p>Simplicity for the win!</p>\n<p>Itâ€™s native in Node 8:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      message<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Go Serverless v1.0! </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> time<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> copy<span class=\"token operator\">:</span> <span class=\"token string\">'Your function executed successfully!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      input<span class=\"token operator\">:</span> event<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(Code snippet from the <a href=\"https://github.com/AnomalyInnovations/serverless-nodejs-starter\"><code class=\"language-text\">serverless-nodejs-starter</code> example</a>.)</p>\n<p>Big shoutout to the <a href=\"https://github.com/serverless-heaven/serverless-webpack\">serverless webpack plugin</a> for supporting this long before lambda runtime.</p>\n<h4>Object rest and spread</h4>\n<p>You can now spread in parameters into your function, and combine objects together more easily.</p>\n<p>Spread can be used instead of <code class=\"language-text\">Object.assign</code> and/or lodash assign/extend. Both rest and spread help to create a more readable codebase.</p>\n<p><strong>Object spread example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> defaultOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  bar<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n  zaz<span class=\"token operator\">:</span> <span class=\"token string\">'hi'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> userLandOptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  bar<span class=\"token operator\">:</span> <span class=\"token number\">200</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> combinedOptionsObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>defaultOptions<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>userLandOptions<span class=\"token punctuation\">,</span>\n  yolo<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>combinedOptionsObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => { foo: false, bar: 200, zaz: 'hi', yolo: true }</span></code></pre></div>\n<p>ðŸ‘† Remember yolo === <code class=\"language-text\">true</code>. Live it up!</p>\n<p>For more on Object rest and spread, <a href=\"https://dmitripavlutin.com/object-rest-spread-properties-javascript/\">checkout this post</a></p>\n<h4>NPX</h4>\n<p>If youâ€™re running node 8 locally, it comes shipped with NPM version 5.2, which includes NPX:</p>\n<p>Npx allows you to run serverless without installing it globally:</p>\n<p><code class=\"language-text\">npx serverless deploy</code></p>\n<p>If this is your <code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"my-serverless-app\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"blah blah\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"handler.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npx serverless deploy\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can simply run <code class=\"language-text\">npm run deploy</code> to deploy the function to Lambda; no need to have anything installed globally on your machine.</p>\n<p><a href=\"https://www.youtube.com/watch?v=55WaAoZV_tQ\">Check this video</a> for a full rundown.</p>\n<h5>Further reading:</h5>\n<ul>\n<li><a href=\"https://forum.serverless.com/t/aws-node-8-10-runtime-for-lambdas-migration-guide/4141\">AWS Node 8.10 migration guide</a></li>\n<li><a href=\"https://serverless.com/blog/serverless-express-rest-api/\">Deploy a REST API using Serverless, Express, and Node.js</a></li>\n</ul>","frontmatter":{"title":"AWS Lambda Node.js 8 support: what it changes for serverless developers","date":"April 02, 2018","description":"AWS Lambda just moved to support Node.js 8.10. This is what serverless developers need to know."}}},"pageContext":{"slug":"/posts/2018-04-02-aws-lambda-node-8-support-what-changes-serverless-developers/","previous":{"fields":{"slug":"/posts/2018-03-29-how-raise-money-charity-in-an-hour/"},"frontmatter":{"title":"How we raised over $400 for charity in an hour"}},"next":{"fields":{"slug":"/posts/2018-04-03-guide-to-distributed-teams/"},"frontmatter":{"title":"Strategies for working with remote and distributed teams"}}}}}
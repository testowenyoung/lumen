{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-03-02-advanced-plugin-development-extending-the-core-lifecycle/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"62261b6b-dd4f-52d1-acb0-b08b9843d14d","excerpt":"Introduction In Serverless 1.x you can easily write plugins to add additional commands that in turn define a lifecycle\nthat can be hooked by other plugins. This…","html":"<h1>Introduction</h1>\n<p>In Serverless 1.x you can easily write plugins to add additional commands that in turn define a lifecycle\nthat can be hooked by other plugins. This works great as long as you initiate your plugin functionality by\ninvoking it through the defined commands.</p>\n<p>But imagine, you’ve written a plugin (myplugin) that adds some functionality to the standard behavior of Serverless,\ni.e. the plugin does not offer any explicit commands, but only hooks into Serverless’ core lifecycle events.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'after:deploy:deploy'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">BbPromise</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prepareData<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transformData<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storeData<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printData<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Your plugin is automatically invoked after the Serverless core deploy plugin left its deploy:deploy lifecycle.\nWith this implementation you’ve implicitly created a dead end in the lifecycle dependencies, but why?</p>\n<p><em>Let me explain it:</em> Everything works as expected as soon as <code class=\"language-text\">serverless deploy</code> is executed and its deploy:deploy\nlifecycle event is run. And because you hooked after that, your plugin is executed right after the deploy has\nbeen finished. So far, so good.</p>\n<p>But what if you want to expose hooks by yourself in that case? What if you want a plugin to be able to hook just before\nor just after your storeData() step, so that it can either add additional transformations or grab any work on the data\nafter you’ve stored it?</p>\n<p>You just didn’t offer any lifecycle events that can be hooked. That’s why this is a <em>dead end</em>.</p>\n<p>To offer the best functionality for other plugin writers, the plugin should extend the Serverless core lifecycle\nand offer lifecycle events that can be hooked by others. That’s what most people expect and what makes the plugin\nsystem valuable and usable.</p>\n<p>From a lifecycle event point of view, we’d expect that the following lifecycle events are available after\nadding your plugin to any Serverless service project:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-&gt; deploy:deploy\n-&gt; after:deploy:deploy\n-&gt; myplugin:data:prepare\n-&gt; myplugin:data:transform\n-&gt; myplugin:data:store</code></pre></div>\n<p>Now any other plugin could hook before or after any of your plugin actions. That’s exactly how it should work.</p>\n<h1>Extending the Serverless Core Lifecycle</h1>\n<p>The Serverless core implementation composes the lifecycle by inspecting the commands offered by any plugins. There is\nno direct way for a plugin to inject its own lifecycle events when triggered by a hook. Only a command invocation will\nstart the plugin’s defined lifecycle.</p>\n<p>The solution to this problem is the plugin manager that controls the lifecycle, runs commands and triggers the hooks.\nThe plugin manager is available as property on the serverless object in every plugin, so we can use and access it from there.</p>\n<p>As lifecycles can only be started by invoking a command, and the plugin manager is able to run commands, we already have a\nfeasible solution here.</p>\n<p>In short, we have to define an internal command, that defines our plugin lifecycle and that can be\nrun by the plugin manager from within our hook implementation. Here’s the step-by-step walkthrough.</p>\n<h2>Adding Our Internal Command(s)</h2>\n<p>We add the internal command to our plugin, although the plugin is only triggered by hooks.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">myPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      myplugin<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        commands<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Definition of out myplugin:data:* hookable lifecycle events</span>\n            lifecycleEvents<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n              <span class=\"token string\">'prepare'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'transform'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'store'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'print'</span>\n            <span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The command only defines the lifecycle, not anything else. We don’t want to let it be called from the user.</p>\n<h2>Invoke the Command Within Our Hook / Enter Our Lifecycle</h2>\n<p>In our hook we now use the plugin manager to enter our very own plugin lifecycle. Therefore we modify our hook’s\ndefinition from above.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Main hook entry point - starts our data lifecycle</span>\n    <span class=\"token string\">'after:deploy:deploy'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverless<span class=\"token punctuation\">.</span>pluginManager<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'myplugin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// New sub lifecycle event implementations</span>\n    <span class=\"token string\">'myplugin:data:prepare'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">BbPromise</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>prepareData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'myplugin:data:transform'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">BbPromise</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transformData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'myplugin:data:store'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">BbPromise</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>storeData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'myplugin:data:print'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">BbPromise</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>printData<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Multiple Descriptive Sub Lifecycles</h2>\n<p>You may have noticed the it would be possible to define additional lifecycles besides the ‘data’ lifecycle.\nFor larger plugins that will make the lifecycle model much more structured and transparent and implicitly adds\nmore intuition to your exposed lifecycle events.</p>\n<p><strong>Example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-&gt; deploy:deploy\n-&gt; after:deploy:deploy\n-&gt; myplugin:data:prepare\n-&gt; myplugin:data:transform\n-&gt; myplugin:data:store\n-&gt; myplugin:analysis:evalBandwidth</code></pre></div>\n<p>A further advanced use case could be a combination of user command lifecycles and internal lifecycles. Your plugin\ncould offer additional commands that are accessible by the user and can also be invoked within your internal\nhook chain. There are no limits to what you can do there.</p>\n<h2>Prevent Invocation from the Outside (User)</h2>\n<p>Serverless will show all defined commands in its help output and every shown command normally can also be executed.\nFor our internal hook lifecycle both of these behaviors are issues, so we have to add a workaround - Serverless does\nnot allow commands to not be exposed nor does it allow you to hide commands from the help output.</p>\n<p>We add a small description to our data command that will be shown on the help screen and a validate lifecycle event that\nwe’ll use to check if the invocation has been done from our hook implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">        <span class=\"token operator\">...</span>\n        commands<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            usage<span class=\"token operator\">:</span> <span class=\"token string\">'Internal use only!'</span><span class=\"token punctuation\">,</span>\n            lifecycleEvents<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n              <span class=\"token string\">'validate'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token operator\">...</span></code></pre></div>\n<p>Additionally, we prevent the user from starting it via ‘serverless myplugin data’ and add a local invocation check to our\nhook implementation and the new validate event as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token operator\">...</span>\n  <span class=\"token comment\">// Our main entry point</span>\n  <span class=\"token string\">'after:deploy:deploy'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_triggeredFromHook <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverless<span class=\"token punctuation\">.</span>pluginManager<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'myplugin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'myplugin:data:validate'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_triggeredFromHook <span class=\"token operator\">?</span> BbPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> BbPromise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Internal use only'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span></code></pre></div>\n<p>Maybe the plugin manager can support some flag for internal commands in the future that prevents calling from the outside and\ndisplay on the help screen. Then the trigger check can be removed completely.</p>\n<h1>Conclusion</h1>\n<p>Hopefully this approach will make your plugins more flexible and allow other plugin contributors to integrate easily with them.</p>","frontmatter":{"title":"Advanced Plugin Development - Extending The Serverless Core Lifecycle","date":"March 08, 2017","description":"Learn how to expose lifecycle hooks in a hook-driven Serverless plugin."}}},"pageContext":{"slug":"/posts/2017-03-02-advanced-plugin-development-extending-the-core-lifecycle/","previous":{"fields":{"slug":"/posts/2017-03-07-static-site-post-scheduler/"},"frontmatter":{"title":"How To Schedule Posts for Static Site Generators (Jekyll, Hugo, Phenomic etc.)"}},"next":{"fields":{"slug":"/posts/2017-03-10-serverless-fauna-python-example/"},"frontmatter":{"title":"Build A Serverless Python Application with AWS + FaunaDB - The First Serverless Database"}}}}}
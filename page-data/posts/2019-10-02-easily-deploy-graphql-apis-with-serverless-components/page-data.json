{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2019-10-02-easily-deploy-graphql-apis-with-serverless-components/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"cfc885a3-56a6-5e7f-bab9-150a44d2d512","excerpt":"Update: This post is based on the beta version of Serverless Components, which is not compatible with the latest, and much faster, GA version. Please check out…","html":"<blockquote>\n<p><strong>Update:</strong> This post is based on the beta version of Serverless Components, which is not compatible with the latest, and much faster, GA version. Please check out the <a href=\"https://github.com/serverless/components\">latest docs</a> for more up to date information.</p>\n</blockquote>\n<p>Ever since we released <a href=\"https://github.com/serverless/components\">Serverless Components</a>, we’ve seen huge demand for an AppSync component. Especially since it is not natively supported in the Serverless Framework. Today, we’re thrilled to announce the <a href=\"https://github.com/serverless-components/aws-app-sync\">Serverless AppSync Component</a>, which enables you to deploy GraphQL apps on AWS more easily and quickly than ever.</p>\n<p>The <a href=\"https://github.com/serverless-components/aws-app-sync\">Serverless AppSync Component</a> does not rely on CloudFormation, making it a lot faster to deploy compared to CloudFormation and Amplify. It also ships with sane defaults that makes it a lot simpler and easier to use without having to scroll through multiple pages of AWS documentation and copy/paste code. We’ve done the research for you, and we’ve packaged it all in this easy-to-use component. It comes with the following set of features:</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Fast Deployments (~10 seconds on average)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Create New APIs or Reuse Existing Ones</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Supports Custom Domains with CDN &#x26; SSL Out of the Box</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Supports Custom AppSync Service Role</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Supports Lambda Data Source</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Supports DynamoDB Data Source</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Supports ElasticSearch Data Source</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Supports Relational Database Data Source</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Supports API Keys Authentication</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Supports Cognito User Pools Authentication</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Supports OpenID Connect Authentication</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> Supports AppSync Functions</li>\n</ul>\n<p>In this article, we won’t be able to cover all the features of this component. But we will take an example driven approach using the Lambda data source, where we will deploy a very simple blogging GraphQL API to show you how easy it is to use this new component. Future articles will focus on more specific features and use cases of the <a href=\"https://github.com/serverless-components/aws-app-sync\">aws-app-sync component</a></p>\n<h3>Credits</h3>\n<p>Before moving forward, we’d like to give a HUGE shoutout to <a href=\"https://github.com/laardee\">Eetu Tuomala</a> who’s put a lot of effort contributing this component to the community and making sure it supports all of <a href=\"https://serverless.com/aws-appsync/\">AppSync</a> features. We’d also like to thank <a href=\"https://github.com/sid88in\">Siddharth Gupta</a> for building the original <a href=\"https://github.com/sid88in/serverless-appsync-plugin\">Serverless Framework AppSync plugin</a>, which is the main inspiration for this component.</p>\n<h3>Getting Started</h3>\n<p>If you’re new to <a href=\"https://github.com/serverless/components\">Serverless Components</a>, you’ll need to first install the latest version of the Serverless Framework. This will give you access to <a href=\"https://github.com/serverless-components\">30+ Serverless Components</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -g serverless</code></pre></div>\n<p>Awesome! Next up, we’re gonna configure our simple blogging GraphQL API.</p>\n<h3>Configuring Your GraphQL API</h3>\n<p>The <a href=\"https://github.com/serverless-components/aws-app-sync\">aws-app-sync component</a> supports 4 data sources. These are Lambda, DynamoDB, ElasticSearch &#x26; Relational Database. In this article, we’ll focus on the Lambda data source since it is the most common, and offers the most flexability for all use cases. for more information on using other data sources, <a href=\"https://github.com/serverless-components/aws-app-sync\">please checkout the docs</a></p>\n<p>You’ll need to have 4 files in the current working directory:</p>\n<ul>\n<li><strong>.env</strong> - Your AWS credentials</li>\n<li><strong>schema.graphql</strong> - Your GraphQL schema</li>\n<li><strong>index.js</strong> - Your Lambda code.</li>\n<li><strong>serverless.yml</strong> - Your components configuration.</li>\n</ul>\n<h4>.env</h4>\n<p>This is where you keep the AWS credentials that you’ll use for this component. It looks something like this…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># .env\nAWS_ACCESS_KEY_ID=XXX\nAWS_SECRET_ACCESS_KEY=XXX</code></pre></div>\n<p>For more info regarding setting AWS keys, <a href=\"https://github.com/serverless/components#credentials\">checkout this guide</a>.</p>\n<h4>schema.graphql</h4>\n<p>If you’ve worked with GraphQL before, you’ll recognize this file. This is where you define your GraphQL schema. You could put any valid GraphQL schema in here. But for this example, we will use a very simple schema that looks like this…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">schema {\n  query: Query\n}\n\ntype Query {\n  getPost(id: ID!): Post\n}\n\ntype Post {\n  id: ID!\n  author: String!\n  title: String\n  content: String\n  url: String\n}</code></pre></div>\n<h4>index.js</h4>\n<p>This is where you put your Lambda code. This code should work with the schema defined above. So in our example, it should look like this…</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> posts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"1\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">\"First Blog Post\"</span><span class=\"token punctuation\">,</span>\n      author<span class=\"token operator\">:</span> <span class=\"token string\">\"Eetu Tuomala\"</span><span class=\"token punctuation\">,</span>\n      url<span class=\"token operator\">:</span> <span class=\"token string\">\"https://serverless.com/\"</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span>\n        <span class=\"token string\">\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"2\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">\"Second Blog Post\"</span><span class=\"token punctuation\">,</span>\n      author<span class=\"token operator\">:</span> <span class=\"token string\">\"Siddharth Gupta\"</span><span class=\"token punctuation\">,</span>\n      url<span class=\"token operator\">:</span> <span class=\"token string\">\"https://serverless.com\"</span><span class=\"token punctuation\">,</span>\n      content<span class=\"token operator\">:</span>\n        <span class=\"token string\">\"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s.\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> posts<span class=\"token punctuation\">[</span>event<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Note:</strong> In a real world use case, you’d use a database to store your posts data. For for the sake of this example, we’re hard-coding the data.</p>\n<h4>serverless.yml</h4>\n<p>The <code class=\"language-text\">serverless.yml</code> file is where you define all the components that you’d like to use. In our case, we only need two components. One is the new <a href=\"https://github.com/serverless-components/aws-app-sync\">aws-app-sync component</a>, and the other is the <a href=\"https://github.com/serverless-components/aws-lambda\">aws-lambda component</a>. We will pass the ARN output of the lambda component as an input to the app sync component. Basically we’re just telling AppSync to use that Lambda as our data source.</p>\n<p>Here’s how this file looks…</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">myLambda</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">component</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"@serverless/aws-lambda\"</span>\n  <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> index.handler\n    <span class=\"token key atrule\">code</span><span class=\"token punctuation\">:</span> ./\n\n<span class=\"token key atrule\">myAppSyncApi</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">component</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"@serverless/aws-app-sync\"</span>\n  <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># creating the API and an API key</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Posts\n    <span class=\"token key atrule\">authenticationType</span><span class=\"token punctuation\">:</span> API_KEY\n    <span class=\"token key atrule\">apiKeys</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> myApiKey\n\n    <span class=\"token comment\"># defining your lambda data source</span>\n    <span class=\"token key atrule\">dataSources</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> AWS_LAMBDA\n        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> getPost\n        <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">lambdaFunctionArn</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>myLambda.arn<span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\"># mapping schema fields to the data source</span>\n    <span class=\"token key atrule\">mappingTemplates</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">dataSource</span><span class=\"token punctuation\">:</span> getPost\n        <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> Query\n        <span class=\"token key atrule\">field</span><span class=\"token punctuation\">:</span> getPost</code></pre></div>\n<h4>Setting Up a Custom Domain</h4>\n<p>This step is not required, but if you’d like to setup a custom domain for your GraphQL API, just add a <code class=\"language-text\">domain</code> property to the app sync component inputs:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">myAppSyncApi</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">component</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"@serverless/aws-app-sync\"</span>\n  <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">domain</span><span class=\"token punctuation\">:</span> api.example.com <span class=\"token comment\"># add your custom domain here</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Posts\n    <span class=\"token comment\"># ... rest of config here</span></code></pre></div>\n<p>Please note that your domain (<code class=\"language-text\">example.com</code> in this example) must have been purchased via AWS Route53 and available in your AWS account. For advanced users, you may also purchase it elsewhere, then configure the name servers to point to an AWS Route53 hosted zone. How you do that depends on your registrar.</p>\n<h3>Deploying Your GraphQL API</h3>\n<p>Now we have everything we need to deploy. Make sure you’re in the directory containing your <code class=\"language-text\">serverless.yml</code> file. Then run the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">serverless</code></pre></div>\n<p>The first deployment might take a little up to a minute (a little more if you’ve defined a custom domain), but most subsequent deployments should take no more than few seconds. Once the deployment is done, you should see an output like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  myAppSyncApi:\n    apiId:   samrhyo7srbtvkpqnj4j6uq6gq\n    arn:     arn:aws:appsync:us-east-1:552751238299:apis/samrhyo7srbtvkpqnj4j6uq6gq\n    url:     &quot;https://samrhyo7srbtvkpqnj4j6uq6gq.appsync-api.us-east-1.amazonaws.com/graphql&quot;\n    apiKeys:\n      - da2-coeytoubhffnfastengavajsku\n    domain:  &quot;https://api.example.com/graphql&quot;\n\n  9s › myAppSyncApi › done\n\nmyApp (master)$</code></pre></div>\n<p>Amazing! Your GraphQL API has been deployed. Now let’s query…</p>\n<h3>Querying Your GraphQL API</h3>\n<p>Notice the returned API URL &#x26; API Key in the CLI after deployment. You can now query your new API using this data. Using <a href=\"https://github.com/bitinn/node-fetch\">node-fetch</a>, you could do an HTTP request that looks something like this…</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fetch <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"node-fetch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// url of your GraphQL API. If you configured a custom domain, you could use that instead</span>\n<span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span>\n  <span class=\"token string\">\"https://samrhyo7srbtvkpqnj4j6uq6gq.appsync-api.us-east-1.amazonaws.com/graphql\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// api key of your GraphQL API</span>\n<span class=\"token keyword\">const</span> apiKey <span class=\"token operator\">=</span> <span class=\"token string\">\"da2-coeytoubhffnfastengavajsku\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ID of the post you wanna query</span>\n<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  method<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"x-api-key\"</span><span class=\"token operator\">:</span> apiKey\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    query<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">query getPost { getPost(id: \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\") { id author title content url}}</span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Wrapping Up</h3>\n<p>And there you have it! A serverless GraphQL API, with a custom domain, deployed with just a handful of serverless components. In a real world application, you’d likely need more components for your app. For example, you would use the <a href=\"https://github.com/serverless-components/aws-dynamodb\">aws-dynamodb component</a> to store your posts. Take a look at our growing list of <a href=\"https://github.com/serverless-components\">serverless components</a> to see what else you could use for your application.</p>\n<p>This is just the tip of the iceberg. The <a href=\"https://github.com/serverless-components/aws-app-sync\">aws-app-sync component</a> supports lots of other features and data sources. For more information, <a href=\"https://github.com/serverless-components/aws-app-sync\">please check out the docs</a>.</p>\n<p>We can’t wait to see what you build with Serverless Components. If you have any questions or feedback, feel free to <a href=\"https://twitter.com/eahefnawy\">reach out to me directly on Twitter</a>.</p>","frontmatter":{"title":"Easily Deploy GraphQL APIs with Serverless Components","date":"October 02, 2019","description":"Introducing the AWS AppSync component that allows you to easily and quickly deploy GraphQL APIs on AWS, and integrate them with AWS Lambda, DynamoDB & others."}}},"pageContext":{"slug":"/posts/2019-10-02-easily-deploy-graphql-apis-with-serverless-components/","previous":{"fields":{"slug":"/posts/2019-10-01-aws-lambda-python-monitoring/"},"frontmatter":{"title":"Zero Configuration Monitoring and Alerts now available for serverless Python apps"}},"next":{"fields":{"slug":"/posts/2019-10-10-serverless-azure-functions-v1-part2/"},"frontmatter":{"title":"How to Create a REST API with Azure Functions and the Serverless Framework - Part 2"}}}}}
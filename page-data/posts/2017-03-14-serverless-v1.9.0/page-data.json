{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-03-14-serverless-v1.9.0/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"ede2c781-6fc5-58c8-a89b-bf8d3ed30cf7","excerpt":"Today we’re happy to announce v1.9 of the Serverless Framework. Let’s take a dive into the release highlights. Highlights of 1.9.0 Note: You can find a complete…","html":"<p>Today we’re happy to announce v1.9 of the Serverless Framework.</p>\n<p>Let’s take a dive into the release highlights.</p>\n<h2>Highlights of 1.9.0</h2>\n<p><strong>Note:</strong> You can find a complete list of all the updates in the <a href=\"https://github.com/serverless/serverless/blob/master/CHANGELOG.md\">changelog</a>.</p>\n<h3>Allow DynamoDB and Kinesis streams to use GetAtt / ImportValue</h3>\n<p>Streams like Kinesis Streams or DynamoDB Streams are often used as event sources in serverless architectures. They make it easy to build awesome data pipelining architectures and process a huge amount of data in a serverless manner.</p>\n<p>The Serverless Framework introduced support for the <code class=\"language-text\">stream</code> event a while back. Version 1.9 adds a nice new feature that makes it possible to reference stream sources with the help of <code class=\"language-text\">GetAtt</code> or <code class=\"language-text\">ImportValue</code>.</p>\n<p>This way you could essentially define the stream as a CloudFormation resource in the <code class=\"language-text\">resources</code> section and reference it directly in your <code class=\"language-text\">serverless.yml</code> file.</p>\n<p>Here’s an example of what this looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">stream</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> kinesis\n          <span class=\"token key atrule\">arn</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">Fn::GetAtt</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> ResourcesKinesisStream\n              <span class=\"token punctuation\">-</span> Arn\n          <span class=\"token key atrule\">batchSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">ResourcesKinesisStream</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> AWS<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Kinesis<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Stream\n      <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span> ResourcesKinesisStream\n        <span class=\"token key atrule\">ShardCount</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></code></pre></div>\n<h3>Top-Level references for Serverless variables</h3>\n<p>The <a href=\"https://serverless.com/framework/docs/providers/aws/guide/variables/\">Serverless variable system</a> is a flexible and powerful way to spice up your <code class=\"language-text\">serverless.yml</code> files.</p>\n<p>Serverless Framework v1.9 makes this system even more powerful.</p>\n<p>You’re now able to reference the current <code class=\"language-text\">serverless.yml</code> file’s root or options root parameters. This allows you to access all option parameters without needing to specify which option you want to access.</p>\n<p>Curious how this looks? Here’s a code example that illustrates how to use those enhancements:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">-</span>reference\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs4.3\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">newService</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span><span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">exportName</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.newService.service<span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>export\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Outputs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">selfExport</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'A Value To Export'</span>\n      <span class=\"token key atrule\">Export</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.exportName<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">OptExport</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Exported option variable'</span>\n      <span class=\"token key atrule\">Export</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>opt<span class=\"token punctuation\">:</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">EnvExport</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Exported env variable'</span>\n      <span class=\"token key atrule\">Export</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3><code class=\"language-text\">virtualenv</code> support for invoke local</h3>\n<p>Most of the time developing in Python is done with the help of <code class=\"language-text\">virtualenvs</code> to encapsulate dependencies for Python projects. This is especially helpful when working on different Serverless Python services.</p>\n<p>Oftentimes you want to quickly test your functions locally without the need to deploy them to AWS first. This is where the <code class=\"language-text\">invoke local</code> command comes in handy. However, in the past <code class=\"language-text\">invoke local</code> didn’t support <code class=\"language-text\">virtualenv</code> setups.</p>\n<p>Serverless v1.9 changes that by adding support for <code class=\"language-text\">virtualenv</code> setups in the <code class=\"language-text\">invoke local</code> command.</p>\n<p>This way you can still encapsulate your Serverless Python services into their own environments, but also iterate quickly on your ideas by using <code class=\"language-text\">invoke local</code>.</p>\n<h3>Support for CloudFormation service roles</h3>\n<p>You can now define a custom CloudFormation service role that should be used for the deployment of your stack.</p>\n<p>To use this feature you simply need to add the <code class=\"language-text\">arn</code> of your CloudFormation service role in the <code class=\"language-text\">provider.cfnRole</code> property.</p>\n<p>Here’s an example of what this looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">cfnRole</span><span class=\"token punctuation\">:</span> &lt;ARN of CloudFormation service role<span class=\"token punctuation\">></span></code></pre></div>\n<h3>More features for invoke local</h3>\n<p>The feature set of the <code class=\"language-text\">invoke local</code> command was updated.</p>\n<p>The following additions were introduced:</p>\n<ol>\n<li>Support for JavaScript file that has export as a data input</li>\n<li>Specifing the location of handlers, such as <code class=\"language-text\">/dist</code></li>\n<li>Support for <code class=\"language-text\">context.done(err, result)</code></li>\n<li>Show JSON.parse result if Content-Type = “application/json”</li>\n</ol>\n<p>These enhancements should make local development more convenient and fun!</p>\n<h3>Enhancements &#x26; Bug Fixes</h3>\n<p>This release also fixes some other bugs and introduces several enhancements.</p>\n<blockquote>\n<p>Thanks for reporting bugs and opening issues!</p>\n</blockquote>\n<h3>Upcoming Breaking Changes</h3>\n<p>Here’s a list of all the breaking changes that will be introduced in Serverless v1.10.</p>\n<p><strong>Note:</strong> You’ll see the same list in the CLI if you run a Serverless command (as long as you haven’t disabled it).</p>\n<ul>\n<li><a href=\"https://github.com/serverless/serverless/pull/3344\">BREAKING - Separated Packaging and Deployment for CI/CD</a></li>\n</ul>\n<p><em>You’ll always get the most recent list of breaking changes in the <a href=\"https://github.com/serverless/serverless/milestones\">upcoming milestone</a> or in the Serverless CLI.</em></p>\n<h3>Contributors</h3>\n<p>This release contains lots of hard work from our awesome community and wouldn’t have been possible without passionate people contributing to Serverless.</p>\n<p>Here’s a list of all the contributors who’ve submitted changes for this release:</p>\n<ul>\n<li>Daniel Schep</li>\n<li>Doug Moscrop</li>\n<li>Erik Erikson</li>\n<li>James Thomas</li>\n<li>Jonathan Carter</li>\n<li>Jonathan Goldwasser</li>\n<li>Kurt Lee</li>\n<li>Ludovic</li>\n<li>Marcus Molchany</li>\n<li>Nicholas Rakoto</li>\n<li>Ryan S. Brown</li>\n<li>Tanas Gjorgoski</li>\n<li>Tylor Shin</li>\n<li>Vlad Golubev</li>\n<li>Vlad Holubiev</li>\n<li>Yoriki Yamaguchi</li>\n<li>horike37</li>\n</ul>\n<h3>Get Involved</h3>\n<p>Serverless has a really helpful, vibrant and awesome community. Do you want to help us develop the best Serverless tooling out there?</p>\n<p>Contributing isn’t just about code! Chime in on discussion, help with documentation updates or review PRs.</p>\n<p>Just filter by <a href=\"https://github.com/serverless/serverless/labels\">our labels</a> such as <a href=\"https://github.com/serverless/serverless/issues?q=is%3Aopen+is%3Aissue+label%3Astatus%2Feasy-pick\">easy-pick</a>, <a href=\"https://github.com/serverless/serverless/issues?q=is%3Aopen+is%3Aissue+label%3Astatus%2Fhelp-wanted\">help-wanted</a> or <a href=\"https://github.com/serverless/serverless/labels/stage%2Fneeds-feedback\">needs-feedback</a> to find areas where you can help us!</p>\n<h3>Using “Scope” to Contribute</h3>\n<p>We use our own Serverless Open Source tool called <a href=\"https://github.com/serverless/scope\">“Scope”</a> to manage the Frameworks development process:</p>\n<p><a href=\"https://serverless.com/framework/status/\">Serverless Framework Status Board</a></p>\n<p>Here you can see all the current discussions, to-be-reviewed PRs and recently closed issues and PRs.</p>\n<p>You can use this status board to see all the important things currently happening in the Framework development phase.</p>\n<h3>Next Steps</h3>\n<p>We’ve already started filling in the next <a href=\"https://github.com/serverless/serverless/milestones\">milestones</a>. Check out the <a href=\"https://github.com/serverless/serverless/milestone/25\">1.10 milestone</a> to see what we’ve planned for the next release.</p>\n<p>We hope that you like the new release! Let us know if you have any questions or feedback in <a href=\"http://forum.serverless.com/\">our Forum</a> or <a href=\"https://github.com/serverless/serverless/issues\">GitHub Issues</a>.</p>\n<h2>Introducing the “Post Scheduler” project</h2>\n<p>Our latest open source effort, <a href=\"https://github.com/serverless/post-scheduler\">“Post Scheduler”</a>, was recently announced! </p>\n<p>It’s a handy tool that makes it possible to automate the scheduling of blog posts and content updates for static site generators (like Jekyll, Hugo, Phenomic, etc.) through simple GitHub comments.</p>\n<p>It’s (of course) made with the help of the Serverless Framework. You should definitely check out the <a href=\"https://github.com/serverless/post-scheduler\">GitHub repository</a> and the <a href=\"https://www.youtube.com/watch?v=YETxuhexZY4\">introduction video</a>.</p>\n<p>You can read the corresponding announcement blog post with more details <a href=\"https://serverless.com/blog/static-site-post-scheduler/\">here</a>.</p>\n<p>Happy scheduling!</p>\n<h2>Serverless examples</h2>\n<p>The <a href=\"https://github.com/serverless/examples\">Serverless Examples Repository</a> is an excellent resource if you want to explore some real world examples and learn more about what Serverless architectures look like.</p>","frontmatter":{"title":"Stream event improvements and custom roles for CloudFormation deployments with Serverless v1.9","date":"March 14, 2017","description":"Serverless variable system and stream event enhancements, CloudFormation services roles in the Serverless Framework v1.9 release."}}},"pageContext":{"slug":"/posts/2017-03-14-serverless-v1.9.0/","previous":{"fields":{"slug":"/posts/2017-03-10-serverless-fauna-python-example/"},"frontmatter":{"title":"Build A Serverless Python Application with AWS + FaunaDB - The First Serverless Database"}},"next":{"fields":{"slug":"/posts/2017-03-15-faunadb-serverless-authentication/"},"frontmatter":{"title":"Using Serverless Authentication Boilerplate with FaunaDB"}}}}}
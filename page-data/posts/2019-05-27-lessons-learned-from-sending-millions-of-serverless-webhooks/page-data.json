{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2019-05-27-lessons-learned-from-sending-millions-of-serverless-webhooks/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"eb09b15d-a978-5d0a-a0fc-851f42f47c56","excerpt":"In March, Dwolla’s engineering team launched an updated webhook notifications architecture, cutting delivery times during peak load from minutes to seconds. At…","html":"<p>In March, Dwolla’s engineering team launched an updated <a href=\"https://developers.dwolla.com/guides/webhooks/\">webhook notifications</a> architecture, cutting delivery times during peak load from minutes to seconds. At the same time, we increased reliability, reduced costs and enabled configuration on a per-customer basis.</p>\n<p>Is your company just starting out and can’t handle much traffic? We can send webhooks one-by-one. Do you have an auto-scaling API that can handle hundreds of parallel requests? We’ll send them as fast as you can receive them.</p>\n<p>Webhooks  are HTTP calls to our customers’ APIs providing real-time updates for specific events, eliminating the need for long polling. Our old architecture was simple by design. We used a RabbitMQ queue serviced by a pool of Elastic Container Service (ECS) handlers. As events occurred in the system, we sent them to the queue. The handlers received them, called the appropriate customer’s API and sent the result to another queue for storage.</p>\n<p>After years of serving us well, we needed improvements. The shared queue meant high-volume customers doing large payouts and APIs with high response times delayed webhooks for everyone. Scaling the handlers to drain the queue caused all customer APIs to receive webhooks in parallel, even those that couldn’t handle them.</p>\n<p>To further scale, <a href=\"https://discuss.dwolla.com/t/webhook-improvements-a-deeper-dive/5161\">we moved to a multi-queue, serverless architecture</a>. When a customer subscribes to webhooks via our API, we dynamically provision a Simple Queue Service (SQS) queue and Lambda handler just for them. Now as events happen, we look up the appropriate customer’s queue, send them there for handling and send the result to a separate queue for storage. This allows us to configure the send rate of each individually and ensures high-volume customers or those with high response times aren’t impacting others.</p>\n<p>After sending millions of webhooks on the new architecture, we’ve learned valuable lessons. Not of fan of lists? Head straight to the <a href=\"https://github.com/search?q=topic%3Awebhooks+org%3ADwolla&#x26;type=Repositories\">open-sourced code</a>!</p>\n<ol>\n<li><strong>TypeScript is great.</strong> Our old handlers were written in Scala and while you can run Scala on Lambda via the Java runtime, cold start times are high. Since our handlers get invoked a lot and scale up and down with load, we run into cold starts often. TypeScript is a superset of and compiles to JavaScript, the runtime of which performs much better in this regard. We’ve appreciated the type safety and improved IDE experience TypeScript provides.</li>\n<li><strong>Serverless Framework and AWS Cloud Development Kit (CDK) work well together.</strong> The Serverless Framework allows you to configure Lambda functions and event source triggers (SQS, in our case) with a few lines in a <code class=\"language-text\">serverless.yml</code> file. The file also allows custom CloudFormation YAML for resources it doesn’t support. That’s where AWS CDK comes in. With it, you can configure AWS resources with all the power of TypeScript and then run <code class=\"language-text\">cdk synth</code> to produce a CloudFormation template YAML file. You can then import this file into your <code class=\"language-text\">serverless.yml</code> file and deploy the whole thing with one <code class=\"language-text\">serverless deploy</code> command!</li>\n<li><strong>Audit dependencies to keep bundle sizes small.</strong> Frontend JavaScript developers are familiar with this concept, but it’s less of a concern for backend developers. Since Lambda cold start times are impacted by bundle sizes, though, it’s important to keep your eye on them. <a href=\"https://github.com/serverless-heaven/serverless-webpack\">Serverless Webpack</a> is a great plugin to minify your code and <a href=\"https://bundlephobia.com/\">Bundlephobia</a> allows you to compare popular libraries and their sizes.</li>\n<li><strong>CloudWatch’s default log retention period is forever.</strong> This can get expensive with high-volume Lambda functions. Either ship your logs to your preferred aggregator or set the retention to a finite value. With Serverless Framework, this is as easy as adding <code class=\"language-text\">logRetentionInDays: 365</code> to <code class=\"language-text\">serverless.yml</code>.</li>\n<li><strong>Follow AWS Best Practices.</strong> The <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/best-practices.html\">Lambda</a> and <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html\">Using Lambda with SQS</a> Best Practices helps avoid Lambda throttles, understand SQS message batches (they succeed or fail together) and configure redrive policies high enough to prevent prematurely sending messages to dead-letter queues.</li>\n<li><strong>Structure your logs to ease alert creation and debugging.</strong> As an example, we preface errors with “[error]” allowing us to create a <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html\">Log Metric Filter</a> and get alerts anytime they occur. Consistently including high cardinality values in log messages (think account or transaction ID) is another good habit, allowing you to more easily track specific requests through the system.</li>\n<li><strong>Lambda errors can be elusive, but CloudWatch Insights helps.</strong> When a Lambda Error alert triggers, it’s not immediately clear what happened, especially if there are lots of logs to search through. Only through experience do you find timeouts log “timed out” and out-of-memory errors log “process exited.” CloudWatch Insights provides query capabilities to easily search Log Groups for these messages:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">| fields @timestamp, @message\n| filter @message like /\\[error\\]|timed|exited/\n| sort @timestamp</code></pre></div>\n<ol start=\"8\">\n<li><strong>Understand AWS account limits.</strong> Each service has its own limits and while some can be increased, others cannot. By default, Lambda has a limit of 1,000 concurrent executions, for example, and CloudFormation has a limit of 200 stacks. Before getting too far along with a solution, understand your limits. AWS Trusted Advisor can help keep tabs on them and trigger alerts if you cross certain thresholds.</li>\n<li><strong>Think twice before dynamically provisioning AWS resources.</strong> In our initial testing, we created the SQS queue and Lambda handler when a new customer subscribed to webhooks via the API and deleted them on unsubscribe. These are time intensive, however, and we quickly ran into race conditions during functional testing. Instead, we provision disabled resources on customer creation and only enable/disable the Lambda Event Source Mapping on subscribe/unsubscribe. This is much faster and still ensures we pay nothing for resources not in use.</li>\n<li><strong>Utilize tagging to manage lots of resources.</strong> Each SQS queue, Lambda handler, and CloudWatch Log Group have Project, Version, and Environment tags. This allows us to easily search for, update, and monitor costs across thousands of AWS resources.</li>\n</ol>\n<p>Moving to a serverless architecture improved the timeliness, configurability, cost and reliability of our webhooks. Taken together, they make the Dwolla Platform even more valuable to our customers. We hope these lessons ease adoption of Serverless on your projects.</p>\n<p>For more details, check out the open-sourced code detailed below and the <a href=\"https://gitpitch.com/dwolla/webhook-handler#/\">slides presented at Des Moines’s JavaScript meetup</a>.</p>\n<ul>\n<li><a href=\"https://github.com/Dwolla/webhook-provisioner\">webhook-provisioner</a> - Create, update and delete customer-specific AWS resources</li>\n<li><a href=\"https://github.com/dwolla/webhook-handler\">webhook-handler</a> - POST webhooks to APIs</li>\n<li><a href=\"https://github.com/dwolla/webhook-receiver\">webhook-receiver</a> - Sample application to receive and verify Dwolla’s webhooks</li>\n<li><a href=\"https://github.com/dwolla/cloudwatch-alarm-to-slack\">cloudwatch-alarm-to-slack</a> - Map and forward CloudWatch Alarms to Slack</li>\n<li><a href=\"https://github.com/dwolla/sqs-mv\">sqs-mv</a> - Move SQS messages from one queue to another. In the event of errors, used to move messages from the dead-letter-queue back to the appropriate customer queue</li>\n<li><a href=\"https://github.com/therockstorm/generator-serverless\">generator-serverless</a> - Yeoman generator for TypeScript and JavaScript serverless functions</li>\n</ul>","frontmatter":{"title":"Lessons Learned From Sending Millions of Serverless Webhooks","date":"May 27, 2019","description":"Using a serverless architecture to send Dwolla's webhooks faster and at a lower cost."}}},"pageContext":{"slug":"/posts/2019-05-27-lessons-learned-from-sending-millions-of-serverless-webhooks/","previous":{"fields":{"slug":"/posts/2019-05-22-deployment-profiles/"},"frontmatter":{"title":"Serverless Framework Enterprise 0.10.0 - Deployment Profiles"}},"next":{"fields":{"slug":"/posts/2019-05-29-serverless-microservice/"},"frontmatter":{"title":"Deploy a scalable API and Backend with Serverless, Express, and Node.js"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-01-11-serverless-application-for-long-running-process-fargate-lambda/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"6d741941-96e1-5ad3-949b-2c73220805f6","excerpt":"AWS dropped so many serverless announcements at re:Invent, the community is still scrambling to make sense of them all. This post is all about AWS Fargate. In…","html":"<p>AWS dropped so many serverless announcements at re:Invent, the community is still scrambling to make sense of them all. This post is all about AWS Fargate.</p>\n<p>In this article, I will show you how to create an end-to-end serverless application that extracts thumbnails from video files. But, oh no, processing video files is a long-running process! Whatever will we do?</p>\n<p>This is where Fargate comes in.</p>\n<p><strong>TL;DR</strong> A Docker container does the processing -> The container extracts the thumbnail and uploads the image to an S3 bucket -> The container is managed by AWS Fargate. All functionality is triggered from AWS Lambda functions and contained within a serverless application written with the <a href=\"https://serverless.com/framework/\">Serverless Framework</a>.</p>\n<p>Excited? Me too! Read on. 💥</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34815683-3c9ca24c-f680-11e7-9f23-d45bc78f3e37.png\" alt=\"Fargate + Lambda + Serverless Framework = Bliss\"></p>\n<h4>Some background &#x26; overview</h4>\n<p>With the <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/limits.html\">execution time limits</a> of the AWS Lambda platform, there are a lot of use cases involving long-running processes that are hard to implement.</p>\n<p>On the flip side, serverless computing offers benefits (like zero-administration, pay-per-execution, and auto-scaling capabilities) that are hard to ignore. AWS recently announced <a href=\"https://aws.amazon.com/fargate/\">AWS Fargate</a> to bridge that gap.</p>\n<blockquote>\n<p>AWS Fargate is a technology that allows you to use containers as a fundamental compute primitive without having to manage the underlying compute instances.</p>\n</blockquote>\n<p>Fargate technology works on Amazon ECS &#x26; Amazon EKS, and allows users to run containers without having to manage servers or clusters.</p>\n<p>Amazon ECS and Amazon EKS have two modes or launch types: Fargate and EC2.</p>\n<p>With Fargate, all you have to do is package your application in containers, specify the CPU and memory requirements, define networking and IAM policies, and launch the application. You can define an ECS Task and call it from your Lambda function.</p>\n<p>In this article, we will look at a serverless application built using Fargate and Lambda.</p>\n<p><strong>Most importantly:</strong> I have built the application so it’s generic enough to be used as a reference template for <em>any</em> long-running processes that need to be executed as part of a serverless application. 😎</p>\n<p>Let’s dig in!</p>\n<p><strong>What we’ll cover:</strong></p>\n<ul>\n<li>Building a container image to extract thumbnails</li>\n<li>\n<p>Setting up ECS using Fargate</p>\n<ul>\n<li>Defining an ECS Fargate Task</li>\n<li>Setting up IAM roles &#x26; policies</li>\n<li>Running the task</li>\n</ul>\n</li>\n<li>\n<p>Creating a serverless application</p>\n<ul>\n<li>Configuration and settings</li>\n<li>Triggering a Lambda function to run the ECS Fargate Task</li>\n<li>Triggering a Lambda function when thumbnail is generated</li>\n</ul>\n</li>\n</ul>\n<h5>Workflow</h5>\n<p>The diagram below and the steps that follow describe the overall workflow of the the application we’re building.</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34815433-4b277d74-f67f-11e7-83a0-9ac65d630eab.png\" alt=\"Architecture Diagram for processing video to generate thumbnail in AWS ECS using Fargate\"></p>\n<ol>\n<li>Upload video to S3</li>\n<li>S3 triggers a Lambda function when the video is uploaded</li>\n<li>The Lambda function runs the ECS Fargate Task with appropriate parameters.</li>\n<li>\n<p>The ECS Fargate Task executes the Docker container:</p>\n<ul>\n<li>that processes the video file to extract thumbnail,</li>\n<li>and uploads the thumbnail image to S3</li>\n</ul>\n</li>\n<li>S3 triggers another Lambda function when the thumbnail is uploaded</li>\n<li>The Lambda function writes the url of the thumbnail to the log.</li>\n</ol>\n<p><strong>Note:</strong> If you are not interested in learning how the container image was built or how to test extracting the thumbnail locally, please skip ahead to the <a href=\"https://serverless.com/blog/serverless-application-for-long-running-process-fargate-lambda/#setting-up-ecs-using-fargate/\">Setting up ECS (Fargate)</a> section. I have the Docker container <a href=\"https://hub.docker.com/r/rupakg/docker-ffmpeg-thumb/\">rupakg/docker-ffmpeg-thumb</a> shared on Dockerhub for you to use.</p>\n<h4>Building the Container Image</h4>\n<p>We’re encapsulating the core functionality—extracting a thumbnail from a video file—in a container.</p>\n<p>We’ll be using <code class=\"language-text\">ffmpeg</code> to manipulate the video, and the <a href=\"https://aws.amazon.com/cli/\">AWS CLI</a> to upload the thumbnail to S3. The container image accepts parameters to customize the functionality.</p>\n<p>Let’s look at the Dockerfile and then see how we would execute it.</p>\n<h5>Dockerfile</h5>\n<p>Here is the Dockerfile:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM jrottenberg/ffmpeg\nLABEL maintainer=&quot;Rupak Ganguly &lt;rupakg@gmail.com&gt;&quot;\n\nRUN apt-get update &amp;&amp; \\\n    apt-get install python-dev python-pip -y &amp;&amp; \\\n    apt-get clean\n\nRUN pip install awscli\n\nWORKDIR /tmp/workdir\n\nCOPY copy_thumbs.sh /tmp/workdir\n\nENTRYPOINT ffmpeg -i ${INPUT_VIDEO_FILE_URL} -ss ${POSITION_TIME_DURATION} -vframes 1 -vcodec png -an -y ${OUTPUT_THUMBS_FILE_NAME} &amp;&amp; ./copy_thumbs.sh</code></pre></div>\n<p>I use the base image <a href=\"https://hub.docker.com/r/jrottenberg/ffmpeg/\">jrottenberg/ffmpeg</a> for <code class=\"language-text\">ffmpeg</code> and then install the AWS CLI. Then I execute <code class=\"language-text\">ffmpeg</code>, passing it the parameters and then executing the <code class=\"language-text\">copy_thumbs.sh</code> script.</p>\n<p>The <code class=\"language-text\">copy_thumbs.sh</code> script uploads the extracted thumbnail to S3. The ENTRYPOINT describes the command I used to extract a frame from the video file.</p>\n<p><strong>Note</strong>: <code class=\"language-text\">ffmpeg</code> has many options to optimize what we’re doing and is out of this article’s scope. Check out <a href=\"https://www.ffmpeg.org/documentation.html\">ffmpeg docs</a> for details.</p>\n<p>Now that we have looked at the Dockerfile, let’s download the latest code from the repo to our machine and build the image:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone https://github.com/rupakg/docker-ffmpeg-thumb.git\n\n$ docker build -t docker-ffmpeg-thumb <span class=\"token builtin class-name\">.</span></code></pre></div>\n<p><strong>Note</strong>: Check out the <a href=\"https://github.com/rupakg/docker-ffmpeg-thumb\">docker-ffmpeg-thumb</a> Github repo for the latest code.</p>\n<p>For your convenience, I have the Docker container <a href=\"https://hub.docker.com/r/rupakg/docker-ffmpeg-thumb/\">rupakg/docker-ffmpeg-thumb</a> shared on Dockerhub for you to use.</p>\n<h5>Running the Container Locally</h5>\n<p>Let’s run the container image we created by passing it the required parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">INPUT_VIDEO_FILE_URL</span><span class=\"token operator\">=</span><span class=\"token string\">'https://s3url/mybucket/file.mp4'</span> <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">POSITION_TIME_DURATION</span><span class=\"token operator\">=</span><span class=\"token string\">'00:08'</span> <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">OUTPUT_THUMBS_FILE_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">'test.png'</span> <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">OUTPUT_S3_PATH</span><span class=\"token operator\">=</span><span class=\"token string\">'mybucket/myfolder'</span> <span class=\"token punctuation\">\\</span>\n    -e <span class=\"token assign-left variable\">AWS_REGION</span><span class=\"token operator\">=</span><span class=\"token string\">'us-east-1'</span> <span class=\"token punctuation\">\\</span>\n    rupakg/docker-ffmpeg-thumb</code></pre></div>\n<p>The parameters are pretty intuitive. Additionally, pass in the AWS credentials in the above command, and you should have a thumbnail in the specified S3 <code class=\"language-text\">mybucket/myfolder</code> path.</p>\n<p>With the functionality working using the container image, let’s look at using it in a ECS (Fargate) task and build it into a serverless application.</p>\n<h4>Setting up ECS using Fargate</h4>\n<p>If you have already worked with ECS, you might have some or all of these steps completed. But I’m going to walk you through the steps of setting up ECS with Fargate, assuming that you have not done it before.</p>\n<p>AWS provides a <a href=\"https://console.aws.amazon.com/ecs/home?region=us-east-1#/firstRun\">First Run Wizard</a> that is an excellent resource to start playing with ECS using Fargate. The wizard does a few things for us, as shown below:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34711774-8b161270-f4ee-11e7-8ed7-969cd6152747.png\" alt=\"AWS ECS Fargate First Run Wizard\">\n<em>Figure 1</em>: AWS ECS Fargate First Run Wizard</p>\n<h5>Container Definition</h5>\n<p>First, we will create the container definition.</p>\n<p>Note that AWS provides us a couple of pre-defined container definitions (as shown below), but we will select the ‘custom’ option and create a new container definition from scratch.</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34711932-12f094c2-f4ef-11e7-8b29-2c7918a65736.png\" alt=\"Container Definition\">\n<em>Figure 2</em>: Container definition</p>\n<p>Click the ‘Configure’ button. In the resulting pop-up screen, fill in the ‘Container Name’ and the ‘Image’:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34714271-f6cb6a80-f4f6-11e7-9881-b9fd8c3f242e.png\" alt=\"Configure Container\">\n<em>Figure 3</em>: Configure container</p>\n<p><strong>Note</strong>: The image for the container specified by <code class=\"language-text\">rupakg/docker-ffmpeg-thumb:latest</code> is the image that we built earlier. In this case, note that I am using the Docker Hub registry url pointing to the Docker image I built and uploaded. If you created your own image, specify that Docker image url here. You are welcome to use my Docker image as well.</p>\n<p>Next, open up the section ‘Advanced container configuration’, and in the ‘ENVIRONMENT’ section, add the following ‘Env Variables’:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">AWS_REGION - us-east-1\nINPUT_VIDEO_FILE_URL - https://s3.amazonaws.com/your-s3-bucket-name/test.mp4\nOUTPUT_S3_PATH - your-s3-bucket-name/your-thumbnail-folder-name\nOUTPUT_THUMBS_FILE_NAME\t - test.png\nPOSITION_TIME_DURATION - 00:01</code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34713501-7afe4136-f4f4-11e7-8bf4-75423a11c0ee.png\" alt=\"Advanced container configuration: Environment\">\n<em>Figure 4</em>: Advanced container configuration: Environment</p>\n<p>Leave the ‘NETWORK SETTINGS’ section empty.</p>\n<p>Next, in the ‘STORAGE AND LOGGING’ add the following ‘Log configuration’ key/value pairs:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">awslogs-group - /ecs/ffmpeg-thumb-task-definition\nawslogs-region - us-east-1\nawslogs-stream-prefix - ecs</code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34714019-075c08ce-f4f6-11e7-8888-66050deff115.png\" alt=\"Advanced container configuration: Storage and Logging\">\n<em>Figure 5</em>: Advanced container configuration: Storage and Logging</p>\n<p>Leave the ‘RESOURCE LIMITS’ and the ‘DOCKER LABELS’ sections empty.</p>\n<p>Click the ‘Update’ button.</p>\n<h5>Task Definition</h5>\n<p>Next, we will edit the ‘Task Definition’, by clicking on the ‘Edit’ button:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34714519-b020683c-f4f7-11e7-9968-1a4bbf4b24d4.png\" alt=\"Task definition\">\n<em>Figure 6</em>: Task definition</p>\n<p>Update the ‘Task definition name’ to <code class=\"language-text\">ffmpeg-thumb-task-definition</code>, and then click the ‘Save’ button:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34714643-13ab4020-f4f8-11e7-85d8-893c3f39319d.png\" alt=\"Update Task definition\">\n<em>Figure 7</em>: Update Task definition</p>\n<p>The updates we made above to the Container and Task definition sections are shown below:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34714881-cfcae7a6-f4f8-11e7-95ec-b71a3f2b4082.png\" alt=\"Updated Container and Task Definition\">\n<em>Figure 8</em>: Updated Container and Task definition</p>\n<h5>Service Definition</h5>\n<p>For our application we really don’t need a ‘service’, but during the service definition creation step, AWS automatically creates a ‘security group’. This is useful. So accept all the default values and click the ‘Next’ button:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34715153-a2dfa8de-f4f9-11e7-8b4b-6ced3d849af2.png\" alt=\"Create Service\">\n<em>Figure 9</em>: Create Service</p>\n<h5>Configuring the Cluster</h5>\n<p>This brings us to the last step: ‘Cluster Configuration’.</p>\n<p>Accept the default values of ‘Cluster name’ as <code class=\"language-text\">default</code>, and note that AWS will automatically create a VPC and subnets as needed. Click the ‘Next’ button:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34715433-b0db0220-f4fa-11e7-9965-10f2e9c42f92.png\" alt=\"Cluster Configuration\">\n<em>Figure 10</em>: Cluster Configuration</p>\n<h5>Review</h5>\n<p>Let’s review what we just configured. You can see all the settings in the screenshot below:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34715973-6c43f1ba-f4fc-11e7-99c0-614f5b34a9ea.png\" alt=\"Review\">\n<em>Figure 11</em>: Review</p>\n<p>Click the ‘Create’ button to create the container definition, task definition, service and the cluster.</p>\n<p>That should display a screen with all the items showing as ‘complete’. You can then click on the ‘View Service’ button to view the service that was created:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34741644-4eec4900-f551-11e7-91e0-24173807dbc8.png\" alt=\"Setup Complete\">\n<em>Figure 12</em>: Setup Complete</p>\n<p>Now, if you go back to the ‘Task Definitions’ menu item, you will see the new task that we just created. You can click on the task, and review the settings that we added. You can also create a new revision if you choose to at a later date:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34733614-f4c608fe-f536-11e7-9c54-b698ae5954ac.png\" alt=\"New Task\">\n<em>Figure 13</em>: New Task</p>\n<p>You can take a look at the JSON version of the task definition as shown below:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34733998-3eded3b6-f538-11e7-9424-c34c7633ab63.png\" alt=\"Task JSON\">\n<em>Figure 14</em>: Task JSON</p>\n<h5>Pre-requisite Resources</h5>\n<p>To be able to run our task and support the application, we need to create a couple of resources before-hand.</p>\n<ol>\n<li>We need a S3 bucket where we will be uploading our videos for processing. The bucket in the setting <code class=\"language-text\">&quot;bucket&quot;: &quot;&lt;your-s3-bucket-name&gt;&quot;</code> will be created automatically when we deploy our app.</li>\n<li>\n<p>We need to set an IAM Bucket Policy for the bucket to give it <code class=\"language-text\">public</code> permission to get objects. Use the following policy and add it to the ‘Bucket Policy’ for the bucket, via the AWS S3 console:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"Version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2008-10-17\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"Statement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"Effect\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Principal\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"s3:GetObject\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"Resource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"arn:aws:s3:::&lt;your-s3-bucket-name>/*\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>Under that bucket, we need a folder where the thumbnails extracted from the video file will be uploaded. We will need to manually create a folder with the name we have in the setting <code class=\"language-text\">&quot;thumbnails_folder&quot;: &quot;&lt;your-thumbnail-folder-name&gt;&quot;</code>.</li>\n<li>Test the above changes by uploading a file to this bucket and then accessing it by its public url from a browser. If you can view the file, you are all set.</li>\n</ol>\n<h5>IAM Roles &#x26; Policies</h5>\n<p>For our task to access the S3 bucket/folder we specified from our account, we need to give it specific permissions. Since the container is executing inside the ECS context, we can add another role that will have the specific S3 access policies.</p>\n<p>When we created our task definition, AWS created a role <code class=\"language-text\">ecsTaskExecutionRole</code> for us which gave access to run the task. Instead of updating that role directly, we will attach a new role for S3 access.</p>\n<p>Let’s create a new role. Go to the AWS IAM Console and switch to the ‘Roles’ tab:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34742757-45c45508-f555-11e7-8cf1-1dcf88ec7e09.png\" alt=\"ECS Task Execution Role\">\n<em>Figure 15</em>: ECS Task Execution Role</p>\n<p>Click on the <code class=\"language-text\">ecsTaskExecutionRole</code> role. On the resulting page, click on the ‘Add inline policy’ link:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34742884-ca9d7bba-f555-11e7-91e3-4116c9e80ba5.png\" alt=\"Add inline policy\">\n<em>Figure 16</em>: Add inline policy</p>\n<p>On the ‘Create Policy’ screen, click on the JSON tab. I have already created JSON fragment that encapsulates the policy we need. Paste the following JSON in the text area:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"Statement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"Action\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"s3:ListBucket\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"s3:GetBucketLocation\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"Effect\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"Resource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"arn:aws:s3:::&lt;your-s3-bucket-name>\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"Action\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"s3:PutObject\"</span>\n            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"Effect\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"Resource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"arn:aws:s3:::&lt;your-s3-bucket-name>/&lt;your-thumbnail-folder-name>/*\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"Version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012-10-17\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Basically, the above policy allows our task to list our bucket and also allows to put an object into the bucket/folder path.</p>\n<p>Click the ‘Review policy’ button, and give the new role a name <code class=\"language-text\">UploadToS3RolePolicy</code>. Click the ‘Create policy’ button to create the policy and attach it to the <code class=\"language-text\">ecsTaskExecutionRole</code> role.</p>\n<p>You can see the resulting screen below:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34743400-9467f4ce-f557-11e7-9f1f-063554ed29a1.png\" alt=\"Attach new role\">\n<em>Figure 17</em>: Attach new role</p>\n<p>With all the pre-requisite setup completed, we can now initiate running the task we created!</p>\n<h5>Initiating the Task Execution</h5>\n<p>Now that we have a task set up, let’s run it.</p>\n<p>We will start by running the task from the AWS Console. Check the box next to the task, click on the ‘Actions’ dropdown menu, and select the ‘Run Task’ item:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34734206-fb7f4b04-f538-11e7-8744-657b5b574477.png\" alt=\"Initiate Run Task\">\n<em>Figure 18</em>: Initiate Run Task</p>\n<p>In the following screen, we need to specify some settings that are required by the task to run:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34734570-2f716be4-f53a-11e7-8d54-989a1eef8c08.png\" alt=\"Task Run Settings\">\n<em>Figure 19</em>: Task Run settings</p>\n<p>Here are a couple of things that are going on:</p>\n<ul>\n<li>Pick ‘FARGATE’ as ‘Launch type’</li>\n<li>Pick ‘default’ as ‘Cluster’</li>\n<li>Assign ‘1’ for ‘Number of tasks’</li>\n<li>For ‘Cluster VPC’, pick one with the non-internal IP i.e. 172.x.x.x</li>\n<li>Only then you will see the ‘Subnets’ dropdown populate. Pick any two</li>\n<li>Pick the default ‘Security group’ that AWS created</li>\n<li>Pick ‘ENABLED’ for ‘Auto-assign public IP’</li>\n</ul>\n<p>Leave the ‘Task Overrides’ section under ‘Advanced Options’ as-is.</p>\n<p>Note that a ‘Task Execution Role’ <code class=\"language-text\">currentecsTaskExecutionRole</code> has been automatically created and assigned to the task. This IAM role gives permission to run/start the task.</p>\n<p>The ‘Container Overrides’ section gives us an opportunity to override any settings for the container we created. It should be populated with the settings that we added while creating the task definition.</p>\n<p>If you choose to change any of these settings, you can do so now in this section:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34739181-7bc6f45a-f549-11e7-9807-aa4d5b708a2a.png\" alt=\"Container Overrides\">\n<em>Figure 20</em>: Container Overrides</p>\n<p>Once you are satisfied with your changes, click the ‘Run Task’ button.</p>\n<h5>Running the Task</h5>\n<p>After the task is run, you can see an instance of the task being created on the resulting page:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34741859-19589662-f552-11e7-983c-5a9d9752d6f4.png\" alt=\"Task Created\">\n<em>Figure 21</em>: Task Created</p>\n<p>Let’s click on the task under the column ‘Task’. We can see the details of the task in the following screen:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34742073-f0140cae-f552-11e7-85bc-dc3ec34ed6c0.png\" alt=\"Running Task Details\">\n<em>Figure 22</em>: Running Task Details</p>\n<p>Once the ‘Last status’ field changes to ‘STOPPED’, you can switch to the ‘Logs’ tab to see the logs of the execution output:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34742331-cade8c88-f553-11e7-9cec-82c980169c0d.png\" alt=\"Log Output\">\n<em>Figure 23</em>: Log output</p>\n<p>As you can see in the output, the container we created generated a thumbnail from the video file it was passed, and uploaded it to the S3 bucket/folder we specified.</p>\n<p><strong>Side note:</strong> you can also use the AWS CLI to run/start/stop the task.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">aws --region us-east-1 ecs run-task --task-definition ffmpeg-thumb-task-definition</code></pre></div>\n<p>Now that we have executed the task from the AWS comsole, let’s create a serverless app that will run the task based on parameters we pass along.</p>\n<p><em>This</em> is where things get cool.</p>\n<h4>Creating the App</h4>\n<p>To recap, we are trying to extract a thumbnail from a video file based on a frame position that we specify.</p>\n<p>Here is the workflow:</p>\n<ol>\n<li>Upload video to S3</li>\n<li>S3 triggers a Lambda function when the video is uploaded</li>\n<li>Get the S3 object related metadata from the event</li>\n<li>The Lambda function runs the ECS Fargate Task with appropriate parameters</li>\n<li>\n<p>The ECS Fargate Task executes the Docker container:</p>\n<ul>\n<li>that processes the video file to extract thumbnail,</li>\n<li>and uploads the thumbnail image to S3</li>\n</ul>\n</li>\n<li>S3 triggers another Lambda function when the thumbnail is uploaded</li>\n<li>The Lambda function writes the url of the thumbnail to the log</li>\n</ol>\n<p>Let’s start by creating a new serverless app using the Serverless Framework’s boilerplate template <code class=\"language-text\">aws-nodejs</code>. We will name the app <code class=\"language-text\">ffmpeg-video-thumb</code>.</p>\n<p>To follow along, please download or clone the code for the app <a href=\"https://github.com/rupakg/ffmpeg-video-thumb\">ffmpeg-video-thumb</a>, and open it in an editor.</p>\n<h5>Configuration</h5>\n<p>The source code for the application is pretty generic, but you will need to supply it configuration settings that apply to your needs. Some of these configuration items include custom settings, plugins, IAM roles, and event rules for functions.</p>\n<h5>Custom Settings</h5>\n<p>We need the following settings that are defined in the <code class=\"language-text\">custom</code> section of the <code class=\"language-text\">serverless.yml</code> file. To make it easy, I have included a <code class=\"language-text\">config.dev.example.json</code> file with those entries.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"># config.dev.example.json\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"region\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"us-east-1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"bucket\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;your-s3-bucket-name>\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"thumbnails_folder\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;your-thumbnail-folder-name>\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ecsTaskName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;your-ecs-task-definition-name>\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ecsTaskVpcSubnet1\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;your-ecs-task-subnet>\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"ecsTaskVpcSubnet2\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;your-ecs-task-subnet>\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"clusterName\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"&lt;your-ecs-cluster-name>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Copy the <code class=\"language-text\">config.dev.example.json</code> to <code class=\"language-text\">config.dev.json</code>, and then supply the values for the entries. The <code class=\"language-text\">serverless.yml</code> loads the settings from the <code class=\"language-text\">config.dev.json</code> at the time of deployment.</p>\n<p><strong>Note</strong>: The <code class=\"language-text\">config.dev.json</code> has been added to <code class=\"language-text\">.gitignore</code> file, so it will not be added to your git repo.</p>\n<h5>Plugins</h5>\n<p>There are cases, like one below, where you need the <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html\">AWS CloudFormation Pseudo parameters</a> in your configuration <code class=\"language-text\">serverless.yml</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">execRoleArn</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">\"Fn::Join\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"arn:aws:iam::\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">\"Ref\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"AWS::AccountId\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\":role/ecsTaskExecutionRole\"</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Luckily, there is a Serverless plugin for that!</p>\n<p>Check out the awesome <a href=\"https://github.com/svdgraaf/serverless-pseudo-parameters\">serverless-pseudo-parameters</a> plugin written by Sander van de Graaf.</p>\n<p>You can now use <code class=\"language-text\">#{AWS::AccountId}</code>, <code class=\"language-text\">#{AWS::Region}</code>, etc. in any of your config strings, and this plugin replaces those values with the proper pseudo parameter Fn::Sub CloudFormation function.</p>\n<p>To install and add to the package.json, simply run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> i serverless-pseudo-parameters --save-dev</code></pre></div>\n<p>and in the <code class=\"language-text\">serverless.yml</code> file include it under the <code class=\"language-text\">plugins</code> block:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>pseudo<span class=\"token punctuation\">-</span>parameters</code></pre></div>\n<h5>IAM Roles</h5>\n<p>To allow the Lambda functions in our serverless app to do certain actions, we need to set permissions with AWS.</p>\n<p>We need the following permissions:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">iamRoleStatements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">Effect</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Allow\"</span>\n      <span class=\"token key atrule\">Action</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> ecs<span class=\"token punctuation\">:</span>RunTask\n      <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"*\"</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">Effect</span><span class=\"token punctuation\">:</span> Allow\n      <span class=\"token key atrule\">Action</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> iam<span class=\"token punctuation\">:</span>PassRole\n      <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.execRoleArn<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">Effect</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Allow\"</span>\n      <span class=\"token key atrule\">Action</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> s3<span class=\"token punctuation\">:</span>GetObject\n      <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"arn:aws:s3:::${self:custom.bucket}/*\"</span></code></pre></div>\n<p>The above IAM Role settings in the <code class=\"language-text\">serverless.yml</code> file allows the Lambda functions to run ECS Tasks, assumes the role defined in the <code class=\"language-text\">execRoleArn</code> setting and allows getting S3 objects from the bucket we defined.</p>\n<h5>Event Rules for Functions</h5>\n<p>We have two Lambda functions. Each of them are configured with certain rules that trigger them.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">triggerOnUploadVideo</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.triggerOnUploadVideo\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">s3</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">bucket</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.bucket<span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">event</span><span class=\"token punctuation\">:</span> s3<span class=\"token punctuation\">:</span>ObjectCreated<span class=\"token punctuation\">:</span>*\n          <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">suffix</span><span class=\"token punctuation\">:</span> .mp4</code></pre></div>\n<p>The above configuration sets a rule for function <code class=\"language-text\">triggerOnUploadVideo</code> to be triggered based on an event from S3 when a object with <code class=\"language-text\">suffix</code> ‘.mp4’ is created in the <code class=\"language-text\">bucket</code> we specified.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">triggerOnThumbnailCreation</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.triggerOnThumbnailCreation\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">s3</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">bucket</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.bucket<span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">event</span><span class=\"token punctuation\">:</span> s3<span class=\"token punctuation\">:</span>ObjectCreated<span class=\"token punctuation\">:</span>*\n          <span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">prefix</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.thumbnails_folder<span class=\"token punctuation\">}</span>/\n            <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">suffix</span><span class=\"token punctuation\">:</span> .png</code></pre></div>\n<p>This configuration sets a rule for function <code class=\"language-text\">triggerOnThumbnailCreation</code> to be triggered based on an event from S3 when a object with <code class=\"language-text\">suffix</code> ‘.png’ is created in the <code class=\"language-text\">thumbnails_folder</code> we specified.</p>\n<h5>Application Code</h5>\n<p>We looked at pre-requisites and then some configuration needed by our serverless application.</p>\n<p>Now let’s look at the function code that implements the features we need.</p>\n<h5>Lambda Function to Process Video</h5>\n<p>The Lambda function <code class=\"language-text\">triggerOnUploadVideo</code> is responsible for processing the video. It runs an ECS Task using Fargate, passing along appropriate parameters.</p>\n<p>This function is triggered when a video file with the <code class=\"language-text\">.mp4</code> extension is uploaded to the specified S3 bucket.</p>\n<p>Let’s take a quick look at the code at <code class=\"language-text\">handler.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">triggerOnUploadVideo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">const</span> bucket <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>Records<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">.</span>bucket<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>Records<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">const</span> s3_video_url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://s3.amazonaws.com/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>bucket<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> thumbnail_file <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.png'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> frame_pos <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'_'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token function\">runThumbnailGenerateTask</span><span class=\"token punctuation\">(</span>s3_video_url<span class=\"token punctuation\">,</span> thumbnail_file<span class=\"token punctuation\">,</span> frame_pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When the function is triggered by an S3 event, metadata about the bucket and the key for the object is received. I use that data to populate the parameters that the <code class=\"language-text\">runThumbnailGenerateTask</code> function needs.</p>\n<p><strong>Note</strong>: I do a small hack to name the video file so that the position for the frame we want to extract as a thumbnail is part of the filename. So a file named test_00-10.mp4 will assume the frame position to be 00:10.</p>\n<p>The code for the function <code class=\"language-text\">runThumbnailGenerateTask</code> is below:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var runThumbnailGenerateTask = (s3_video_url, thumbnail_file, frame_pos) =&gt; {\n\n  // run an ECS Fargate task\n  const params = {\n    cluster: `${ECS_CLUSTER_NAME}`,\n    launchType: &#39;FARGATE&#39;,\n    taskDefinition: `${ECS_TASK_DEFINITION}`,\n    ...\n    overrides: {\n      containerOverrides: [\n        {\n          name: &#39;ffmpeg-thumb&#39;,\n          environment: [\n            {\n              name: &#39;INPUT_VIDEO_FILE_URL&#39;,\n              value: `${s3_video_url}`\n            },\n    ...\n  ecsApi.runECSTask(params);\n}</code></pre></div>\n<p>Most of the function code is creating the <code class=\"language-text\">params</code> json structure that is passed to the helper function <code class=\"language-text\">ecsApi.runECSTask</code> to execute the ECS task using Fargate on AWS.</p>\n<p>You can customize any of these parameters via configuration. The <code class=\"language-text\">containerOverrides</code> array has custom values for the environment vars we setup for our container image.</p>\n<h5>Lambda Function to Notify Thumbnail Creation</h5>\n<p>The Lambda function <code class=\"language-text\">triggerOnThumbnailCreation</code> is triggered when a ‘.png’ file is uploaded to S3. It prints out the name of the thumbnail file into the logs.</p>\n<h4>Deploying the App</h4>\n<p>Now that we looked at the code, let’s deploy and run the application!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sls deploy\n\nServerless: Packaging service...\nServerless: Excluding development dependencies...\nAWS Pseudo Parameters\n...\nServerless: Stack update finished...\n...\nendpoints:\n  None\nfunctions:\n  triggerOnUploadVideo: rg-video-to-thumbnail-dev-triggerOnUploadVideo\n  triggerOnThumbnailCreation: rg-video-to-thumbnail-dev-triggerOnThumbnailCreation</code></pre></div>\n<p>The app is deployed. Let’s use it.</p>\n<p>Upload an .mp4 video file in the AWS S3 bucket you configured. It has to be named something like <code class=\"language-text\">test_00-10.mp4</code>, where the <code class=\"language-text\">00-10</code> is the frame position of your thumbnail.</p>\n<h5>Running the App</h5>\n<p>Open up two terminal windows and let’s tail the logs of our two functions.</p>\n<p>Here is what we see for the <code class=\"language-text\">triggerOnUploadVideo</code> function. I will break the output up into sections and explain.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sls logs -f triggerOnUploadVideo -t\n\nSTART RequestId: b602b28e-xxxx Version: $LATEST\n\n2017-12-30 03:37:47.318 (-05:00)\tb602b28e-xxxx\n{\n  &quot;Records&quot;: [{\n    &quot;eventVersion&quot;: &quot;2.0&quot;,\n    &quot;eventSource&quot;: &quot;aws:s3&quot;,\n    &quot;awsRegion&quot;: &quot;us-east-1&quot;,\n    &quot;eventTime&quot;: &quot;2017-12-30T08:37:46.526Z&quot;,\n    &quot;eventName&quot;: &quot;ObjectCreated:CompleteMultipartUpload&quot;,\n    ...\n    &quot;s3&quot;: {\n      ...\n      &quot;bucket&quot;: {\n        &quot;name&quot;: &quot;my-bucket&quot;,\n        ...\n        &quot;arn&quot;: &quot;arn:aws:s3:::my-bucket&quot;\n      },\n      &quot;object&quot;: {\n        &quot;key&quot;: &quot;bunny_00-03.mp4&quot;,\n        &quot;size&quot;: 26162774,\n        ...\n      }\n    }\n  }]\n}\n\n2017-12-30 03:37:47.318 (-05:00)\tb602b28e-xxxx\tA new file &#39;test_00-08.mp4&#39; was uploaded to &#39;my-bucket&#39; for processing.\n2017-12-30 03:37:47.319 (-05:00)\tb602b28e-xxxx\tProcessing file &#39;https://s3.amazonaws.com/my-bucket/bunny_00-03.mp4&#39; to extract frame from position &#39;00:08&#39; to generate thumbnail &#39;test.png&#39;.</code></pre></div>\n<p>Above, you can see that the function was triggered. Then the <code class=\"language-text\">event</code> JSON was written out, and the two log messages with the metadata for processing the video file.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2017-12-30 03:37:48.590 (-05:00)\tb602b28e-xxxx\tECS Task ffmpeg-thumb-task-definition started:\n[{\n  &quot;taskArn&quot;: &quot;arn:aws:ecs:us-east-1:XXXXXXXXXXXXXXXX:task/914cda86-XXXXXXXXXXXXXXXX&quot;,\n  &quot;clusterArn&quot;: &quot;arn:aws:ecs:us-east-1:XXXXXXXXXXXXXXXX:cluster/my-cluster&quot;,\n  &quot;taskDefinitionArn&quot;: &quot;arn:aws:ecs:us-east-1:XXXXXXXXXXXXXXXX:task-definition/ffmpeg-thumb-task-definition:10&quot;,\n  &quot;overrides&quot;: {\n    &quot;containerOverrides&quot;: [{\n      &quot;name&quot;: &quot;ffmpeg-thumb&quot;,\n      &quot;environment&quot;: [{\n        &quot;name&quot;: &quot;INPUT_VIDEO_FILE_URL&quot;,\n        &quot;value&quot;: &quot;https://s3.amazonaws.com/my-bucket/bunny_00-03.mp4&quot;\n      }, {\n        &quot;name&quot;: &quot;OUTPUT_THUMBS_FILE_NAME&quot;,\n        &quot;value&quot;: &quot;bunny.png&quot;\n      }, {\n        &quot;name&quot;: &quot;POSITION_TIME_DURATION&quot;,\n        &quot;value&quot;: &quot;00:03&quot;\n      }, {\n        &quot;name&quot;: &quot;OUTPUT_S3_PATH&quot;,\n        &quot;value&quot;: &quot;my-bucket/my-folder&quot;\n      }, {\n        &quot;name&quot;: &quot;AWS_REGION&quot;,\n        &quot;value&quot;: &quot;us-east-1&quot;\n      }]\n    }]\n  },\n  &quot;lastStatus&quot;: &quot;PROVISIONING&quot;,\n  &quot;desiredStatus&quot;: &quot;RUNNING&quot;,\n  &quot;cpu&quot;: &quot;256&quot;,\n  &quot;memory&quot;: &quot;512&quot;,\n  &quot;containers&quot;: [{\n    &quot;containerArn&quot;: &quot;arn:aws:ecs:us-east-1:XXXXXXXXXXXXXXXX:container/533d0f19-69f7-XXXXXXXXXXXXXXXXX&quot;,\n    &quot;taskArn&quot;: &quot;arn:aws:ecs:us-east-1:XXXXXXXXXXXXXXXX:task/914cda86-XXXXXXXXXXXXXXXX&quot;,\n    &quot;name&quot;: &quot;ffmpeg-thumb&quot;,\n    &quot;lastStatus&quot;: &quot;PENDING&quot;,\n    &quot;networkInterfaces&quot;: []\n  }],\n  &quot;version&quot;: 1,\n  &quot;createdAt&quot;: &quot;2017-12-30T08:37:48.573Z&quot;,\n  &quot;group&quot;: &quot;family:ffmpeg-thumb-task-definition&quot;,\n  &quot;launchType&quot;: &quot;FARGATE&quot;,\n  &quot;platformVersion&quot;: &quot;1.0.0&quot;,\n  &quot;attachments&quot;: [{\n    &quot;id&quot;: &quot;XXXXXXXXXXXXXXXXXX&quot;,\n    &quot;type&quot;: &quot;ElasticNetworkInterface&quot;,\n    &quot;status&quot;: &quot;PRECREATED&quot;,\n    &quot;details&quot;: [{\n      &quot;name&quot;: &quot;subnetId&quot;,\n      &quot;value&quot;: &quot;subnet-XXXXXXXX&quot;\n    }]\n  }]\n}]\n\nEND RequestId: b602b28e-ed3c-11e7-aeb6-b7f8f0abc2f3\nREPORT RequestId: b602b28e-ed3c-11e7-aeb6-b7f8f0abc2f3\n\n\tDuration: 1277.13 ms\tBilled Duration: 1300 ms \tMemory Size: 1024 MB\tMax Memory Used: 35 MB</code></pre></div>\n<p>Here we see that soon after the ECS task is called by the function, the ECS task is run. You can see the data structure for the task that is passed.</p>\n<p>Since the ECS task goes off in an async fashion, as far as the Lambda function is concerned—it has ended.</p>\n<p>Let’s tail the logs for the <code class=\"language-text\">triggerOnThumbnailCreation</code> function and wait for the thumbnail to be generated. In a few moments, the thumbnail is generated and the logs shows the message:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sls logs -f triggerOnThumbnailCreation -t\n\nSTART RequestId: da7f7017-xxxx Version: $LATEST\n\n2018-01-04 03:25:43.039 (-05:00)\tda7f7017-xxxx\n{\n  &quot;Records&quot;: [{\n    ...\n    &quot;s3&quot;: {\n      ...\n      &quot;bucket&quot;: {\n        &quot;name&quot;: &quot;my-bucket&quot;,\n        ...\n        &quot;arn&quot;: &quot;arn:aws:s3:::my-bucket&quot;\n      },\n      &quot;object&quot;: {\n        &quot;key&quot;: &quot;my-folder/bunny.png&quot;,\n        &quot;size&quot;: 1830681,\n        ...\n      }\n    }\n  }]\n}\n\n2018-01-04 03:25:43.040 (-05:00)\tda7f7017-xxxx\tA new thumbnail file was generated at &#39;https://s3.amazonaws.com/my-bucket/my-folder/bunny.png&#39;.\n\nEND RequestId: da7f7017-xxxx\nREPORT RequestId: da7f7017-xxxx\n\n\tDuration: 3.08 ms\tBilled Duration: 100 ms \tMemory Size: 1024 MB\tMax Memory Used: 33 MB</code></pre></div>\n<p>At this point, you can point your browser at the url printed in your logs and view the thumbnail.</p>\n<h4>Cost</h4>\n<p>I was curious what kind of cost I incurred while I was writing the article. I tested, created many tasks, and executed them many times over a reasonably long time scale.</p>\n<p>Since it only charged me when the ECS tasks and Lambda functions were executed, the cost incurred is negligible.</p>\n<p><strong>Again, reminding us why serverless is the way to go…</strong> ⚡️</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/34743576-2c27102e-f558-11e7-82b3-e6da8ead705f.png\" alt=\"Cost Analysis\"></p>\n<h4>Extending the App</h4>\n<p>We used a simple hack to pass the frame position for the input video file, but in real life we might need more detailed data for processing our file.</p>\n<p>In that case, a solution that uses AWS Kinesis to store metadata for the video, while S3 is used only for storage purposes, could be a viable option.</p>\n<h4>Summary</h4>\n<p>We looked at a possible solution to execute long-running processes in ECS using Fargate, but with tight integration with AWS Lambda. We built a Docker container to encapsulate the long-running process.</p>\n<p>We set up ECS using Fargate and created an ECS task to execute our container. We tested the functionality of extracting a thumbnail from a video file. Even better, we built and deployed a serverless application from scratch, written with the Serverless Framework.</p>\n<p>I know the article is a long one (to be honest it threw me for a loop just to write it!), but I wanted to capture what it takes to build such an application end-to-end.</p>\n<p>I’d love to hear from you about other use cases you solved with the reference app we built, or any you have in mind.</p>\n<p>Any questions or feedback, please leave it below!</p>","frontmatter":{"title":"How to use AWS Fargate and Lambda for long-running processes in a Serverless app","date":"January 11, 2018","description":"We'll show you how to process a video file that extracts a thumbnail in Amazon ECS using Fargate and Lambda"}}},"pageContext":{"slug":"/posts/2018-01-11-serverless-application-for-long-running-process-fargate-lambda/","previous":{"fields":{"slug":"/posts/2018-01-09-from-chef-to-serverless-developer-in-4-years/"},"frontmatter":{"title":"From chef to Serverless developer in 4 years"}},"next":{"fields":{"slug":"/posts/2018-01-15-serverless-cloudtrail-cloudwatch-events/"},"frontmatter":{"title":"How to monitor AWS account activity with Cloudtrail, Cloudwatch Events and Serverless"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2020-05-26-serverless-express-apis-aws-lambda-http-api/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"e6b23dd2-2bec-555d-b83e-f65d26378983","excerpt":"TLDR - Take existing Express.js apps and host them easily onto cheap, auto-scaling, serverless infrastructure on AWS Lambda and AWS HTTP API with Serverless…","html":"<p><strong>TLDR -</strong> Take existing Express.js apps and host them easily onto cheap, auto-scaling, serverless infrastructure on <em>AWS Lambda</em> and <em>AWS HTTP API</em> with <strong><a href=\"https://github.com/serverless-components/express\">Serverless Express</a></strong>.  It’s packed loads of production-ready features, like custom domains, SSL certificates, canary deployments, and costs <strong>~$0.000003</strong> per request.</p>\n<p>If you simply want to host a common <strong>Express.js</strong> Node.js application, have it auto-scale to billions of requests, and charge you only when it’s used, we have something special for you…</p>\n<p>Announcing <strong><a href=\"https://github.com/serverless-components/express\">Serverless Express</a></strong>, a Serverless Framework offering enabling you to easily host and manage Express.js applications on AWS Lambda and the new AWS HTTP API, which is 60% faster and 71% cheaper than their initial API Gateway product.</p>\n<p>Serverless Expess is a pure Express.js experience and <strong>it’s perfect for those that want to focus on apps, not infrastructure complexity</strong>.</p>\n<p>Here are the highlights:</p>\n<ul>\n<li><strong>Easy, Safe, Performance</strong> - Includes the optimal infrastructure pattern for cost, performance &#x26; scale.</li>\n<li><strong>Never Pay For Idle</strong> - No API requests?  No cost.  Averages ~$0.000003 per request.</li>\n<li><strong>Zero Configuration</strong> - Add your Express app, then deploy (advanced config options are available).</li>\n<li><strong>Fast Deployments</strong> - Deploy changes to the cloud in seconds.</li>\n<li><strong>Real-time Logging</strong> - Rapidly develop on the cloud w/ real-time logs and errors in the CLI.</li>\n<li><strong>Canary Deployments</strong> - Deploy your app gradually to a subset of your traffic.</li>\n<li><strong>Custom Domain + SSL</strong> - Auto-configure a custom domain w/ a free AWS ACM SSL certificate.</li>\n<li><strong>Team Collaboration</strong> - Collaborate with your teamates with shared state and outputs.</li>\n</ul>\n<p>Here is how to get started and deliver a Serverless Express.js based API with a custom domain, free SSL certificate and much more!  You can also check out our <strong><a href=\"https://github.com/serverless-components/fullstack-app\">Serverless Fullstack Application</a></strong> boilerplate, which includes Serverless Express in a real-world example that features a database, website using React and more.</p>\n<h1>Set-Up</h1>\n<p>Serverless Express is a <a href=\"https://github.com/serverless/components\">Serverless Framework Component</a> (i.e premium experiences for popular serverless use-cases) and you’ll need to install Node.js and the Serverless Framework CLI to use it.</p>\n<p>Install Node.js here.</p>\n<p>Then run this command to install Serverless Framework.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -g serverless</code></pre></div>\n<p>Next, install the Serverless Express template:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">serverless create --template-url https://github.com/serverless/components/tree/master/templates/express</code></pre></div>\n<p>Lastly, Serverless Express deploys onto your own Amazon Web Services account, so you’ll need Access Keys to an AWS account you own.  <a href=\"https://www.serverless.com/framework/docs/providers/aws/guide/credentials/\">Follow this guide to create those</a>.</p>\n<p>After you have created AWS Access Keys you can add them directly to an <code class=\"language-text\">.env</code> file, or reference an AWS Profile in a <code class=\"language-text\">.env</code> file, within the root of the template you installed.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">AWS_ACCESS_KEY_ID=123456789\nAWS_SECRET_ACCESS_KEY=123456789</code></pre></div>\n<p>You can also reference an AWS Profile in a <code class=\"language-text\">.env</code> file like this.  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">AWS_PROFILE=default</code></pre></div>\n<p>If you don’t include a <code class=\"language-text\">.env</code> file, the Serverless Framework will automatically look for a <code class=\"language-text\">default</code> AWS Profile in the root folder of your machine.</p>\n<p>Also, Serverless Framework has a built-in <code class=\"language-text\">stages</code> concept.  If you change the <code class=\"language-text\">stage</code> it will deploy a totally separate copy of your serverless application.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">component</span><span class=\"token punctuation\">:</span> express@1.0.8\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> express<span class=\"token punctuation\">-</span>api\n<span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> prod</code></pre></div>\n<p>Even better, you can use different <code class=\"language-text\">.env</code> files for each <code class=\"language-text\">stage</code> by simply using this convention:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.env # all stages\n.env.dev # &quot;dev&quot; stage\n.env.prod # &quot;prod&quot; stage</code></pre></div>\n<p>One last—often overlooked—step is to install the Express.js dependency, by running <code class=\"language-text\">npm i</code> in the template.</p>\n<h1>Deployment</h1>\n<p>Now, you are ready to deploy.  The template should work out-of-the-box, so run this command to get up and running…</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ serverless deploy</code></pre></div>\n<p>Serverless Express will provision all of the infrastructure and upload your code to it, in a matter of seconds.  Though, the first deployment always takes longer than the rest.</p>\n<p>You should see your teminal return the following:</p>\n<p><img src=\"https://s3.amazonaws.com/assets.github.serverless/components/serverless_express_cli_deploy.gif\" alt=\"Serverless Framework Express.js\"></p>\n<h1>Development</h1>\n<p>Most like to run their Express app locally, and you can absolutely boot up your Express app locally, as you always would.  </p>\n<p>However, local emulations are never the same as running it on real serverless infrastructure, resulting in surprising bugs when you push to production.  </p>\n<p>Further, you will most likely end up using other cloud resources with your Express.js API, and you want to be sure everything works together well.</p>\n<p>So we <em>wholeheartedly</em> recommend you develop on the real cloud environment (AWS Lambda)—and Serverless Express comes with some powerful features to help you do that, via an experience that looks and feels local.</p>\n<p>Serverless Express features fast deployments and real-time logging from your live AWS Lambda.  To get started, simply run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ serverless dev</code></pre></div>\n<p>Now, every time you save, your Serverless Express will quickly push your changes to the cloud.  Further, if all API requests, log statements and errors will stream into your terminal.  It should look like this:</p>\n<p><img src=\"https://s3.amazonaws.com/assets.github.serverless/components/serverless_express_cli_dev_mode.gif\" alt=\"Serverless Framework Express.js\"></p>\n<h1>Advanced Configuration</h1>\n<p>Serverless Express may be easy, but that does not mean it isn’t powerful or customizable.  It features the best possible defaults, but when you are ready for more, there is a ton of possibility.</p>\n<p>This tutorial was written with Serverless Express version 1.0.8, which at the time of writing, supports all of the following configuration options.</p>\n<p>There is a ton of possibility here!</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">component</span><span class=\"token punctuation\">:</span> express@1.0.8         <span class=\"token comment\"># (required) name of the component. In that case, it's express.</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> express<span class=\"token punctuation\">-</span>api                <span class=\"token comment\"># (required) name of your express component instance.</span>\n<span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev                       <span class=\"token comment\"># (optional) serverless dashboard stage. default is dev.</span>\n\n<span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">src</span><span class=\"token punctuation\">:</span> ./                        <span class=\"token comment\"># (optional) path to the source folder. default is a hello world app.</span>\n  <span class=\"token key atrule\">memory</span><span class=\"token punctuation\">:</span> <span class=\"token number\">512</span>                    <span class=\"token comment\"># (optional) lambda memory size.</span>\n  <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span>                    <span class=\"token comment\"># (optional) lambda timeout.</span>\n  <span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> My Express App    <span class=\"token comment\"># (optional) lambda &amp; api gateway description.</span>\n  <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>                           <span class=\"token comment\"># (optional) env vars.</span>\n    <span class=\"token key atrule\">DEBUG</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'express:*'</span>           <span class=\"token comment\">#            this express specific env var will print express debug logs.</span>\n  <span class=\"token key atrule\">roleName</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>custom<span class=\"token punctuation\">-</span>role<span class=\"token punctuation\">-</span>name  <span class=\"token comment\"># (optional) custom AWS IAM Role name for setting custom permissions.</span>\n  <span class=\"token key atrule\">traffic</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.2</span>                   <span class=\"token comment\"># (optional) traffic percentage to apply to this deployment.</span>\n  <span class=\"token key atrule\">layers</span><span class=\"token punctuation\">:</span>                        <span class=\"token comment\"># (optional) list of lambda layer arns to attach to your lambda function.</span>\n    <span class=\"token punctuation\">-</span> arn<span class=\"token punctuation\">:</span>aws<span class=\"token punctuation\">:</span>first<span class=\"token punctuation\">:</span>layer\n    <span class=\"token punctuation\">-</span> arn<span class=\"token punctuation\">:</span>aws<span class=\"token punctuation\">:</span>second<span class=\"token punctuation\">:</span>layer\n  <span class=\"token key atrule\">domain</span><span class=\"token punctuation\">:</span> api.serverless.com     <span class=\"token comment\"># (optional) if the domain was registered via AWS Route53 on the account you are deploying to, it will automatically be set-up with your Express app's API Gateway, as well as a free AWS ACM SSL Cert.</span>\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">2</span>              <span class=\"token comment\"># (optional) aws region to deploy to. default is us-east-1.</span></code></pre></div>\n<h1>Setting Up A Custom Domain Registered With AWS Route53 &#x26; SSL Certificate</h1>\n<p>Here’s how to easily set up a custom domain and SSL certificate on AWS Route53.  You can also follow the next section to add a custom domain registered outside of AWS Route53.</p>\n<p>To set up a custom domain purchased on AWS Route53, make sure you it is in a “registered” status and within the same AWS account your Express.js application is running in.</p>\n<p>Once this domain’s status goes from “pending” to “registered”, simply add the following configuration to your <code class=\"language-text\">serverless.yml</code>…</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">src</span><span class=\"token punctuation\">:</span> ./\n  <span class=\"token key atrule\">domain</span><span class=\"token punctuation\">:</span> mydomain.com   </code></pre></div>\n<p>Serverless Express will then add your custom domain to your API as well as automatically set-up an SSL certificated with it, so that you can have a production-ready Express.js API.</p>\n<p>Don’t forget to use <code class=\"language-text\">.env</code> files for different <code class=\"language-text\">stages</code> to use different domains for different environments. </p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">domain</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>domain<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># .env.dev\n# .env.prod\n\ndomain=api.webapp.com</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">$ serverless deploy <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>stage prod</code></pre></div>\n<h1>Setting Up A Custom Domain Registered Outside Of Route53 &#x26; SSL Certificate</h1>\n<p>If your domain is not on AWS Route53, you will have to set this up manually because the component does not have access to your registrar. Here are the general steps involved:</p>\n<ol>\n<li>Create an AWS ACM certificate for your domain. Make sure you set the “Additional Names” field to <code class=\"language-text\">*.yourdomain.com</code> as well to include all subdomains as well.</li>\n<li>After you create the certificate, it should be in a <code class=\"language-text\">PENDING_VALIDATION</code> status. Now you will need to validate your domain. We suggest you follow the DNS steps by adding the validation CNAME record you see on the AWS console to your domain via your registrar dashboard.</li>\n<li>After you add the validation record, it might take a while, but eventually the certificate should change status to <code class=\"language-text\">ISSUED</code>. Usually it takes around 5 minutes.</li>\n<li>Add your domain to the <code class=\"language-text\">serverless.yml</code> file as shown above and deploy. This step is important as it adds your domain to API Gateway.</li>\n<li>Notice the regional url that is returned as an output. Copy this URL, get back to your registrar and add another CNAME record with your domain or subdomain name and a value of this regional url. This ensures that your domain points to that cloudfront URL.</li>\n<li>After around 20 mins, your SSL certificate and domain should all be working and pointing to your URL. Keep in mind that if you change the <code class=\"language-text\">name</code>, <code class=\"language-text\">stage</code>, <code class=\"language-text\">app</code> or <code class=\"language-text\">org</code> properties in <code class=\"language-text\">serverless.yml</code>, this would result in a completely new instance with a new cloudfront url. This allows you to setup different domains for each stage or instance</li>\n</ol>\n<h1>Bundling Your Express App (Webpack, etc.)</h1>\n<p>By reducing your code size, your Express app will actually perform better in the AWS Lambda environment, resulting in a faster API.  A great way to reduce your code size is to bundle it with Webpack, Parcel, or others.</p>\n<p>To do this, you can modify the <code class=\"language-text\">src</code> input to run a <code class=\"language-text\">hook</code> script before deployment, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">src</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">src</span><span class=\"token punctuation\">:</span> ./\n    <span class=\"token key atrule\">hook</span><span class=\"token punctuation\">:</span> npm run build\n    <span class=\"token key atrule\">dist</span><span class=\"token punctuation\">:</span> ./dist</code></pre></div>\n<h1>Canary Deployments</h1>\n<p>At scale, when you want to push changes out to a small set of users, Serverless Express offers easy Canary Deployments out of the box!</p>\n<p>This enables you to push out a version of your app (containing code changes you deem risky) which is only served to a percentage of traffic that you specificy (0-99%).  This allows you to test big changes with little risk.</p>\n<p>To perform a canary deployment, first update your code with the potentially risky change.  </p>\n<p>Next, set a traffic weighting in your <code class=\"language-text\">serverless.yml</code> <code class=\"language-text\">inputs</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">src</span><span class=\"token punctuation\">:</span> ./\n  <span class=\"token key atrule\">traffic</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span> <span class=\"token comment\"># 50%</span></code></pre></div>\n<p>This tells Serverless Express to serve the new (potentially risky) code to 50% of the API requests, and the old (stable) code to the other 50% of requests.</p>\n<p>Run <code class=\"language-text\">serverless deploy</code>.  After deployment is complete, 50% of your requests will be randomly handled by the new experimental code.</p>\n<p>You can slowly increment the percentage over time, just continue to re-deploy it.</p>\n<p>If things aren’t working, revert your code to the old code, remove the <code class=\"language-text\">traffic</code> configuration option, and deploy.</p>\n<p>If things are working, keep the new code, remove the <code class=\"language-text\">traffic</code> configuration option, and deploy.</p>\n<h1>Wrapping Up</h1>\n<p>Our goal is to offer the best Serverless Express.js experience possible.  We have packed years of serverless experience into Serverless Express so you and your team don’t have to configure, manage and automate the underlying infrastructure, and we’ve barely touched on the tremendous power Serverless Express offers. </p>\n<p>As always, you should focus on your application, not infrastructure.  That is the Serverless Way!</p>\n<p>If you want to learn more, check out these resources:</p>\n<p><strong><a href=\"https://github.com/serverless-components/express\">Serverless Express</a></strong> - This is the repo for Serverless Express and it contains lots of additional documentation.</p>\n<p><strong><a href=\"https://github.com/serverless/components\">Serverless Components</a></strong> - You will most likely want to include a database, custom permissions role, website and more with your Express.js app.  Composition of serverless infrastructure is what Components are all about, so check out all of the neat things you can do via the Components Documentation.</p>\n<p><strong><a href=\"https://github.com/serverless-components/fullstack-app\">Serverless Fullstack Application</a></strong> - Here is a real-world example of how to use Serverless Express within the context of a fullstack application that features a database, website, authentication, authorization and more.  It’s a great starting point.</p>","frontmatter":{"title":"Serverless Express – Easy APIs On AWS Lambda & AWS HTTP API","date":"May 26, 2020","description":"Serverless Express enables you to easily host Express.js APIs on AWS Lambda and AWS HTTP API"}}},"pageContext":{"slug":"/posts/2020-05-26-serverless-express-apis-aws-lambda-http-api/","previous":{"fields":{"slug":"/posts/2020-04-16-announcing-http-api-monitoring/"},"frontmatter":{"title":"Announcing HTTP API Troubleshooting"}},"next":{"fields":{"slug":"/posts/2020-05-22-serverless-azure-functions-v2/"},"frontmatter":{"title":"Serverless Azure Functions V2 - Linux, Python & .NET Core Support"}}}}}
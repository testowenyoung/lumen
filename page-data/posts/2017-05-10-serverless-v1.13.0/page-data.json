{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-05-10-serverless-v1.13.0/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"7fb7a587-06b4-587e-98dc-62dcbed984f7","excerpt":"Today we’re proud to release v1.13 of the Serverless Framework! There’s some really exciting new features in this release, let’s look into them below…","html":"<img align=\"right\" width=\"210\" src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/serverless-v1.13.jpg\">\n<p>Today we’re proud to release v1.13 of the Serverless Framework!</p>\n<p>There’s some really exciting new features in this release, let’s look into them below.</p>\n<h2>Highlights of 1.13.0</h2>\n<p><strong>Note:</strong> You can find a complete list of all the updates in the <a href=\"https://github.com/serverless/serverless/blob/master/CHANGELOG.md\">changelog</a>.</p>\n<h3>Async value support for Serverless variables</h3>\n<p>The widely requested support for async serverless variables landed!</p>\n<p>Serverless Variables can now refer to functions which return a promise, making the variable population super powerful.</p>\n<p><strong>Example use cases</strong></p>\n<ul>\n<li>Fetch and include secrets from a remote database</li>\n<li>Connect variables to your team’s secret management solution</li>\n<li>Pull data from internal resources/APIs</li>\n<li>Read config data from your CI/CD server</li>\n<li>…</li>\n</ul>\n<p>The possibilities are endless!</p>\n<p>Let’s take at a simple example how this looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> serverless<span class=\"token punctuation\">-</span>async<span class=\"token punctuation\">-</span>vars\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>file(./vars.js)<span class=\"token punctuation\">:</span>fetchSecret<span class=\"token punctuation\">}</span> <span class=\"token comment\"># JS file running async / promised</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// vars.js</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fetchSecret</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// async code</span>\n  <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SomeSecretKey'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can read more about this new feature in the <a href=\"https://serverless.com/framework/docs/providers/aws/guide/variables\">Serverless Variables docs</a>.</p>\n<h3>Cross-service communication</h3>\n<p>One feature request which received lots of feedback and community-wide attention is the ability to do cross-service communication.</p>\n<p>Building complex serverless apps oftentimes requires the application to be split up into separate services / stacks which are then managed and deployed in a microservice fashion.</p>\n<p>However those services need to communicate with each other and e.g. share configuration.</p>\n<p>Serverless v1.13 adds support for the new Serverless Variable type <code class=\"language-text\">${cf:}</code> with the signature <code class=\"language-text\">${cf:stack.output-property}</code>.</p>\n<p>This variable type enables you a way to reference arbitray <code class=\"language-text\">Outputs</code> from CloudFormation stacks in your account.</p>\n<p>Let’s take a look at an example to see the how this feature can be used in a Serverless service.</p>\n<p>In the <code class=\"language-text\">serverless.yml</code> file of “Service A” we add the <code class=\"language-text\">memorySize</code> to the <code class=\"language-text\">Outputs</code> section of our CloudFormation template and deploy the service as usual through <code class=\"language-text\">serverless deploy</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> service<span class=\"token punctuation\">-</span>a\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">memorySize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">512</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Outputs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">memorySize</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Value</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>provider.memorySize<span class=\"token punctuation\">}</span>\n      <span class=\"token key atrule\">Export</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span> memorySize</code></pre></div>\n<p>Next up we have “Service B” in which we’re importing the <code class=\"language-text\">memorySize</code> config of our previously deployed “Service A”:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> service<span class=\"token punctuation\">-</span>b\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">memorySize</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>cf<span class=\"token punctuation\">:</span>service<span class=\"token punctuation\">-</span>a<span class=\"token punctuation\">-</span>dev.memorySize<span class=\"token punctuation\">}</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello</code></pre></div>\n<p><strong>Note:</strong> The <code class=\"language-text\">cf</code> Serverless Variable can reference arbitrary <code class=\"language-text\">Outputs</code> from any CloudFormation stack in your account. It doesn’t need to be a Serverless service stack.</p>\n<p>Interested in more information about this feature? Make sure the check out the <a href=\"https://serverless.com/framework/docs/providers/aws/guide/variables/\">Servereless Variables docs</a>!.</p>\n<h3>Lambda tags</h3>\n<p>AWS recently announced  support for <a href=\"https://aws.amazon.com/de/about-aws/whats-new/2017/04/aws-lambda-supports-tagging-and-cost-allocations/\">tagging Lambda functions</a>.</p>\n<p>Serverless v1.13 adds native support for this nifty feature.</p>\n<p>Tags can be added with the help of the <code class=\"language-text\">tags</code> property on the function level. Tags are always defined as key-value pairs.</p>\n<p>Here’s an example showing how to add the <code class=\"language-text\">stage: production</code> tag to the <code class=\"language-text\">hello</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> service\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> production</code></pre></div>\n<p>Tagging Lambda functions opens a wide variety of different use cases.</p>\n<p>The most popular use cases seem to be around billing, for example analyzing overall costs based on Lambda tags (<code class=\"language-text\">production</code> vs. <code class=\"language-text\">development</code>). Tagging is also helpful to track Lambdas that use soon to be deprecated runtimes or code or need to be specifically tracked for some other purpose.</p>\n<p>More about Lambda tagging can be found in the <a href=\"https://serverless.com/framework/docs/providers/aws/guide/functions/\">function docs</a>.</p>\n<h3>Extensible <code class=\"language-text\">info</code> plugin</h3>\n<p>The AWS implementation of the <code class=\"language-text\">info</code> command now defines more fine-grained lifecycle events you can hook into.</p>\n<p>Each information group that is returned when the results are gathered exposes it’s own lifecycle event:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-&gt; info:info\n  -&gt; aws:info:validate\n  -&gt; aws:info:gatherData\n  -&gt; aws:info:displayServiceInfo\n  -&gt; aws:info:displayApiKeys\n  -&gt; aws:info:displayEndpoints\n  -&gt; aws:info:displayFunctions\n  -&gt; aws:info:displayStackOutputs</code></pre></div>\n<p>This makes the <code class=\"language-text\">info</code> plugin far more extensible.</p>\n<p>Plugin authors can now hook into the lifecycle event before functions are displayed and modify the data accordingly.</p>\n<h3><code class=\"language-text\">hello-world</code> starter template</h3>\n<p>Serverless v1.13 adds a new, beginner friendly <code class=\"language-text\">hello-world</code> template.</p>\n<p>This template is used to streamline the onboarding process.</p>\n<p>Just create the new service with <code class=\"language-text\">serverless create --template hello-world</code> and run <code class=\"language-text\">serverless deploy</code> and you’re off to the races.</p>\n<p>The <code class=\"language-text\">hello-world</code> template includes one function which is hooked up to a CORS enabled API Gateway endpoint.</p>\n<p>It uses <code class=\"language-text\">nodejs6.10</code> as the runtime and <code class=\"language-text\">aws</code> as the provider of choice.</p>\n<p>Create the hello-world service with these terminal commands</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Make the directory</span>\n<span class=\"token function\">mkdir</span> my-new-service\n\n<span class=\"token comment\"># change into the directory</span>\n<span class=\"token builtin class-name\">cd</span> my-new-service\n\n<span class=\"token comment\"># Create serverless hello world</span>\nserverless create --template hello-world\n\n<span class=\"token comment\"># Deploy it</span>\nserverless deploy</code></pre></div>\n<h3>Enhancements &#x26; Bug Fixes</h3>\n<p>This release also includes a bunch of bug fixes and several enhancements.</p>\n<blockquote>\n<p>Thanks for reporting bugs and opening issues!</p>\n</blockquote>\n<h3>Contributors</h3>\n<p>This release contains lots of hard work from our awesome community, and wouldn’t have been possible without passionate people who decided to spend their time contributing to make Serverless better.</p>\n<p>Thank You to all of the contributors who submitted changes for this release:</p>\n<ul>\n<li>Ben New</li>\n<li>Christos Matskas</li>\n<li>Frank Schmid</li>\n<li>Hyunsoo Daniel Kim</li>\n<li>Jonathan Goldwasser</li>\n<li>Ken Sykora</li>\n<li>Ryan Lewis</li>\n<li>Stewart Lord</li>\n<li>jarrett jordaan</li>\n</ul>\n<h3>Get Involved</h3>\n<p>Serverless has a really helpful, vibrant and awesome community. Want to help us build the best Serverless tooling out there?</p>\n<p>Contributing isn’t just about code! Chime in on <a href=\"https://github.com/serverless/serverless/labels/stage%2Fneeds-feedback\">discussions</a>, help with <a href=\"https://github.com/serverless/serverless/labels/kind%2Fdocs\">documentation updates</a> or <a href=\"https://github.com/serverless/serverless/pulls\">review Pull Requests</a>.</p>\n<p>Just filter by <a href=\"https://github.com/serverless/serverless/labels\">our labels</a> such as <a href=\"https://github.com/serverless/serverless/issues?q=is%3Aopen+is%3Aissue+label%3Astatus%2Feasy-pick\">easy-pick</a>, <a href=\"https://github.com/serverless/serverless/issues?q=is%3Aopen+is%3Aissue+label%3Astatus%2Fhelp-wanted\">help-wanted</a> or <a href=\"https://github.com/serverless/serverless/labels/stage%2Fneeds-feedback\">needs-feedback</a> to find areas where you can help us!</p>\n<p>Furthermore, we’re always seeking feedback from our community to build the features in the best way possible. <a href=\"https://github.com/serverless/serverless/labels/stage%2Fneeds-feedback\">Here’s a list</a> with issues where we need your feedback and insights in your real world usage of Serverless.</p>\n<h3>Next Steps</h3>\n<p>We’ve already started filling in the next <a href=\"https://github.com/serverless/serverless/milestones\">milestones</a>. Check out the <a href=\"https://github.com/serverless/serverless/milestone/29\">1.14 milestone</a> to see what we have planned for the next release.</p>\n<p>We hope that you like the new release! Let us know if you have any questions or feedback in <a href=\"http://forum.serverless.com/\">our Forum</a> or <a href=\"https://github.com/serverless/serverless/issues\">GitHub Issues</a>.</p>\n<h2>Serverless Examples</h2>\n<p>The <a href=\"https://github.com/serverless/examples\">Serverless Examples Repository</a> is an excellent resource if you want to explore some real world examples and learn more about what Serverless architectures look like.</p>","frontmatter":{"title":"Async variable support added in Serverless v1.13 for enhanced configuration & secret management","date":"May 10, 2017","description":"Async Serverless variables, Cross-Service communication, Lambda tags and more in the Serverless Framework v1.13 release."}}},"pageContext":{"slug":"/posts/2017-05-10-serverless-v1.13.0/","previous":{"fields":{"slug":"/posts/2017-05-05-introducing-serverless-cron-icle/"},"frontmatter":{"title":"Introducing Serverless (Cron)icle - News from the Serverless Ecosystem"}},"next":{"fields":{"slug":"/posts/2017-05-11-multi-provider-serverless-video/"},"frontmatter":{"title":"The Multi-Provider Future of Serverless Application Development [Video]"}}}}}
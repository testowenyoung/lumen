{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-12-04-api-ruby-serverless-framework/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"b2384ce4-d884-5697-a055-063059cdc25c","excerpt":"On the heels of re:Invent, it’s been a great week for the serverless community. And one of the most exciting things in AWS’s re:Invent goodie basket? Ruby…","html":"<p>On the heels of re:Invent, it’s been a great week for the serverless community. And one of the most exciting things in AWS’s re:Invent goodie basket? Ruby support for Lambda!</p>\n<p>Personally, I love Ruby, and was really excited to play around with a Ruby deployment on the Serverless Framework.</p>\n<p>So here you have it, Ruby fans. Your Ruby + Serverless Framework getting started template. I’m going to start by covering some Ruby + Serverless Framework basics and testing practices, and then we’ll build a fully-fledged Ruby API.</p>\n<p>Let’s get to it.</p>\n<img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/ruby/serverless-ruby-body.png\" alt=\"Serverless Ruby API\">\n<h4>Getting Started</h4>\n<p>First up, we need to install the Serverless Framework (if you haven’t already), and create a new Ruby service:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm install -g serverless\nserverless create -t aws-ruby -p myservice</code></pre></div>\n<p>Navigate to your new service folder, and deploy the default <code class=\"language-text\">hello world</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cd myservice\nsls deploy\nsls invoke -f hello </code></pre></div>\n<h5>Testing Locally</h5>\n<p>Right now the framework only supports NodeJS, Python and Java in the local testing. (We hope to get that updated soon!) In the meantime, because Ruby is awesome, we have some great testing tools and capabilities right at our fingertips with some of the built-in testing tooling.</p>\n<p>Let’s say we want to run our local handler and make sure it returns the status code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">mkdir test\ntouch test/handler_test.rb</code></pre></div>\n<p>Open <code class=\"language-text\">test/handler_test.rb</code> in a and copy/paste in the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">require_relative <span class=\"token string\">'../handler.rb'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'test/unit'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestHandler</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Test</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Unit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">TestCase</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_happy_path</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        response <span class=\"token operator\">=</span> hello<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        assert_equal <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">[</span><span class=\"token symbol\">:statusCode</span><span class=\"token punctuation\">]</span>\n        assert_match <span class=\"token regex\">/Serverless/</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">[</span><span class=\"token symbol\">:body</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>If we run <code class=\"language-text\">ruby -I test test/handler_test.rb</code>, we’ll get a nice simulated invoke (assuming you have Ruby installed locally of course).</p>\n<p>We’ll dive a bit more into this in the next more advanced section, building an API!</p>\n<h4>Building an API With Ruby, the Serverless Framework, and AWS Lambda</h4>\n<p>Building on what we already have in <code class=\"language-text\">serverless.yml</code>, let’s add an event to our function:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> aws<span class=\"token punctuation\">-</span>ruby <span class=\"token comment\"># NOTE: update this with your service name</span>\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> ruby2.5\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> hello\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> post</code></pre></div>\n<p>Let’s also update our <code class=\"language-text\">handler.rb</code> with a some more interesting logic. We’re going to echo back a posted request body as part of the message.</p>\n<p>If we don’t get a request body or something else goes wrong, we handle that as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'json'</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">hello</span></span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">begin</span>\n    puts <span class=\"token string\">\"Received Request: <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>event<span class=\"token delimiter tag\">}</span></span>\"</span>\n\n    <span class=\"token punctuation\">{</span> statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">(</span><span class=\"token string\">\"Go Serverless v1.0! Your function executed successfully! <span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>event<span class=\"token punctuation\">[</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">]</span><span class=\"token delimiter tag\">}</span></span>\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">rescue</span> <span class=\"token constant\">StandardError</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> e  \n    puts e<span class=\"token punctuation\">.</span>message  \n    puts e<span class=\"token punctuation\">.</span>backtrace<span class=\"token punctuation\">.</span>inspect  \n    <span class=\"token punctuation\">{</span> statusCode<span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> body<span class=\"token punctuation\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bad request, please POST a request body!\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>As always, let’s update our test to make sure we’re still happy. Make <code class=\"language-text\">test/handler_test.rb</code> contain the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">require_relative <span class=\"token string\">'../handler.rb'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'test/unit'</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TestHandler</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Test</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Unit</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">TestCase</span>\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_happy_path</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        response <span class=\"token operator\">=</span> hello<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        assert_equal <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">[</span><span class=\"token symbol\">:statusCode</span><span class=\"token punctuation\">]</span>\n        assert_match <span class=\"token regex\">/Serverless/</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">[</span><span class=\"token symbol\">:body</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token method-definition\"><span class=\"token function\">test_sad_path</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        response <span class=\"token operator\">=</span> hello<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">:</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        assert_equal <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">[</span><span class=\"token symbol\">:statusCode</span><span class=\"token punctuation\">]</span>\n        assert_match <span class=\"token regex\">/please POST/</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">[</span><span class=\"token symbol\">:body</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>After running a quick <code class=\"language-text\">ruby -I test test/handler_test.rb</code> to make sure all our tests still pass, then an <code class=\"language-text\">sls deploy</code>, we should have an API!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Serverless: Stack update finished...\nService Information\nservice: aws-ruby\nstage: dev\nregion: us-east-2\nstack: aws-ruby-dev\napi keys:\n  None\nendpoints:\n  POST - https://someid.execute-api.us-east-1.amazonaws.com/dev/hello\nfunctions:\n  hello: aws-ruby-dev-hello</code></pre></div>\n<p>Grab that <code class=\"language-text\">POST</code> endpoint, run a curl against it, and you should see something like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># curl -X POST https://someid.execute-api.us-east-2.amazonaws.com/dev/hello -d &quot;Hello, World!&quot;\n&quot;Go Serverless v1.0! Your function executed successfully! Hello, World!</code></pre></div>\n<h4>Ruby Examples</h4>\n<p>I can’t wait to see what the serverless community builds with Ruby! When you make your first (or fifth) Ruby app, please do submit it to our <a href=\"https://github.com/serverless/examples\">Examples Repo</a> and share it with the community.</p>\n<p>Here are some great community examples contributions we’ve already gotten:\n-<a href=\"https://github.com/serverless/examples/tree/master/aws-ruby-simple-http-endpoint\">aws-ruby-simple-http-endpoint</a></p>","frontmatter":{"title":"Building an API with Ruby and the Serverless Framework","date":"December 04, 2018","description":"AWS Lambda now supports Ruby! Here's how you can get started and build an API with the Serverless Framework."}}},"pageContext":{"slug":"/posts/2018-12-04-api-ruby-serverless-framework/","previous":{"fields":{"slug":"/posts/2018-11-30-introducing-serverless-open-runtime/"},"frontmatter":{"title":"Introducing: the Serverless Open Runtime"}},"next":{"fields":{"slug":"/posts/2018-12-05-serverless-twitter-camp-fire/"},"frontmatter":{"title":"A Serverless Twitter bot helps house Camp Fire victims"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2019-07-02-graphql-api-mysql-postgres-aurora/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"55efa393-c9bf-5162-a682-06db7766894e","excerpt":"Exposing a simple database via a GraphQL API requires a lot of custom code and infrastructure: true or false? For those who answered ‚Äútrue,‚Äù we‚Äôre here to show‚Ä¶","html":"<p>Exposing a simple database via a GraphQL API requires a lot of custom code and infrastructure: true or false?</p>\n<p>For those who answered ‚Äútrue,‚Äù we‚Äôre here to show you that building GraphQL APIs is actually fairly easy, with some concrete examples to illustrate why and how.</p>\n<p>(If you already know how easy it is to build GraphQL APIs with Serverless, there‚Äôs plenty for you in this article as well.)</p>\n<p>GraphQL is a query language for web APIs. There‚Äôs a key difference between a conventional REST API and APIs based on GraphQL: with GraphQL, you can use a single request to fetch multiple entities at once. This results in faster page loads and enables a simpler structure for your frontend apps, resulting in a better web experience for everyone. If you‚Äôve never used GraphQL before, we suggest you check out <a href=\"https://graphql.org/learn/\">this GraphQL tutorial</a> for a quick intro.</p>\n<p>The <a href=\"https://serverless.com/framework\">Serverless framework</a> is a great fit for GraphQL APIs: with Serverless, you don‚Äôt need to worry about running, managing, and scaling your own API servers in the cloud, and you won‚Äôt need to write any infrastructure automation scripts. Learn more about Serverless <a href=\"https://serverless.com/learn/overview/\">here</a>. In addition, Serverless provides an excellent vendor-agnostic developer experience and a robust community to help you in building your GraphQL applications.</p>\n<p>Many applications in our everyday experience contain social networking features, and that kind of functionality can really benefit from implementing GraphQL instead of the REST model, where it‚Äôs hard to expose structures with nested entities, like users and their Twitter posts. With GraphQL, you can build a unified API endpoint that allows you to query, write, and edit all the entities you need using a single API request.</p>\n<p>In this article, we look at how to build a simple GraphQL API with the help of the Serverless framework, Node.js, and any of several hosted database solutions available through <a href=\"https://aws.amazon.com/rds/\">Amazon RDS</a>: MySQL, PostgreSQL, and the MySQL workalike Amazon Aurora.</p>\n<p>Follow along in <a href=\"https://github.com/serverless/examples/tree/master/aws-node-graphql-and-rds\">this example repository on GitHub</a>, and let‚Äôs dive in!</p>\n<h4>Building a GraphQL API with a relational DB backend</h4>\n<p>In our example project, we decided to use all three databases (MySQL, PostgreSQL, and Aurora) in the same codebase. We know, that‚Äôs overkill even for a production app, but we wanted to blow you away with how web-scale we build. üòâ</p>\n<p>But seriously, we overstuffed the project just to make sure you‚Äôd find a relevant example that applies to your favorite database. If you‚Äôd like to see examples with other databases, please let us know in the comments.</p>\n<h5>Defining the GraphQL schema</h5>\n<p>Let‚Äôs start by defining the schema of the GraphQL API that we want to create, which we do in the <code class=\"language-text\">schema.gql</code> file at the root of our project using the GraphQL syntax. If you‚Äôre unfamiliar with this syntax, take a look at the examples <a href=\"https://graphql.org/learn/schema/\">on this GraphQL documentation page</a>.</p>\n<p>For starters, we add the first two items to the schema: a <code class=\"language-text\">User</code> entity and a <code class=\"language-text\">Post</code> entity, defining them as follows so that each User can have multiple Post entities associated with it:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">    <span class=\"token keyword\">type</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token attr-name\">UUID</span><span class=\"token punctuation\">:</span> String\n        <span class=\"token attr-name\">Name</span><span class=\"token punctuation\">:</span> String\n        <span class=\"token attr-name\">Posts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>Post<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">type</span> <span class=\"token class-name\">Post</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token attr-name\">UUID</span><span class=\"token punctuation\">:</span> String\n        <span class=\"token attr-name\">Text</span><span class=\"token punctuation\">:</span> String\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can now see what the User and Post entities look like. Later, we‚Äôll make sure these fields can be stored directly in our databases.</p>\n<p>Next, let‚Äôs define how users of the API will query these entities. While we could use the two GraphQL types <code class=\"language-text\">User</code> and <code class=\"language-text\">Post</code> directly in our GraphQL queries, it‚Äôs best practice to create <a href=\"https://graphql.org/graphql-js/mutations-and-input-types/\">input types</a> instead to keep the schema simple. So we go ahead and add two of these input types, one for the posts and one for the users:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">    <span class=\"token keyword\">input</span> UserInput <span class=\"token punctuation\">{</span>\n        <span class=\"token attr-name\">Name</span><span class=\"token punctuation\">:</span> String\n        <span class=\"token attr-name\">Posts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>PostInput<span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">input</span> PostInput <span class=\"token punctuation\">{</span>\n        <span class=\"token attr-name\">Text</span><span class=\"token punctuation\">:</span> String\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now let‚Äôs define the <a href=\"https://graphql.org/learn/queries/\">mutations</a>‚Äîthe operations that modify the data stored in our databases via our GraphQL API. For this we create a <code class=\"language-text\">Mutation</code> type. The only mutation we‚Äôll use for now is <code class=\"language-text\">createUser</code>. Since we‚Äôre using three different databases, we add a mutation for each database type. Each of the mutations accepts the input <code class=\"language-text\">UserInput</code> and returns a <code class=\"language-text\">User</code> entity:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    <span class=\"token builtin class-name\">type</span> Mutation <span class=\"token punctuation\">{</span>\n        mysql_createUser<span class=\"token punctuation\">(</span>input: UserInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>: User\n        postgresql_createUser<span class=\"token punctuation\">(</span>input: UserInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>: User\n        aurora_createUser<span class=\"token punctuation\">(</span>input: UserInput<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>: User\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>We also want to provide a way to query the users, so we create a <code class=\"language-text\">Query</code> type with one query per database type. Each query accepts a <code class=\"language-text\">String</code> that‚Äôs the user‚Äôs UUID, returning the <code class=\"language-text\">User</code> entity that contains its name, UUID, and a collection of every associated <code class=\"language-text\">Pos``t</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    <span class=\"token builtin class-name\">type</span> Query <span class=\"token punctuation\">{</span>\n        mysql_getUser<span class=\"token punctuation\">(</span>uuid: String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>: User\n        postgresql_getUser<span class=\"token punctuation\">(</span>uuid: String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>: User\n        aurora_getUser<span class=\"token punctuation\">(</span>uuid: String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span>: User\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, we define the schema and point to the <code class=\"language-text\">Query</code> and <code class=\"language-text\">Mutation</code> types:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">    <span class=\"token keyword\">schema</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token attr-name\">query</span><span class=\"token punctuation\">:</span> Query\n        <span class=\"token attr-name\">mutation</span><span class=\"token punctuation\">:</span> Mutation\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>We now have a full description for our new GraphQL API! You can see the whole file <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/schema.gql\">here</a>.</p>\n<h5>Defining handlers for the GraphQL API</h5>\n<p>Now that we have a description of our GraphQL API, we can write the code we need for each query and mutation. We start by creating a <code class=\"language-text\">handler.js</code> file in the root of the project, right next to the <code class=\"language-text\">schema.gql</code> file we created previously.</p>\n<p><code class=\"language-text\">handler.js</code>‚Äôs first job is to read the schema:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token comment\">//We'll need the GraphQL server later on</span>\n\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> GraphQLServerLambda <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"graphql-yoga\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./schema.gql\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">typeDefs</code> constant now holds the definitions for our GraphQL entities. Next, we specify where the code for our functions is going to live. To keep things clear, we‚Äôll create a separate file for each query and mutation:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            mysql_getUser<span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./resolver/Query/mysql_getUser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span>\n            postgresql_getUser<span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./resolver/Query/postgresql_getUser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span>\n            aurora_getUser<span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./resolver/Query/aurora_getUser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>func\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        Mutation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            mysql_createUser<span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./resolver/Mutation/mysql_createUser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span>\n            postgresql_createUser<span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./resolver/Mutation/postgresql_createUser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span>\n            aurora_createUser<span class=\"token operator\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./resolver/Mutation/aurora_createUser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>func\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">resolvers</code> constant now holds the definitions for all our API‚Äôs functions. Our next step is to create the GraphQL server. Remember the <code class=\"language-text\">[graphql-yoga](https://github.com/prisma/graphql-yoga/)</code> library we required above? We‚Äôll use that library here to create a working GraphQL server easily and quickly:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> lambda <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLServerLambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        typeDefs<span class=\"token punctuation\">,</span>\n        resolvers\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally, we export the GraphQL handler along with the <a href=\"https://github.com/prisma/graphql-playground\">GraphQL Playground</a> handler (which will allow us to try out our GraphQL API in a web browser):</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    exports<span class=\"token punctuation\">.</span>server <span class=\"token operator\">=</span> lambda<span class=\"token punctuation\">.</span>graphqlHandler<span class=\"token punctuation\">;</span>\n    exports<span class=\"token punctuation\">.</span>playground <span class=\"token operator\">=</span> lambda<span class=\"token punctuation\">.</span>playgroundHandler<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Okay, we‚Äôre done with the <code class=\"language-text\">handler.js</code> file for now. Next up: writing code for all functions that access the databases.</p>\n<h5>Writing code for the queries and the mutations</h5>\n<p>We now need code to access the databases and to power our GraphQL API. In the root of our project, we create the following structure for our MySQL resolver functions, with the other databases to follow:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">    $ tree\n    <span class=\"token builtin class-name\">.</span>\n    ‚îú‚îÄ‚îÄ handler.js\n    ‚îú‚îÄ‚îÄ resolver\n    ‚îÇ   ‚îú‚îÄ‚îÄ Common\n    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ mysql.js\n    ‚îÇ   ‚îú‚îÄ‚îÄ Mutation\n    ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ mysql_createUser.js\n    ‚îÇ   ‚îî‚îÄ‚îÄ Query\n    ‚îÇ       ‚îî‚îÄ‚îÄ mysql_getUser.js\n    ‚îî‚îÄ‚îÄ schema.gql</code></pre></div>\n<h5>Common queries</h5>\n<p>In the <code class=\"language-text\">Common</code> folder, we populate the <code class=\"language-text\">mysql.js</code> file with what we‚Äôll need for the <code class=\"language-text\">createUser</code> mutation and the <code class=\"language-text\">getUser</code> query: an init query, to create tables for Users and Posts if they don‚Äôt exist yet; and a user query, to return a user‚Äôs data when creating and querying for a user. We‚Äôll use this in both the mutation and the query.</p>\n<p>The init query creates both the Users and the Posts tables as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">exports.init <span class=\"token operator\">=</span> async <span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        await client.query<span class=\"token punctuation\">(</span><span class=\"token variable\"><span class=\"token variable\">`</span>\n        CREATE TABLE IF NOT EXISTS <span class=\"token function\">users</span>\n        <span class=\"token punctuation\">(</span>\n            <span class=\"token function\">id</span> MEDIUMINT UNSIGNED not null AUTO_INCREMENT, \n            created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            uuid char<span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span> not null, \n            name varchar<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> not null, \n            PRIMARY KEY <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token variable\">`</span></span><span class=\"token punctuation\">)</span>\n        await client.query<span class=\"token punctuation\">(</span><span class=\"token variable\"><span class=\"token variable\">`</span>\n        CREATE TABLE IF NOT EXISTS posts\n        <span class=\"token punctuation\">(</span>\n            <span class=\"token function\">id</span> MEDIUMINT UNSIGNED not null AUTO_INCREMENT, \n            created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n            uuid char<span class=\"token punctuation\">(</span><span class=\"token number\">36</span><span class=\"token punctuation\">)</span> not null, \n            text varchar<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> not null, \n            user_id MEDIUMINT UNSIGNED not null,\n            PRIMARY KEY <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token variable\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">getUser</code> query returns the user and their posts:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getUser</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">client<span class=\"token punctuation\">,</span> uuid</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> userFromDb <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">select id, uuid, name from users where uuid = ?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>uuid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userFromDb<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">var</span> postsFromDb <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">select uuid, text from posts where user_id = ?</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>userFromDb<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n        user<span class=\"token punctuation\">.</span><span class=\"token constant\">UUID</span> <span class=\"token operator\">=</span> userFromDb<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>uuid<span class=\"token punctuation\">;</span>\n        user<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> userFromDb<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postsFromDb<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            user<span class=\"token punctuation\">.</span>Posts <span class=\"token operator\">=</span> postsFromDb<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">UUID</span><span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>uuid<span class=\"token punctuation\">,</span> Text<span class=\"token operator\">:</span> x<span class=\"token punctuation\">.</span>text <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Both of these functions are exported; we can then access them in the <code class=\"language-text\">handler.js</code> file.</p>\n<h5>Writing the mutation</h5>\n<p>Time to write the code for the <code class=\"language-text\">createUser</code> mutation, which needs to accept the name of the new user, as well as a list of all posts that belong to them. To do this we create the <code class=\"language-text\">resolver/Mutation/mysql_createUser.js</code> file with a single exported <code class=\"language-text\">func</code> function for the mutation:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> uuidv4 <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'uuid/v4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> common <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../Common/mysql'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> Client <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'serverless-mysql'</span><span class=\"token punctuation\">)</span>\n\n    exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The mutation function needs to do the following things, in order:</p>\n<ol>\n<li>Connect to the database using the credentials in the application‚Äôs environment variables.</li>\n<li>Insert the user into the database using the username, provided as input to the mutation.</li>\n<li>Also insert any posts associated with the user, provided as input to the mutation.</li>\n<li>Return the created user data.</li>\n</ol>\n<p>Here‚Äôs how we accomplish that in code:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> client <span class=\"token operator\">=</span> <span class=\"token function\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            config<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                host<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MYSQL_HOST</span><span class=\"token punctuation\">,</span>\n                database<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_NAME</span><span class=\"token punctuation\">,</span>\n                user<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">USERNAME</span><span class=\"token punctuation\">,</span>\n                password<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PASSWORD</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> common<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// The connection is established at this point - create the user.</span>\n        <span class=\"token keyword\">var</span> userUUID <span class=\"token operator\">=</span> <span class=\"token function\">uuidv4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INTO users (uuid, name) VALUES(?,?)'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>userUUID<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// And now create the user's posts.</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> index <span class=\"token operator\">&lt;</span> obj<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>Posts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> index<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span>Posts<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INSERT INTO posts (uuid, text, user_id) VALUES(?, ?, ?)'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">[</span><span class=\"token function\">uuidv4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">.</span>insertId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// Return the User model that we have already defined</span>\n        <span class=\"token comment\">// in the Common namespace.</span>\n        <span class=\"token keyword\">var</span> resp <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> common<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> userUUID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// Close the connection.</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can see the full file that defines the mutation <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/resolver/Mutation/mysql_createUser.js\">here</a>.</p>\n<h5>Writing the query</h5>\n<p>The <code class=\"language-text\">getUser</code> query has a structure similar to the mutation we just wrote, but this one‚Äôs even simpler. Now that the <code class=\"language-text\">getUser</code> function is in the Common namespace, we no longer need any custom SQL in the query. So, we create the <code class=\"language-text\">resolver/Query/mysql_getUser.js</code> file as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> common <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../Common/mysql'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> Client <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'serverless-mysql'</span><span class=\"token punctuation\">)</span>\n\n    exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">func</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> uuid <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> client <span class=\"token operator\">=</span> <span class=\"token function\">Client</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            config<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                host<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MYSQL_HOST</span><span class=\"token punctuation\">,</span>\n                database<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">DB_NAME</span><span class=\"token punctuation\">,</span>\n                user<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">USERNAME</span><span class=\"token punctuation\">,</span>\n                password<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">PASSWORD</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> common<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">var</span> resp <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> common<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">,</span> uuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">quit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> resp<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can see the full query in <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/resolver/Query/mysql_getUser.js\">this file</a>.</p>\n<h5>Bringing everything together in the serverless.yml file</h5>\n<p>Let‚Äôs take a step back. We currently have the following:</p>\n<ul>\n<li>A GraphQL API schema.</li>\n<li>A <code class=\"language-text\">handler.js</code> file.</li>\n<li>A file for common database queries.</li>\n<li>A file for each mutation and query.</li>\n</ul>\n<p>The last step is to connect all this together via the <code class=\"language-text\">serverless.yml</code> file. We create an empty <code class=\"language-text\">serverless.yml</code> at the root of the project and start by defining the provider, the region and the runtime. We also apply the <code class=\"language-text\">LambdaRole</code> <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html\">IAM role</a> (which we define later <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/resource/LambdaRole.yml\">here</a>) to our project:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n      <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n      <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n      <span class=\"token key atrule\">memorySize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">256</span>\n      <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs8.10\n      <span class=\"token key atrule\">role</span><span class=\"token punctuation\">:</span> LambdaRole</code></pre></div>\n<p>We then define the environment variables for the database credentials:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">...</span>\n        <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\">#mysql</span>\n        <span class=\"token key atrule\">MYSQL_HOST</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.MYSQL.HOST<span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">MYSQL_PORT</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.MYSQL.PORT<span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">#common</span>\n        <span class=\"token key atrule\">DB_NAME</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.DB_NAME<span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">USERNAME</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.USERNAME<span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">PASSWORD</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.PASSWORD<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Notice that all the variables reference the <code class=\"language-text\">custom</code> section, which comes next and holds the actual values for the variables. Note that <code class=\"language-text\">password</code> is a terrible password for your database and should be changed to something more secure (perhaps  <code class=\"language-text\">p@ssw0rd</code> üòÉ):</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">DB_NAME</span><span class=\"token punctuation\">:</span> graphql\n      <span class=\"token key atrule\">USERNAME</span><span class=\"token punctuation\">:</span> master\n      <span class=\"token key atrule\">PASSWORD</span><span class=\"token punctuation\">:</span> password\n      <span class=\"token key atrule\">MYSQL</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">HOST</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">Fn::GetAtt</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>MySqlRDSInstance<span class=\"token punctuation\">,</span> Endpoint.Address<span class=\"token punctuation\">]</span>\n        <span class=\"token key atrule\">PORT</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">Fn::GetAtt</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>MySqlRDSInstance<span class=\"token punctuation\">,</span> Endpoint.Port<span class=\"token punctuation\">]</span></code></pre></div>\n<p>What are those references after <code class=\"language-text\">Fn::GettAtt</code>, you ask? Those refer to database resources:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Resources</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">...</span>\n        <span class=\"token key atrule\">MySqlRDSInstance</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>file(./resource/MySqlRDSInstance.yml)<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">...</span></code></pre></div>\n<p>The <code class=\"language-text\">resource/MySqlRDSInstance.yml</code> file defines all the attributes of the MySQL instance. You can find its full content <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/resource/MySqlRDSInstance.yml\">here</a>.</p>\n<p>Finally, in the <code class=\"language-text\">serverless.yml</code> file we define two functions, <code class=\"language-text\">graphql</code> and <code class=\"language-text\">playground</code>. The <code class=\"language-text\">graphql</code> function is going to handle all the API requests, and the <code class=\"language-text\">playground</code> endpoint will create an instance of <a href=\"https://github.com/prisma/graphql-playground\">GraphQL Playground</a> for us, which is a great way to try out our GraphQL API in a web browser:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">graphql</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.server\n        <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /\n              <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> post\n              <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n      <span class=\"token key atrule\">playground</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.playground\n        <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /\n              <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get\n              <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>Now MySQL support for our application is complete!</p>\n<p>You can find the full contents of the <code class=\"language-text\">serverless.yml</code> file <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/serverless.yml\">here</a>.</p>\n<h5>Adding Aurora and PostgreSQL support</h5>\n<p>We‚Äôve already created all the structure we need to support other databases in this project. To add support for Aurora and Postgres, we need only define the code for their mutations and queries, which we do as follows:</p>\n<ol>\n<li>Add a Common queries file <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/resolver/Common/aurora.js\">for Aurora</a> and <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/resolver/Common/postgresql.js\">for Postgres</a>.</li>\n<li>Add the <code class=\"language-text\">createUser</code> mutation for <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/resolver/Mutation/aurora_createUser.js\">both</a> <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/resolver/Mutation/postgresql_createUser.js\">databases</a>.</li>\n<li>Add the <code class=\"language-text\">getUser</code> query for <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/resolver/Query/aurora_getUser.js\">both</a> <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/resolver/Query/postgresql_getUser.js\">databases</a>.</li>\n<li>Add configuration <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/serverless.yml\">in the</a> <code class=\"language-text\">[serverless.yml](https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/serverless.yml)</code> <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/serverless.yml\">file</a> for all the environment variables and resources needed for both databases.</li>\n</ol>\n<p>At this point, we have everything we need to deploy our GraphQL API, powered by MySQL, Aurora, and PostgreSQL.</p>\n<h4>Deploying and testing the GraphQL API</h4>\n<p>Deployment of our GraphQL API is simple. </p>\n<ul>\n<li>First we run <code class=\"language-text\">npm install</code> to put our dependencies in place.</li>\n<li>Then we run <code class=\"language-text\">npm run deploy</code>, which sets up all our environment variables and performs the deployment.</li>\n<li>Under the hood, this command <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/package.json#L8\">runs</a> <code class=\"language-text\">[serverless deploy](https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/package.json#L8)</code> using the right environment.</li>\n</ul>\n<p>That‚Äôs it! In the output of the <code class=\"language-text\">deploy</code> step we‚Äôll see the URL endpoint for our deployed application. We can issue <code class=\"language-text\">POST</code> requests to our GraphQL API using this URL, and our Playground (which we‚Äôll play with in a second) is available using <code class=\"language-text\">GET</code>  against the same URL.</p>\n<h5>Trying out the API in the GraphQL Playground</h5>\n<p>The GraphQL Playground, which is what you see when visiting that URL in the browser, is a great way to try out our API.</p>\n<p><img src=\"https://paper-attachments.dropbox.com/s_B0AB78BD3022AE2E372BFB270964A91816C4912D864B2145B085434E68E2CD3E_1560758568644_graphql.gif\"></p>\n<p>Let‚Äôs create a user by running the following mutation:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">    <span class=\"token keyword\">mutation</span> <span class=\"token punctuation\">{</span>\n      mysql_createUser<span class=\"token punctuation\">(</span>\n        <span class=\"token attr-name\">input</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token attr-name\">Name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Cicero\"</span>\n          <span class=\"token attr-name\">Posts</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">Text</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\"</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span> <span class=\"token attr-name\">Text</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Proin consequat mauris orci, ut consequat purus efficitur vel.\"</span> <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Name\n        <span class=\"token constant\">UUID</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this mutation, we call the <code class=\"language-text\">mysql_createUser</code> API, supply the text of the new user‚Äôs posts, and indicate that we want to get the user‚Äôs name and the UUID back as the response.</p>\n<p>Paste the above text into the left side of the Playground and click the Play button. On the right, you‚Äôll see the output of the query:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"mysql_createUser\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token property\">\"Name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Cicero\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token property\">\"UUID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"66c31372-5b2b-4848-8667-387a0321622b\"</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now let‚Äôs query for this user:</p>\n<div class=\"gatsby-highlight\" data-language=\"graphql\"><pre class=\"language-graphql\"><code class=\"language-graphql\">    <span class=\"token keyword\">query</span> <span class=\"token punctuation\">{</span>\n      mysql_getUser<span class=\"token punctuation\">(</span><span class=\"token attr-name\">uuid</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"f5593682-6bf1-466a-967d-98c7e9da844b\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Name\n        <span class=\"token constant\">UUID</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>This gives us back the name and the UUID of the user we just created. Neat!</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"mysql_getUser\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token property\">\"Name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Cicero\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token property\">\"UUID\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"66c31372-5b2b-4848-8667-387a0321622b\"</span>\n    <span class=\"token punctuation\">}</span>\n  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can do the same with the other backends, PostgreSQL and Aurora. For that, we just need to replace the names of the mutation with <code class=\"language-text\">postgres_createUser</code> or <code class=\"language-text\">aurora_createUser</code>, and queries with <code class=\"language-text\">postgres_getUser</code> or <code class=\"language-text\">aurora_getUser</code>. Try it out yourself! (Keep in mind that the users are not synced between the databases, so you‚Äôll only be able to query for users that you‚Äôve created in each specific database.)</p>\n<h4>Comparing the MySQL, PostgreSQL, and Aurora implementations</h4>\n<p>To begin with, mutations and queries look exactly the same on <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/resolver/Mutation/aurora_createUser.js\">Aurora</a> and <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/resolver/Mutation/aurora_createUser.js\">MySQL</a>, since Aurora is MySQL-compatible. And there are only <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/resolver/Mutation/postgresql_createUser.js\">minimal code differences</a> between those two and the Postgres implementation.</p>\n<p>In fact, for simple use cases, the biggest difference between our three databases is that Aurora is available only as a cluster. The smallest available Aurora configuration still includes one read-only and one write replica, so we need a <a href=\"https://github.com/serverless/examples/blob/master/aws-node-graphql-and-rds/serverless.yml#L64-L67\">clustered configuration</a> even for this basic Aurora deployment.</p>\n<p>Aurora offers <a href=\"https://aws.amazon.com/rds/aurora/\">faster performance</a> than MySQL and PostgreSQL, due mainly to the SSD optimizations Amazon made to the database engine. As your project grows, you‚Äôll likely find that Aurora offers improved database scalability, easier maintenance, and better reliability compared to the default MySQL and PostgreSQL configurations. But you can make some of these improvements on MySQL and PostgreSQL as well if you tune your databases and add replication.</p>\n<p>For test projects and playgrounds we recommend MySQL or PostgreSQL. These can run on <code class=\"language-text\">db.t2.micro</code> RDS instances, which are part of the <a href=\"https://aws.amazon.com/free\">AWS free tier</a>. Aurora doesn‚Äôt currently offer <code class=\"language-text\">db.t2.micro</code> instances, so you‚Äôll pay a bit more to use Aurora for this test project.</p>\n<h4>A final important note</h4>\n<p>Remember to <strong>remove your Serverless deployment</strong> once you‚Äôve finished trying out the GraphQL API so that you don‚Äôt keep paying for database resources you‚Äôre no longer using.</p>\n<p>You can remove the stack created in this example by running <code class=\"language-text\">npm run remove</code> in the root of the project.</p>\n<p>Happy experimenting!</p>\n<h4>Summary</h4>\n<p>In this article we walked you through creating a simple GraphQL API, using three different databases at once; though this isn‚Äôt something you‚Äôd ever do in reality, it allowed us to compare simple implementations of the Aurora, MySQL, and PostgreSQL databases. We saw that the implementation for all three databases is roughly the same in our simple case, barring minor differences in the syntax and the deployment configurations.</p>\n<p>You can find the full example project that we‚Äôve been using <a href=\"https://github.com/serverless/examples/tree/master/aws-node-graphql-and-rds\">in this GitHub repo</a>. The easiest way to experiment with the project is to clone the repo and deploy it from your machine using <code class=\"language-text\">npm run deploy</code>.</p>\n<p>For more GraphQL API examples using Serverless, check out the <a href=\"https://github.com/serverless/serverless-graphql\">serverless-graphql</a> repo.</p>\n<p>If you‚Äôd like to learn more about running Serverless GraphQL APIs at scale, you might enjoy our article series <a href=\"https://serverless.com/blog/running-scalable-reliable-graphql-endpoint-with-serverless/\">‚ÄúRunning a scalable &#x26; reliable GraphQL endpoint with Serverless‚Äù</a></p>\n<p>Maybe GraphQL just isn‚Äôt your jam, and you‚Äôd rather deploy a REST API? We‚Äôve got you covered: check out <a href=\"https://serverless.com/blog/serverless-express-rest-api/\">this blog post</a> for some examples.</p>\n<p>Questions? Comment on this post, or create a discussion <a href=\"https://forum.serverless.com/\">in our forum</a>.</p>","frontmatter":{"title":"How to Create a Serverless GraphQL API for MySQL, Postgres and Aurora","date":"July 02, 2019","description":"Learn how you can build a serverless GraphQL API for MySQL, Postgres and Aurora DB."}}},"pageContext":{"slug":"/posts/2019-07-02-graphql-api-mysql-postgres-aurora/","previous":{"fields":{"slug":"/posts/2019-07-01-framework-release-v146/"},"frontmatter":{"title":"Serverless Framework v1.46.0 - Extended ALB configurability, Support for external Websocket APIs, Local plugins via relative paths & More"}},"next":{"fields":{"slug":"/posts/2019-07-08-dynamic-image-resizing-ruby/"},"frontmatter":{"title":"Dynamic image resizing with Ruby and Serverless framework"}}}}}
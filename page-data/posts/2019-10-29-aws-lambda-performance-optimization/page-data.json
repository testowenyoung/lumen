{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2019-10-29-aws-lambda-performance-optimization/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"683d27fb-0cd2-523e-8aa2-02e2546266cc","excerpt":"Serverless applications are highly distributed, where each function performs a focused task and depends on countless other services for the remainder. For…","html":"<p>Serverless applications are highly distributed, where each function performs a focused task and depends on countless other services for the remainder. For example, a REST API endpoint with a lambda function will have relatively little code, but it will have dependencies on other services like:</p>\n<ul>\n<li>Invoking other functions which provide shared logic across your service</li>\n<li>Interacting with infrastructure services like SES, SNS and DynamoDB</li>\n<li>Calling services like Stripe or Twilio using client SDKs</li>\n<li>Querying a database like RDS using an ORM like Sequelize</li>\n</ul>\n<p>If the REST API endpoint performance is degraded, it can be incredibly challenging to identify the root cause as it may be tied to the function code or to any one of the countless dependencies. As your applications grow, so do the service dependencies and the possible root causes of performance issues.</p>\n<p>To troubleshoot the performance of a AWS Lambda function, we need traces and spans that show us the transaction time of each dependency.</p>\n<p>Serverless Framework Pro provides both zero-config / zero-code automatic instrumentation and custom instrumentation to capture spans of the calls to dependent services. Your code is automatically instrumented for you and the Serverless Framework Dashboard provides a powerful invocation explorer to drill into and visualize span details.</p>\n<p>Let’s have a look at how automatic AWS and HTTP instrumentation works, and how you can use custom spans for all other cases. While the examples are all node-js based, this is also automatically supported for Python, with other runtimes coming soon.</p>\n<h4>Automatic AWS Spans</h4>\n<p>One of the first challenges of troubleshooting performance issues is instrumentation. You have to identify all possible calls to dependent services and instrument the spans. In Serverless Framework services, the most common dependencies are AWS services like DynamoDB, SES, SQS, and S3.</p>\n<p>In the example below, we use the AWS SDK to call the invoke method to invoke another lambda function. The call to <code class=\"language-text\">lambda.invoke</code>, is automatically instrumented to capture the AWS SDK method and the time span information. Without any modification to our usage of the AWS SDK, the calls are all automatically instrumented.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  context<span class=\"token punctuation\">.</span><span class=\"token function\">span</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some-label'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* request details */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  lambda<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// an error occurred</span>\n   <span class=\"token keyword\">else</span>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// successful response</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Automatic HTTP Spans</h4>\n<p>In addition to automatically instrumenting spans in the AWS SDK, all HTTP spans are also automatically instrumented. For example, below we use the Stripe API to process a charge. Under the hood, the Stripe API key makes HTTPS API calls to Stripe. The Serverless Framework automatically instruments those API calls and captures the span details (start time / end time / duration), HTTP Status, HTTP method, response code, host name, and path. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> stripe <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'stripe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">STRIPE_SECRET_KEY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> requestBody <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> stripe<span class=\"token punctuation\">.</span>charges<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// Create Stripe charge with token</span>\n    requestBody<span class=\"token punctuation\">.</span>charge<span class=\"token punctuation\">.</span>amount<span class=\"token punctuation\">,</span>\n    currency<span class=\"token operator\">:</span> <span class=\"token string\">'usd'</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">:</span> <span class=\"token string\">'Serverless Stripe Test charge'</span><span class=\"token punctuation\">,</span>\n    source<span class=\"token operator\">:</span> requestBody<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">charge</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* success response */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* error response */</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>Custom Span Instrumentation</h4>\n<p>In the majority of the cases, when troubleshooting performance issues, the automatic AWS and HTTP instrumentation will be sufficient. However, to get full coverage of your serverless application, we may need to add custom instrumentation.</p>\n<p>For example, if you use an ORM like Sequelize to call RDS, this will not use the AWS SDK or HTTP. In this case, we’ll add custom span instrumentation.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">span</span><span class=\"token punctuation\">(</span><span class=\"token string\">'some-label'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// The execution of this function is captured as a span.</span>\n    <span class=\"token comment\">// It is automatically invoked with no arguments and awaited.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">context.span</code> method allows us to decorate an async call which we want to instrument.</p>\n<h4>Spans in the Dashboard</h4>\n<p>Now that you’ve instrumented your lambda functions to capture spans, let’s take a peek at what our data looks in the dashboard.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/tracing-and-spans/spans-in-dashboard.png\" alt=\"Spans in dashboard\"></p>\n<p>At Serverless, we love to dogfood - this is a screenshot of one of the services that powers the <a href=\"https://serverless.com/dashboard\">Serverless Framework Dashboard</a>. You can see the duration, invocation details, and the span data in a single view. If your service was experiencing any kind of latency issues, you’d immediately see the dependency with the longest duration. </p>\n<h4>Get Started</h4>\n<p>To get started, first make sure you are on the latest version of the Serverless Framework, which you can install with <code class=\"language-text\">npm install serverless --global</code>. Even though the framework itself is written in  Node, the dashboard supports Python too. If you don’t have a Serverless Framework account, register at <a href=\"https://dashboard.serverless.com/\">https://dashboard.serverless.com/</a>, and if you haven’t yet logged in, run <code class=\"language-text\">sls login</code> on the CLI to login.</p>\n<p>Now run <code class=\"language-text\">sls</code> in your working directory. If you are new to Serverless Framework, this will start a new project. If you are running it from within an existing Serverless Framework project, then this will update your <code class=\"language-text\">serverless.yml</code> to work with the Dashboard and enable monitoring and tracing spans.</p>\n<p>Now deploy with <code class=\"language-text\">sls deploy</code> and you’ll immediately start seeing the invocations and spans in the dashboard as soon you invoke the functions.</p>\n<p>No additional configuration or instrumentation is needed, Serverless Framework monitoring and spans work out of the box. If you want to add custom spans these <a href=\"https://serverless.com/framework/docs/dashboard/sdk/nodejs#span\">Node.js docs</a> and <a href=\"https://serverless.com/framework/docs/dashboard/sdk/python/\">Python docs</a> will help you out.</p>","frontmatter":{"title":"AWS Lambda Performance Optimization & Monitoring with Tracing & Spans (Serverless Framework Pro)","date":"October 29, 2019","description":"To troubleshoot the performance of an AWS Lambda function, we need the transaction time of each dependency. Come see how we do that with Serverless Framework Pro"}}},"pageContext":{"slug":"/posts/2019-10-29-aws-lambda-performance-optimization/","previous":{"fields":{"slug":"/posts/2019-10-23-cron-jobs-on-aws/"},"frontmatter":{"title":"Creating, monitoring, and testing cron jobs on AWS"}},"next":{"fields":{"slug":"/posts/2019-10-31-aws-lambda-vs-ec2-for-cron-jobs/"},"frontmatter":{"title":"Running cron jobs in the cloud - Amazon EC2 vs AWS Lambda"}}}}}
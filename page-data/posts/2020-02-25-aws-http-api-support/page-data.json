{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2020-02-25-aws-http-api-support/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"68abf50a-0430-5a4a-b1f6-998bfd93d0ae","excerpt":"AWS HTTP API support just landed! Example serverless.yml HTTP API configuration By introducing the HTTP API service (still in beta) last December, AWS offered…","html":"<h2>AWS HTTP API support just landed!</h2>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/2020-02-http-api-v2/http-api-example.png\" alt=\"Example serverless.yml HTTP API configuration\"></p>\n<p>By introducing the <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html\">HTTP API</a> service (still in beta) last December, AWS offered us a lighter, <a href=\"https://aws.amazon.com/api-gateway/pricing/#HTTP_APIs_.28Preview.29\">cheaper</a>, faster and in general better designed alternative to REST APIs. More importantly, HTTP API is way easier to configure and can also be created by <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-import.html\">importing an Open API</a> definition file. What’s not to love?</p>\n<h2>How HTTP APIs are different from REST APIs?</h2>\n<p>HTTP APIs truly embody the “less is more” ethos — they have fewer configuration options but support catch-all routing (which is not possible with REST APIs), built in JWT authorization, global rules for CORS headers and automatic deployments which make the deployment of production APIs dead simple. </p>\n<p>At this point, we can direct endpoints to either trigger AWS Lambda or to another URL endpoint, but there’s no integration with other AWS services.</p>\n<p>With that said, HTTP APIs are still in beta and have several limitations as highlighted below:</p>\n<ul>\n<li>No support for Usage plans and API Keys as with REST APIs.</li>\n<li>No wildcard subdomains</li>\n<li>Request and response transformation non existent</li>\n<li>No caching, validation etc. (have to be implemented in lambda logic)</li>\n<li>Cannot deploy edge-optimized or private API’s. All deployments are regional and public</li>\n<li>While we can enable simple access logs and receive CloudWatch metrics, there is no AWS X-Ray support or ability to propagate logs to Kinesis Data Firehose </li>\n</ul>\n<p>For full outline of differences see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html\">Choosing Between HTTP APIs and REST APIs</a> section in AWS documentation. However, the service is fast improving and as it moves towards GA, we expect a lot of these to be addressed.</p>\n<h2>How to configure a Rest API backed by HTTP API with Serverless Framework?</h2>\n<p>As HTTP API differs from API Gateway in many parts, and only very basic Rest API configuration, can be easily translated from API Gateway to HTTP API, we decided to propose a new event (httpApi) for HTTP API case, which should be attached to functions in the traditional way:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">someFunction</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> someFunction.handler\n      <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">httpApi</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">...</span>.</code></pre></div>\n<h3>Configuring Routes</h3>\n<p>Configuring a basic route for a specific method is as simple as:</p>\n<p><code class=\"language-text\">httpApi: GET /get-something</code></p>\n<p>Your API Gateway path can also include parameters:</p>\n<p><code class=\"language-text\">httpApi: GET /get-something/{param}</code></p>\n<p>We can also configure a method catch-all route for a specific path:</p>\n<p><code class=\"language-text\">httpApi: * /get-something</code></p>\n<p>Or define one catch-all route, and handle all request from scope of single lambda function:</p>\n<p><code class=\"language-text\">httpApi: *</code></p>\n<p><em>Note: When configuring catch-all route, you may still redirect requests for specific paths to different lambdas by configuring intended dedicated routes</em></p>\n<p>If there’s a need to customize the <code class=\"language-text\">httpApi</code> event further (with configuration options mentioned below), then event configuration should be outlined in object form as below:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">httpApi</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> GET\n  <span class=\"token key atrule\">route</span><span class=\"token punctuation\">:</span> /get<span class=\"token punctuation\">-</span>something</code></pre></div>\n<h3>Configuring JWT authorizers</h3>\n<p>When configuring plain routes, we configure a publicly accessible API. If there’s a need to restrict access to whole API or some endpoint, we must rely on JWT authorizers, as currently it’s the only access restriction method currently supported by HTTP API. Fortunately, AWS Cognito User Pools are perfectly suited to this purpose. </p>\n<p>To add User Pools, we need to configure authorizers in the provider.httpApi.authorizers section, where we list JWT authorizers by name as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">httpApi</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">authorizers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">someAuthorizer</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># Point request header at which JWT token will be provided</span>\n        <span class=\"token key atrule\">identitySource</span><span class=\"token punctuation\">:</span> $request.header.Authorization\n        <span class=\"token comment\"># Issuer url, in case of Cognito User Pools url will be like: </span>\n        <span class=\"token comment\"># https://cognito-idp.${region}.amazonaws.com/${cognitoPoolId}</span>\n        <span class=\"token key atrule\">issuerUrl</span><span class=\"token punctuation\">:</span> &lt;url<span class=\"token punctuation\">></span>\n        <span class=\"token comment\"># Audience for which access is intended</span>\n        <span class=\"token comment\"># In case of Cognito User Pools we need to list client ids</span>\n        <span class=\"token key atrule\">audience</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> &lt;audience1<span class=\"token punctuation\">></span>\n          <span class=\"token punctuation\">-</span> &lt;audience2<span class=\"token punctuation\">></span></code></pre></div>\n<p>Having that, we need to indicate endpoints for which we want to restrict access with configured authorizers:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">someFunction</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> someFunction.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">httpApi</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> GET\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /some<span class=\"token punctuation\">-</span>function\n          <span class=\"token key atrule\">authorizer</span><span class=\"token punctuation\">:</span> someAuthorizer</code></pre></div>\n<p>If we need to provide authorization scopes, then endpoint configuration should be extended as:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">someFunction</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> someFunction.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">httpApi</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> GET\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /some<span class=\"token punctuation\">-</span>function\n          <span class=\"token key atrule\">authorizer</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> someAuthorizer\n            <span class=\"token key atrule\">scopes</span><span class=\"token punctuation\">:</span>\n              <span class=\"token punctuation\">-</span> user.id\n              <span class=\"token punctuation\">-</span> user.email</code></pre></div>\n<h3>Configuring CORS</h3>\n<p>If you intend to consume API endpoints in a browser then most likely you need CORS headers. CORS headers can be configured just globally for all API endpoints, and in Serverless Framework you may configure them in two ways.</p>\n<p>The first one is to set following and rely on Framework defaults:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">httpApi</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>It’ll ensure following headers:</p>\n<ul>\n<li><code class=\"language-text\">Access-Control-Allow-Origin</code>: <code class=\"language-text\">*</code></li>\n<li>\n<p><code class=\"language-text\">Access-Control-Allow-Headers</code>:</p>\n<ul>\n<li><code class=\"language-text\">Content-Type</code>, <code class=\"language-text\">X-Amz-Date</code>, <code class=\"language-text\">Authorization</code>, <code class=\"language-text\">X-Api-Key</code>, <code class=\"language-text\">X-Amz-Security-Token</code>, <code class=\"language-text\">X-Amz-User-Agent</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">Access-Control-Allow-Methods</code>: </p>\n<ul>\n<li><code class=\"language-text\">OPTIONS</code>, and all the methods defined in your routes (<code class=\"language-text\">GET</code>, <code class=\"language-text\">POST</code>, etc.)</li>\n</ul>\n</li>\n</ul>\n<p>If you need more fine grain customization you can configure each header individually with following setup:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">httpApi</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">allowedOrigins</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//url1.com\n        <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//url2.com\n      <span class=\"token key atrule\">allowedHeaders</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> Content<span class=\"token punctuation\">-</span>Type\n        <span class=\"token punctuation\">-</span> Authorization\n      <span class=\"token key atrule\">allowedMethods</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> GET\n      <span class=\"token key atrule\">allowCredentials</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n      <span class=\"token key atrule\">exposedResponseHeaders</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> Special<span class=\"token punctuation\">-</span>Response<span class=\"token punctuation\">-</span>Header\n      <span class=\"token key atrule\">maxAge</span><span class=\"token punctuation\">:</span> <span class=\"token number\">6000</span> <span class=\"token comment\"># In seconds</span></code></pre></div>\n<p><em>Note: Any not configured header will fallback to Framework default</em></p>\n<h2>What’s Next?</h2>\n<p>HTTP APIs are subject for further extensions in the framework. Notably the ability to configure access logs and ability to share the same API across different services will be published soon. We are also planning to add an option to reference an Open API spec in your <code class=\"language-text\">serverless.yml</code> functions config.</p>\n<p>Please follow <a href=\"https://github.com/serverless/serverless/issues/7052\">this GitHub issue</a> for updates. If you approach any issues or want to propose an improvement do not hesitate sharing that by either commenting under this issue or opening a new dedicated report.</p>\n<p>Have fun! We hope that introducing support for AWS HTTP API in Serverless Framework will springboard your serverless development process and we can’t wait to see what you build with it!</p>","frontmatter":{"title":"Announcing Support for AWS HTTP APIs","date":"February 25, 2020","description":"The Serverless Framework now supports the AWS HTTP API - the v2 of API Gateway for HTTP APIs."}}},"pageContext":{"slug":"/posts/2020-02-25-aws-http-api-support/","previous":{"fields":{"slug":"/posts/2020-02-17-stages-and-environments/"},"frontmatter":{"title":"Managing Stages and Environments"}},"next":{"fields":{"slug":"/posts/2020-02-27-serverless-auth-with-aws-http-apis/"},"frontmatter":{"title":"Serverless Auth with AWS HTTP APIs"}}}}}
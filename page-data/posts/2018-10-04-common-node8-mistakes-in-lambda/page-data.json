{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-10-04-common-node8-mistakes-in-lambda/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"7532fffa-f0e4-511c-ab11-9f8011a24183","excerpt":"It’s been 6 months since AWS Lambda added support Node.js 8.10. I’m super happy that I can finally use  to simplify my Lambda functions.  In the meantime, I…","html":"<p>It’s been 6 months since <a href=\"https://serverless.com/aws-lambda/\">AWS Lambda</a> added support Node.js 8.10. I’m super happy that I can finally use <code class=\"language-text\">async/await</code> to <a href=\"https://serverless.com/blog/aws-lambda-node-8-support-what-changes-serverless-developers/\">simplify my Lambda functions</a>. </p>\n<p>In the meantime, I have helped a few clients with their Node8 serverless projects. In doing so I have seen some recurring mistakes around <code class=\"language-text\">async/await</code>.</p>\n<h4>Still using callbacks</h4>\n<p>Many people are still using the callbacks in their <code class=\"language-text\">async</code> handler functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>instead of the simpler alternative:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> response\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Not using promisify</h4>\n<p>Before Node8, <a href=\"http://bluebirdjs.com/docs/getting-started.html\">bluebird</a> filled a massive gap. It provided the utility to convert callback-based functions to promise-based. But Node8’s built-in <code class=\"language-text\">util</code> module has filled that gap with the <code class=\"language-text\">promisify</code> function.</p>\n<p>For example, we can now transform the <code class=\"language-text\">readFile</code> function from the <code class=\"language-text\">fs</code> module like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> promisify <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'util'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> readFile <span class=\"token operator\">=</span> <span class=\"token function\">promisify</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span>readFile<span class=\"token punctuation\">)</span></code></pre></div>\n<p>No need to use bluebird anymore. That’s one less dependency, which helps reduce the cold start time for our functions.</p>\n<h4>Too sequential</h4>\n<p><code class=\"language-text\">async/await</code> lets you write asynchronous code as if they’re synchronous, which is awesome. No more dealing with callback hell!</p>\n<p>On the flip side, we can also miss a trick and not perform tasks concurrently where appropriate.</p>\n<p>Take the following code as example:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getFixturesAndTeam</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">teamId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fixtures <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fixtureModel<span class=\"token punctuation\">.</span><span class=\"token function\">fetchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> team <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> teamModel<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>teamId<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    team<span class=\"token punctuation\">,</span>\n    fixtures<span class=\"token operator\">:</span> fixtures<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>teamId <span class=\"token operator\">===</span> teamId<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This function is easy to follow, but it’s hardly optimal. <code class=\"language-text\">teamModel.fetch</code> doesn’t depend on the result of <code class=\"language-text\">fixtureModel.fetchAll</code>, so they should run concurrently. </p>\n<p>Here is how you can improve it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getFixturesAndTeam</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">teamId</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> fixturesPromise <span class=\"token operator\">=</span> fixtureModel<span class=\"token punctuation\">.</span><span class=\"token function\">fetchAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> teamPromise <span class=\"token operator\">=</span> teamModel<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>teamId<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> fixtures <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> fixturesPromise\n  <span class=\"token keyword\">const</span> team <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> teamPromise\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    team<span class=\"token punctuation\">,</span>\n    fixtures<span class=\"token operator\">:</span> fixtures<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>teamId <span class=\"token operator\">===</span> teamId<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this version, both <code class=\"language-text\">fixtureModel.fetchAll</code> and <code class=\"language-text\">teamModel.fetch</code> are started concurrently.</p>\n<p>You also need to watch out when using <code class=\"language-text\">map</code> with <code class=\"language-text\">async/await</code>. The following will call <code class=\"language-text\">teamModel.fetch</code> one after another:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getTeams</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">teamIds</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> teams <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>teamIds<span class=\"token punctuation\">,</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">await</span> teamModel<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> teams\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Instead, you should write it as the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getTeams</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">teamIds</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>teamIds<span class=\"token punctuation\">,</span> <span class=\"token parameter\">id</span> <span class=\"token operator\">=></span> teamModel<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> teams <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> teams\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this version we map <code class=\"language-text\">teamIds</code> to an array of <code class=\"language-text\">Promise</code>. We can then use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\"><code class=\"language-text\">Promise.all</code></a> to turn this array into a single <code class=\"language-text\">Promise</code> that returns an array of teams. </p>\n<p>In this case, <code class=\"language-text\">teamModel.fetch</code> is called concurrently and can significantly improve execution time.</p>\n<h4>async/await inside forEach()</h4>\n<p>This is a tricky one, and can sometimes catch out even experienced Node.js developers.</p>\n<p>The problem is that code like this doesn’t behave the way you’d expect it to:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'all done.'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When you run this you’ll get the following output:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">all done.</code></pre></div>\n<p>See <a href=\"https://codeburst.io/javascript-async-await-with-foreach-b6ba62bbf404\">this post</a> for a longer explanation about why this doesn’t work. For now, just remember to <strong>avoid using <code class=\"language-text\">async/await</code> inside a <code class=\"language-text\">forEach</code></strong>!</p>\n<h4>Not using AWSSDK’s .promise()</h4>\n<p>Did you know that the AWS SDK clients support both callbacks and promises? To use <code class=\"language-text\">async/await</code> with the AWS SDK, add <code class=\"language-text\">.promise()</code> to client methods like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> Lambda <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>Lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">invokeLambda</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">functionName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> req <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    FunctionName<span class=\"token operator\">:</span> functionName<span class=\"token punctuation\">,</span>\n    Payload<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">await</span> Lambda<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>No more callback functions, yay!</p>\n<h4>Wrap-up</h4>\n<p>That’s it, 5 common mistakes to avoid when working with Node.js 8.10 in Lambda. For more tips on building production-ready serverless applications and operational best practices, check out my <a href=\"https://bit.ly/production-ready-serverless\">video course</a>. ;-)</p>\n<h5>Further reading:</h5>\n<ul>\n<li><a href=\"https://serverless.com/blog/aws-lambda-node-8-support-what-changes-serverless-developers/\">AWS Lambda Node8 support: what it changes for serverless developers</a></li>\n</ul>","frontmatter":{"title":"Common Node8 mistakes in Lambda","date":"October 04, 2018","description":"Here are some common mistakes people make when authoring Lambda functions with Node.js 8.10."}}},"pageContext":{"slug":"/posts/2018-10-04-common-node8-mistakes-in-lambda/","previous":{"fields":{"slug":"/posts/2018-09-16-keeping-culture-remote-culture/"},"frontmatter":{"title":"Keeping the culture in remote culture"}},"next":{"fields":{"slug":"/posts/2018-10-11-cloudtrail-security/"},"frontmatter":{"title":"Using AWS CloudTrail to enhance your serverless application security"}}}}}
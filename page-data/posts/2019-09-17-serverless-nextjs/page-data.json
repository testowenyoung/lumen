{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2019-09-17-serverless-nextjs/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"3f85cd8c-60f3-5d77-a5d7-914b9aa12aab","excerpt":"Today, I’m excited to announce a project I’ve been working on over the past few months. It provides a simple, fast and efficient way to deploy your Next.js…","html":"<p>Today, I’m excited to announce a project I’ve been working on over the past few months. It provides a simple, fast and efficient way to deploy your Next.js applications to AWS using CloudFront, Lambda@Edge and S3.</p>\n<p>The project is the <strong><a href=\"https://github.com/danielcondemarin/serverless-next.js/tree/master/packages/serverless-nextjs-component\">Serverless Next.js Component</a></strong> which you can use with the <strong><a href=\"https://github.com/serverless/serverless\">Serverless Framework</a></strong> to deploy Next.js apps to AWS Lambda@Edge functions in every CloudFront edge location across the globe. These Lambda@Edge functions do server-side rendering of your website pages, as close as possible to your end users, providing very low latency.</p>\n<h4>Principles</h4>\n<p>The project was developed with a few design principles in mind.</p>\n<p><strong>1. Zero configuration by default</strong></p>\n<p>That’s right, you can get up and running in under a minute with no configuration required.</p>\n<p><strong>2. Feature parity with next 9</strong></p>\n<p>All features of next 9 are supported:</p>\n<ul>\n<li><a href=\"https://github.com/zeit/next.js#fetching-data-and-component-lifecycle\">Server-side rendered pages</a>. No surprise here, this is what attracts most folks to use next. serverless-next.js deploys your pages to Lambda@Edge. Server side rendering happens right at the edge, close to your users.</li>\n<li><a href=\"https://nextjs.org/docs#api-routes\">API Routes</a>. Like the pages, your api backend is also deployed to Lambda@Edge. When fetching data client side this ensures very low response latency.</li>\n<li><a href=\"https://nextjs.org/docs#dynamic-routing\">Dynamic Pages / Route segments</a>. Next recently introduced support in their <a href=\"https://nextjs.org/docs#routing\">built-in routing system</a> for <a href=\"https://nextjs.org/docs#dynamic-routes-support\">parameterised routes</a>. serveless-next.js implements a lightweight router which is compatible with dynamic routes.</li>\n<li><a href=\"https://nextjs.org/docs#automatic-prerendering\">Automatic pre-rendering</a>. Some of your pages might not be SSR. These type of pages are compiled by next to HTML at build time. serverless-next.js takes advantage of this and deploys them to S3. Lambda@Edge in CloudFront then takes care of forwarding requests to static pages (e.g. /terms, /about, /contact etc.) to S3. These can be heavily cached.</li>\n<li><a href=\"https://github.com/zeit/next.js/#cdn-support-with-asset-prefix\">Client assets</a>. Build files generated by next such as webpack chunks, css files, etc. are uploaded to S3. In this case Lambda@Edge does not need invoking as any requests to _next/* is served by CloudFront from S3.</li>\n<li><a href=\"https://github.com/zeit/next.js#static-file-serving-eg-images\">User static / public folders</a>. User assets like images in the static folder or root level resources in your public folder are uploaded to S3. Like build assets, CloudFront serves these assets from S3.</li>\n</ul>\n<p><strong>3. Fast deployments</strong></p>\n<p>The <a href=\"https://github.com/danielcondemarin/serverless-next.js/tree/master/packages/serverless-nextjs-component\">Serverless Next.js Component</a> is fast. Deploying your application, typically takes less than a minute. <code class=\"language-text\">next build</code> is used behind the scenes, no magic there. A CloudFront distribution is provisioned for you with best practices in place. The pages compiled are zipped up and deployed to Lambda@Edge which is then associated to your distribution. An S3 bucket is also deployed for the static assets which are uploaded using <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html\">S3 accelerated transfers</a>.</p>\n<p>The only caveat is that the first deployment you have to wait a few minutes for the CloudFront distribution to be available. However, subsequent deployments don’t have this problem. Once the distribution is up, deploying updates is fast.</p>\n<p>CloudFormation <strong>is not used</strong> for provisioning resources. This is partly why deployments are quick. It also means the project is not bound by <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cloudformation-limits.html\">CloudFormation limits</a>, which is an issue on the predecessor of this project, <a href=\"https://github.com/danielcondemarin/serverless-next.js/tree/master/packages/serverless-nextjs-plugin#caveats\">serverless-nextjs-plugin</a>.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/serverless-nextjs/serverless_nextjs_graphics.png\" alt=\"serverless nextjs graphics aws lambda edge\"></p>\n<h4>Architecture</h4>\n<p>Let’s look in more detail at the architecture deployed to AWS.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/serverless-nextjs/serverless_nextjs_lambda_edge_aws_architecture.png\" alt=\"serverless nextjs aws lambda edge architecture\"></p>\n<p>Three Cache Behaviours are created in CloudFront.</p>\n<p>The first 2. <code class=\"language-text\">_next/*</code> and <code class=\"language-text\">static/*</code> forward the requests to S3.</p>\n<p>The 3rd. is associated to a lambda function which is responsible for handling three types of requests.</p>\n<ol>\n<li>Server side rendered page. Any page that defines <code class=\"language-text\">getInitialProps</code> method will be rendered at this level and the response is returned immediately to the user.</li>\n<li>Statically optimised page. Requests to pages that were pre-compiled by next to HTML are forwarded to S3 where the HTML is stored.</li>\n<li>Public resources. These are requests to root level resources like <code class=\"language-text\">/robots.txt</code>, <code class=\"language-text\">/favicon.ico</code>, <code class=\"language-text\">/manifest.json</code> etc. These are also forwarded to S3 where these resources can be found.</li>\n</ol>\n<p>The reason why 2. and 3. have to go through Lambda@Edge first is because these routes don’t conform to a pattern like <code class=\"language-text\">_next/*</code> or <code class=\"language-text\">static/*</code>. Also, one cache behaviour per route is a bad idea because CloudFront <a href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html\">only allows 25 per distribution</a>.</p>\n<h4>Getting Started</h4>\n<p>Using the <a href=\"https://github.com/danielcondemarin/serverless-next.js/tree/master/packages/serverless-nextjs-component\">Serverless Next.js Component</a> is easy, just add it to your <code class=\"language-text\">serverless.yml</code> like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># serverless.yml</span>\n<span class=\"token key atrule\">myApp</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">component</span><span class=\"token punctuation\">:</span> serverless<span class=\"token punctuation\">-</span>next.js</code></pre></div>\n<p>Sane defaults are baked in, so no additional configuration is needed.</p>\n<p>Use the Serverless Framework to deploy via the <code class=\"language-text\">serverless</code> command, like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ npx serverless</code></pre></div>\n<p>Remove it with the <code class=\"language-text\">remove</code> command:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ npx serverless remove</code></pre></div>\n<h4>Custom Domains</h4>\n<p>You can set a custom domain for your application. serverless-next.js takes care of associating the domain with your CloudFront distribution, creates the sub domain in Route53 and even sets up the SSL Certificate using AWS ACM. It is optional and looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># serverless.yml</span>\n<span class=\"token key atrule\">myApp</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">component</span><span class=\"token punctuation\">:</span> serverless<span class=\"token punctuation\">-</span>next.js\n <span class=\"token key atrule\">inputs</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">domain</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"www\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"example.com\"</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># [ sub-domain, domain ]</span></code></pre></div>\n<h4>Behind the Scenes</h4>\n<p>The project is powered by the amazing <a href=\"https://serverless.com/blog/what-are-serverless-components-how-use/\">serverless-components</a>. At its core it uses 4 components:</p>\n<ul>\n<li><a href=\"https://github.com/serverless-components/aws-s3\">@serverless/aws-s3</a></li>\n<li><a href=\"https://github.com/serverless-components/aws-cloudfront\">@serverless/aws-cloudfront</a></li>\n<li><a href=\"https://github.com/serverless-components/aws-lambda\">@serverless/aws-lambda</a></li>\n<li><a href=\"https://github.com/serverless-components/domain\">@serverless/domain</a></li>\n</ul>\n<p>Most of the heavy lifting is done by the components themselves, serverless-next.js simply orchestrates.</p>\n<h4>What’s Next?</h4>\n<p>Build time efficiencies, configurable caching options for users and potentially adding a separate <code class=\"language-text\">/api</code> cache behaviour for API Routes. I will also be working on more complete examples that integrate with other AWS Services.</p>\n<p>Hope you find the project useful. If you find any issues or would like to see a new feature please <a href=\"https://github.com/danielcondemarin/serverless-next.js/issues\">raise an issue</a>. Also, contributions are welcome :)</p>","frontmatter":{"title":"Serverless Next.js At The Edge","date":"September 17, 2019","description":"Deploy Next.js on AWS Lambda@Edge for global, fast server-side rendered react applications, and easily interact with other AWS resources."}}},"pageContext":{"slug":"/posts/2019-09-17-serverless-nextjs/","previous":{"fields":{"slug":"/posts/2019-09-16-lambda-at-edge-support-added/"},"frontmatter":{"title":"Lambda@Edge support now available"}},"next":{"fields":{"slug":"/posts/2019-09-17-serverless-azure-functions-v1/"},"frontmatter":{"title":"How to Create a REST API with Azure Functions and the Serverless Framework - Part 1"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-01-03-serverless-github-webhook-slack/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"e079038e-c164-5818-b369-e8df4828e1e6","excerpt":"One of the great applications for Serverless is using it as glue code between different services. You can spin up an endpoint to handle a webhook in seconds‚Ä¶","html":"<p>One of the great applications for Serverless is using it as glue code between different services. You can spin up an endpoint to handle a webhook in seconds without bugging your company‚Äôs Ops department.</p>\n<p>Github has a very mature <a href=\"https://developer.github.com/webhooks/\">webhook integration</a> where you can be notified of a wide range of events. You can run a linter when a pull request is opened, send a notification when an issue is created, or trigger a deploy when a pull request is merged.</p>\n<p>In this tutorial, we‚Äôll show how to handle Github webhooks. We‚Äôll create a webhook that fires whenever our open-source repository is starred. Our handler for this event will post a celebratory message in a Slack channel.</p>\n<p>The end result will look like this:</p>\n<img width=\"412\" alt=\"Slack example message\" src=\"https://user-images.githubusercontent.com/6509926/32450649-5c1a4e82-c2da-11e7-98a4-2a9ec1cd2ab7.png\">\n<p>Let‚Äôs get started!</p>\n<h1>Before you start</h1>\n<p>To complete this tutorial, you‚Äôll need:</p>\n<ul>\n<li>The <a href=\"https://serverless.com/framework/docs/providers/aws/guide/quick-start/\">Serverless Framework installed</a> with an AWS account set up;</li>\n<li>A Github account, plus a repo where you have admin or owner permissions; and</li>\n<li>A <a href=\"https://slack.com/\">Slack</a> account where you have the ability to create apps.</li>\n</ul>\n<h1>Setting up your Slack incoming webhook</h1>\n<p>The first thing we‚Äôll do is set up an Incoming Webhook for a Slack channel. This will give us an HTTP endpoint to post messages that will be displayed in our Slack channel.</p>\n<p>First, create a new channel in Slack where you want the messages to go. You probably don‚Äôt want to spam your whole team in <code class=\"language-text\">#general</code>. üò¨</p>\n<p>In your new channel, click the link to <code class=\"language-text\">Add an app</code>:</p>\n<img width=\"825\" alt=\"Slack Add an app\" src=\"https://user-images.githubusercontent.com/6509926/32443968-90fa0232-c2c6-11e7-96a1-4862cca62534.png\">\n<p>Search for the ‚ÄúIncoming Webhook‚Äù application, and create a new one for your channel:</p>\n<img width=\"997\" alt=\"Create Incoming Webhook app\" src=\"https://user-images.githubusercontent.com/6509926/32444016-bfd1c8a6-c2c6-11e7-89a0-3a6efe4c0a02.png\">\n<p>After you create it, it will display a Slack webhook URL. This is the URL where you will post data to show in the channel:</p>\n<img width=\"1010\" alt=\"Webhook URL\" src=\"https://user-images.githubusercontent.com/6509926/32444071-ebec9a92-c2c6-11e7-9e26-bd5a9b4f18a0.png\">\n<blockquote>\n<p>Save this URL as you will need it in your Serverless function.</p>\n</blockquote>\n<p>Finally, you can customize the webhook display so it‚Äôs nicer when it posts in the channel. Here, I change the name to ‚ÄúGithub Stars‚Äù and use a star emoji as the icon:</p>\n<img width=\"999\" alt=\"Webhook display\" src=\"https://user-images.githubusercontent.com/6509926/32444132-112e17f4-c2c7-11e7-8dba-b025fb9e65dd.png\">\n<h1>Deploying our Serverless webhook handler</h1>\n<p>Now, let‚Äôs move on to setting up our webhook handler. In our handler, we‚Äôll want to parse the given event for the information we want, then send a formatted message to Slack using our webhook URL from the previous step.</p>\n<p>First, let‚Äôs create a new directory for our Serverless service and initialize it with a <code class=\"language-text\">package.json</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> stargazer\n$ <span class=\"token builtin class-name\">cd</span> stargazer\n$ <span class=\"token function\">npm</span> init -y</code></pre></div>\n<p>We‚Äôre going to be using the <a href=\"https://developer.github.com/v3/activity/events/types/#watchevent\"><code class=\"language-text\">WatchEvent</code></a> from Github to get notifications of our repository being starred. We want to post a message that looks as follows:</p>\n<img width=\"412\" alt=\"Slack example message\" src=\"https://user-images.githubusercontent.com/6509926/32450649-5c1a4e82-c2da-11e7-98a4-2a9ec1cd2ab7.png\">\n<p>For this message, we‚Äôll need:</p>\n<ul>\n<li>the repository being starred;</li>\n<li>the total number of stars for the repository;</li>\n<li>the username starring our repository; and</li>\n<li>the URL to the user‚Äôs Github profile.</li>\n</ul>\n<p>Github includes an example event structure, which is very useful. A truncated version is below:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"action\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"started\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">35129377</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"public-repo\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"full_name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"baxterthehacker/public-repo\"</span><span class=\"token punctuation\">,</span>\n    ...\n    <span class=\"token property\">\"stargazers_count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t ...\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"sender\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"login\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"baxterthehacker\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6752317</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"avatar_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://avatars.githubusercontent.com/u/6752317?v=3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"gravatar_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://api.github.com/users/baxterthehacker\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"html_url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/baxterthehacker\"</span><span class=\"token punctuation\">,</span>\n    ...\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In our service directory, let‚Äôs create a <code class=\"language-text\">handler.js</code> with our handler code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sync-request'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">WEBHOOK_URL</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">WEBHOOK_URL</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">stargazer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> repository<span class=\"token punctuation\">,</span> sender <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> body<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> repo <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> stars <span class=\"token operator\">=</span> repository<span class=\"token punctuation\">.</span>stargazers_count<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> sender<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> sender<span class=\"token punctuation\">.</span>html_url<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sendToSlack</span><span class=\"token punctuation\">(</span>repo<span class=\"token punctuation\">,</span> stars<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      message<span class=\"token operator\">:</span> <span class=\"token string\">\"Event processed\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sendToSlack</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">repo<span class=\"token punctuation\">,</span> stars<span class=\"token punctuation\">,</span> username<span class=\"token punctuation\">,</span> url</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> text <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">New Github star for _</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>repo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">_ repo!.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The *</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>repo<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">* repo now has *</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>stars<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">* stars! :tada:.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Your new fan is &lt;</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">|</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> resp <span class=\"token operator\">=</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">WEBHOOK_URL</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    json<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> text <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Use getBody to check if there was an error.</span>\n  resp<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Let‚Äôs walk through this handler code.</p>\n<p>The exported <code class=\"language-text\">stargazer</code> function is the handler for our Lambda. This is what will be called when our function is triggered. In that function, we pull out the necessary elements of the webhook event, then use our <code class=\"language-text\">sendToSlack</code> function to assemble the message and post it to Slack.</p>\n<p>We should look at two other things before moving on. First, notice how we‚Äôre getting the webhook URL from a WEBHOOK_URL environment variable. This is something we‚Äôll need to inject with our <code class=\"language-text\">serverless.yml</code>.</p>\n<p>Second, we‚Äôre using a third-party NPM package, <a href=\"https://github.com/ForbesLindesay/sync-request\"><code class=\"language-text\">sync-request</code></a> (yes, I use sync-request because I don‚Äôt like messing with callbacks üò¨). We‚Äôll need to install this package locally with NPM, and then Serverless will include it in our deployment package. Let‚Äôs install that now:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save sync-request</code></pre></div>\n<p>With our handler code written, let‚Äôs move on to our <code class=\"language-text\">serverless.yml</code>. This is our ‚Äúinfrastructure-as-code‚Äù, where we configure our different functions, events, and additional configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> stargazing\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">WEBHOOK_URL</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://hooks.slack.com/services/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\"</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stargazer</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.stargazer\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> POST stargazer</code></pre></div>\n<p>In our <code class=\"language-text\">functions</code> block, we configure a single function, <code class=\"language-text\">stargazer</code>. We provide a path to our handler file and the name of the function to be triggered. Then, we set up an http event to be triggered on a POST request to <code class=\"language-text\">/stargazer</code>.</p>\n<p>Notice in the <code class=\"language-text\">provider</code> block that we‚Äôve added the <code class=\"language-text\">WEBHOOK_URL</code> environment variable under the <code class=\"language-text\">environment</code> section. This matches with our handler code, which required our Slack webhook URL in the environment. Make sure to update that value with your URL from setting up your webhook.</p>\n<p>Let‚Äôs deploy our service! Run <code class=\"language-text\">sls deploy</code> to send it to the cloud ‚ö°Ô∏è:</p>\n<img width=\"565\" alt=\"Serverless deploy\" src=\"https://user-images.githubusercontent.com/6509926/32457263-211c686a-c2ee-11e7-96ae-17ce6261586d.png\">\n<p>Serverless will print out a URL for your function to be accessed. Copy that URL as you will use it to configure your Github webhook.</p>\n<h1>Setting up your Github webhook</h1>\n<p>We‚Äôre ready for the last step ‚Äî creating the Github webhook to send to our function endpoint.</p>\n<p>Navigate to a repository where you‚Äôre an owner or an admin. Click ‚ÄúSettings‚Äù at the top, then the ‚ÄúWebhooks‚Äù tab on the left hand side. Then, click the ‚ÄúAdd webhook button‚Äù:</p>\n<img width=\"1027\" alt=\"Create webhook\" src=\"https://user-images.githubusercontent.com/6509926/32457444-c978b2f2-c2ee-11e7-9d5d-dd59ceee941d.png\">\n<p>In the Add webhook screen, enter your function endpoint into the Payload URL input box and choose <code class=\"language-text\">application/json</code> as the Content Type:</p>\n<img width=\"735\" alt=\"Webhook config\" src=\"https://user-images.githubusercontent.com/6509926/32457548-2617c61a-c2ef-11e7-85b2-24e009eca1e0.png\">\n<p>Then, go to the section to choose which events trigger the webhook. Click the ‚ÄúLet me select individual events‚Äù option, then choose the ‚ÄúWatch‚Äù event at the bottom of the list.</p>\n<img width=\"736\" alt=\"Watch event\" src=\"https://user-images.githubusercontent.com/6509926/32457623-5ff485da-c2ef-11e7-8dcd-7249d00d01d8.png\">\n<p>Click the ‚ÄúAdd webhook‚Äù button, and you‚Äôre ready to go! Github will immediately send a test event to your endpoint. There will be a section showing ‚ÄúRecent Deliveries‚Äù and the status code, so you can see if you‚Äôre having any failures. If you are, check the logs in your console with <code class=\"language-text\">sls logs -f stargazer</code> to find the errors.</p>\n<h1>Conclusion</h1>\n<p>You did it! Quick and fun notifications of anytime a user stars your Github project.</p>\n<p>If you want the code used in this application, check it out <a href=\"https://github.com/alexdebrie/stargazer\">here</a></p>\n<p>Check out the full range of <a href=\"https://developer.github.com/webhooks/#events\">Github webhook events</a> ‚Äî you can implement some really powerful workflows with webhooks + Serverless. Let us know what you build!</p>","frontmatter":{"title":"Build a Github webhook handler with Serverless & AWS Lambda","date":"January 03, 2018","description":"Deploy a Serverless service that posts notifications of Github stars in a Slack channel"}}},"pageContext":{"slug":"/posts/2018-01-03-serverless-github-webhook-slack/","previous":{"fields":{"slug":"/posts/2017-12-21-serverless-v1.25.0/"},"frontmatter":{"title":"Serverless v1.25 - S3 Transfer Acceleration, API Gateway endpoint type configuration, variable system improvements"}},"next":{"fields":{"slug":"/posts/2018-01-08-how-to-manage-your-alexa-skills-with-serverless/"},"frontmatter":{"title":"How To Manage Your Alexa Skills With Serverless"}}}}}
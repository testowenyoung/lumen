{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-11-29-publish-aws-lambda-layers-serverless-framework/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"d474fb65-454b-5a75-9cc2-2b0a83ca1fca","excerpt":"AWS re:Invent is in full swing, with AWS announcing a slew of new features. Most notably, we’re pretty excited about AWS Lambda’s support for Layers.  Layers…","html":"<p><a href=\"https://serverless.com/blog/reinvent-2018-serverless-announcements\">AWS re:Invent</a> is in full swing, with AWS announcing a slew of new features. Most notably, we’re pretty excited about AWS Lambda’s support for Layers. </p>\n<p><a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\">Layers</a>\nallows you to include additional files or data for your functions. This could be binaries such as <a href=\"https://www.ffmpeg.org/\">FFmpeg</a> or <a href=\"https://imagemagick.org/script/index.php\">ImageMagick</a>, or it could be difficult-to-package dependencies, such as <a href=\"http://www.numpy.org/\">NumPy</a> for Python. These layers are added to your function’s zip file when published. In a way, they are comparable to <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html\">EC2 AMIs</a>, but for functions. </p>\n<p>The killer feature of Lambda’s Layers is that they can be shared between Lambda functions, accounts, and even publicly!</p>\n<p>There are two aspects to using Lambda Layers:</p>\n<ol>\n<li>Publishing a layer that can be used by other functions</li>\n<li>Using a layer in your function when you publish a new function version.</li>\n</ol>\n<p>We’re excited to say that the Serverless Framework has day 1 support for both publishing and using Lambda Layers with your functions with <a href=\"https://github.com/serverless/serverless/releases/tag/v1.34.0\">Version 1.34.0</a>!</p>\n<p>See how you can publish and use Lambda Layers with the Serverless Framework below.</p>\n<img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/reinvent/lambda-layers-header.png\" alt=\"Lambda Layers on Serverless Framework\">\n<h4>Example use case: Creating GIFs with FFmpeg</h4>\n<p>For a walkthrough, let’s make a service that takes an uploaded video and converts it to a GIF. </p>\n<p>We’ll use <a href=\"https://www.ffmpeg.org\">FFmpeg</a>, a open source tool for manipulating video and audio. FFmpeg is a binary program and a great example use case for a layer as managing the binary falls outside the responsibility of your runtime’s packaging system.</p>\n<p>In this example, we’ll build and publish a layer that contains FFmpeg. Then, we’ll create a Lambda function that uses the FFmpeg layer to convert videos to GIFs.</p>\n<p>To get started, create a serverless project for your layer &#x26; service:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm i -g serverless # Update to v1.34.0 or greater of serverless for layers support\n$ sls create -t aws-nodejs -n gifmaker -p gifmaker\n$ cd gifmaker</code></pre></div>\n<p>Then at the bottom of your <code class=\"language-text\">serverless.yml</code> add the following to define your layer that will contain FFmpeg. The <code class=\"language-text\">path</code> property is a path to a directory that will be zipped up and published as your layer:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">layers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ffmpeg</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> layer</code></pre></div>\n<p>Run the following commands to download the contents of your layer:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ mkdir layer\n$ cd layer\n$ curl -O https://johnvansickle.com/ffmpeg/builds/ffmpeg-git-amd64-static.tar.xz\n$ tar xf ffmpeg-git-amd64-static.tar.xz\n$ rm ffmpeg-git-amd64-static.tar.xz\n$ mv ffmpeg-git-*-amd64-static ffmpeg\n$ cd ..</code></pre></div>\n<p>You’re ready to test deployment of your layer. Deploy and you’ll see the layer’s ARN in the output info:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sls deploy\nServerless: Packaging service...\nServerless: Excluding development dependencies...\nServerless: Excluding development dependencies...\nServerless: Uploading CloudFormation file to S3...\nServerless: Uploading artifacts...\nServerless: Uploading service .zip file to S3 (6.24 KB)...\nServerless: Uploading service .zip file to S3 (49.82 MB)...\nServerless: Validating template...\nServerless: Updating Stack...\nServerless: Checking Stack update progress...\n..........\nServerless: Stack update finished...\nService Information\nservice: gifmaker\nstage: dev\nregion: us-east-1\nstack: ffmpeg-layer-dev\napi keys:\n  None\nendpoints:\n  None\nfunctions:\n  hello: gifmaker-dev-hello\nlayers:\n  ffmpeg: arn:aws:lambda:us-east-1:111111111111:layer:ffmpeg:1</code></pre></div>\n<p>Next, we’ll add a <code class=\"language-text\">custom</code> section to <code class=\"language-text\">serverless.yml</code> to specify the S3 bucket name (choose your own unique bucket name):</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">bucket</span><span class=\"token punctuation\">:</span> MyGifMakerBucket</code></pre></div>\n<p>Now rename your function from <code class=\"language-text\">hello</code> to <code class=\"language-text\">mkgif</code>, specify that your function uses the layer you’re publishing, and add an S3 event configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mkgif</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.mkgif\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">s3</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.bucket<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">layers</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># Ref name is generated by TitleCasing the layer name &amp; appending LambdaLayer</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span><span class=\"token key atrule\">Ref</span><span class=\"token punctuation\">:</span> FfmpegLambdaLayer<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You’ll also need to give your service permission to read &#x26; write your S3 bucket, add the following in the <code class=\"language-text\">provider</code> section of your <code class=\"language-text\">serverless.yml</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">iamRoleStatements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">Effect</span><span class=\"token punctuation\">:</span> Allow\n      <span class=\"token key atrule\">Action</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> s3<span class=\"token punctuation\">:</span>PutObject\n        <span class=\"token punctuation\">-</span> s3<span class=\"token punctuation\">:</span>GetObject\n      <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"arn:aws:s3:::${self:custom.bucket}/*\"</span></code></pre></div>\n<p>Your <code class=\"language-text\">serverless.yml</code> should now <a href=\"https://github.com/serverless/examples/blob/master/aws-ffmpeg-layer/serverless.yml\">look like this</a>.</p>\n<p>We need to make our handler. Replace the contents of <code class=\"language-text\">handler.js</code> with the following code, which gets the file from S3, downloads it to disk, runs ffmpeg on it, reads the GIF, and finally puts it back to S3:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> spawnSync <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child_process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> readFileSync<span class=\"token punctuation\">,</span> writeFileSync<span class=\"token punctuation\">,</span> unlinkSync <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aws-sdk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>S3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">mkgif</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>event<span class=\"token punctuation\">.</span>Records<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not an s3 invocation!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> record <span class=\"token keyword\">of</span> event<span class=\"token punctuation\">.</span>Records<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>record<span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not an s3 invocation!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".gif\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"already a gif\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// get the file</span>\n    <span class=\"token keyword\">const</span> s3Object <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> s3\n      <span class=\"token punctuation\">.</span><span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        Bucket<span class=\"token operator\">:</span> record<span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">.</span>bucket<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n        Key<span class=\"token operator\">:</span> record<span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>key\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// write file to disk</span>\n    <span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/tmp/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>record<span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> s3Object<span class=\"token punctuation\">.</span>Body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// convert to gif!</span>\n    <span class=\"token function\">spawnSync</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">\"/opt/ffmpeg/ffmpeg\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"-i\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/tmp/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>record<span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"-f\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"gif\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/tmp/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>record<span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.gif</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> stdio<span class=\"token operator\">:</span> <span class=\"token string\">\"inherit\"</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// read gif from disk</span>\n    <span class=\"token keyword\">const</span> gifFile <span class=\"token operator\">=</span> <span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/tmp/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>record<span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.gif</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// delete the temp files</span>\n    <span class=\"token function\">unlinkSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/tmp/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>record<span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.gif</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">unlinkSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/tmp/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>record<span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// upload gif to s3</span>\n    <span class=\"token keyword\">await</span> s3\n      <span class=\"token punctuation\">.</span><span class=\"token function\">putObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        Bucket<span class=\"token operator\">:</span> record<span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">.</span>bucket<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n        Key<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>record<span class=\"token punctuation\">.</span>s3<span class=\"token punctuation\">.</span>object<span class=\"token punctuation\">.</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.gif</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n        Body<span class=\"token operator\">:</span> gifFile\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now you can deploy both the layer &#x26; updated function with <code class=\"language-text\">sls deploy</code>. Let’s test it out by uploading a video to our S3 bucket:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ curl -OL https://archive.org/download/mov-bbb/mov_bbb.mp4\n$ aws s3 cp mov_bbb.mp4 s3://YOURBUCKETNAME/mov_bbb.mp4\n$ # wait a little bit….\n$ aws s3 cp s3://YOURBUCKETNAME/mov_bbb.mp4.gif mov_bb.mp4.gif</code></pre></div>\n<p>You now have a GIF copy of the mp4 you uploaded!</p>\n<p>For the full source of this example, check it out in our <a href=\"https://github.com/serverless/examples/tree/master/aws-ffmpeg-layer\">examples repo</a>.</p>\n<h4>Some tips on working with layers</h4>\n<p>In the example above, instead of specifying an ARN for the layer that the\nfunction is using, we used <code class=\"language-text\">{Ref: FfmpegLambdaLayer}</code>. This is a\n<a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-ref.html\">CloudFormation Reference</a>.</p>\n<p>The name is derived from your layer’s name, e.g., <code class=\"language-text\">ffmpeg</code> becomes <code class=\"language-text\">FfmpegLambdaLayer</code>. If you’re not\nsure what your layer’s name will be, you can find it by running <code class=\"language-text\">sls package</code> then searching for\n<code class=\"language-text\">LambdaLayer</code> in <code class=\"language-text\">.serverless/cloudformation-template-update-stack.json</code>.</p>\n<p>You may have noticed that every time you deploy your stack, a new layer version is created. This is\ndue to limitations with CloudFormation. The best way to deal with this is by keeping your layer and\nyour function in separate stacks.</p>\n<p>Let’s try that with the example we just made.</p>\n<p>First, create a new folder and move the layers directory into it:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ cd ..\n$ mkdir ffmpeg-layer\n$ mv gifmaker/layer ffmpeg-layer/.\n$ cd ffmpeg-layer</code></pre></div>\n<p>Remove the top-level <code class=\"language-text\">layers</code> section in <code class=\"language-text\">gifmaker/serverless.yml</code>, then create a new\n<code class=\"language-text\">serverless.yml</code> in the <code class=\"language-text\">ffmpeg-layer</code> folder containing:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> ffmpeg<span class=\"token punctuation\">-</span>layer\n<span class=\"token key atrule\">frameworkVersion</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\">=1.34.0 &lt;2.0.0\"</span>\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n<span class=\"token key atrule\">layers</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">ffmpeg</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> layer\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Outputs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">FfmpegLayerExport</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">Value</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">Ref</span><span class=\"token punctuation\">:</span> FfmpegLambdaLayer\n        <span class=\"token key atrule\">Export</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">Name</span><span class=\"token punctuation\">:</span> FfmpegLambdaLayer</code></pre></div>\n<p>Now you can run <code class=\"language-text\">sls deploy</code> to publish your layer!</p>\n<p>Go back to the <code class=\"language-text\">gifmaker</code> service directory and change <code class=\"language-text\">{Ref: FfmpegLambdaLayer}</code> in the\n<code class=\"language-text\">serverless.yml</code> to <code class=\"language-text\">${cf:ffmpeg-layer-dev.FfmpegLayerExport}</code>. You can now run <code class=\"language-text\">sls deploy</code> and\nit’ll use the layer from the other service. Note that the <code class=\"language-text\">dev</code> in the variable above is the\n<a href=\"https://serverless.com/framework/docs/providers/aws/guide/workflow#using-stages\">stage</a>\nof your layer service.</p>\n<h4>More Examples</h4>\n<p>You can see the following projects for some examples of using this plugin to build a layer. They all leverage Docker and the <a href=\"https://github.com/lambci/docker-lambda\">docker-lambda images</a> to compile for AWS’s Lambda environment on any operating system:</p>\n<ul>\n<li><a href=\"https://github.com/dschep/geoip-lambda-layer\">geoip-lambda-layer</a> - A layer containing <a href=\"https://maxmind.com\">MaxMind</a>’s GeoIP libraries</li>\n<li><a href=\"https://github.com/dschep/sqlite-lambda-layer\">sqlite-lambda-layer</a> - A layer to fix SQLite support in Python 3.6 runtimes</li>\n</ul>\n<h5>Awesome layers</h5>\n<p>Also check out this repository of awesome layers: <a href=\"https://github.com/mthenw/awesome-layers\">https://github.com/mthenw/awesome-layers</a></p>\n<h4>Custom runtime support: even better!</h4>\n<p>Along with layers support, AWS also just announced support for building your own runtime using the <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html\">Runtime API</a>.</p>\n<p>This allows you to build, use, and share runtime support for Lambda outside of what AWS officially supports.</p>\n<h5>Custom runtimes with the Serverless Framework</h5>\n<p>To utilize custom runtimes with Serverless, specify the runtime as <code class=\"language-text\">provided</code> in your <code class=\"language-text\">serverless.yml</code> and include a layer that provides a custom runtime. For documentation on building your own runtime, see AWS’s documentation <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html\">here</a></p>\n<h5>More re:Invent news</h5>\n<ul>\n<li><a href=\"https://serverless.com/blog/reinvent-2018-serverless-announcements/\">All the Serverless announcements at re:Invent 2018</a></li>\n<li><a href=\"https://serverless.com/blog/dynamodb-on-demand-serverless/\">DynamoDB On-Demand: When, why and how to use it in your serverless applications</a></li>\n<li><a href=\"https://serverless.com/blog/api-gateway-websockets-support/\">Real-time applications with API Gateway WebSockets and AWS Lambda</a></li>\n<li><a href=\"https://serverless.com/blog/firecracker-what-means-serverless/\">What Firecracker open-source means for the serverless community</a></li>\n</ul>","frontmatter":{"title":"How to publish and use AWS Lambda Layers with the Serverless Framework","date":"November 29, 2018","description":"Learn about AWS's recently introduced Lambda Layers and how to publish and use them with Serverless Framework."}}},"pageContext":{"slug":"/posts/2018-11-29-publish-aws-lambda-layers-serverless-framework/","previous":{"fields":{"slug":"/posts/2018-11-28-firecracker-what-means-serverless/"},"frontmatter":{"title":"What Firecracker open-source means for the serverless community"}},"next":{"fields":{"slug":"/posts/2018-11-29-api-gateway-websockets-support/"},"frontmatter":{"title":"Real-time applications with API Gateway WebSockets and AWS Lambda"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-02-05-serverless-dashboard-plugin-for-atom-editor/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"89253438-833b-54e7-abe1-6c63a7cbbf93","excerpt":"Many developers love and use the Serverless Framework for writing their serverless applications. In the spirit of making it even easier to manage the serverless…","html":"<p>Many developers love and use the Serverless Framework for writing their serverless applications. In the spirit of making it even easier to manage the serverless applications using the Serverless Framework, <a href=\"https://serverless.com/community/champions/takahiro-horike/\">Takahiro Horike</a>, created the Serverless Dashboard package for the Atom editor.</p>\n<p>In this post, I will give you an overview of the Serverless Dashboard package.</p>\n<p>We’ll cover:</p>\n<ul>\n<li>Installing the plugin in Atom</li>\n<li>Visualizing the serverless.yml file</li>\n<li>Using the Atom plugin to manage a serverless app</li>\n</ul>\n<h1>Installation</h1>\n<p>Let’s start by installing the Atom package or plugin. If you don’t have <a href=\"https://atom.io/\">Atom</a>, you’ll need that first! If you don’t have the <a href=\"https://serverless.com/framework/\">Serverless Framework</a> installed, you’ll need that too.</p>\n<p>Installing the Serverless Framework is a breeze:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g serverless</code></pre></div>\n<p>You can search for the <a href=\"https://atom.io/packages/serverless-dashboard\">Serverless Dashboard</a> package on the Atom site:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/35174727-676e17c0-fd3e-11e7-91c0-b2ccb53c6117.png\" alt=\"Search for the package\">\n<em>Search for the package</em></p>\n<p>To install it, do the following:</p>\n<ol>\n<li>Launch Atom</li>\n<li>Open ‘Settings View’ using <kbd>Cmd+,</kbd> on macOS or <kbd>Ctrl+,</kbd> on other platforms</li>\n<li>Click the ‘Install’ tab on the left side</li>\n<li>Enter <code class=\"language-text\">serverless-dashboard</code> in the search box and press <kbd>Enter</kbd></li>\n<li>Click the ‘Install’ button that appears</li>\n</ol>\n<p><img src=\"https://user-images.githubusercontent.com/8188/35175208-934451dc-fd40-11e7-8111-f7af675d0d06.png\" alt=\"Install the package\">\n<em>Install the package</em></p>\n<h2>Visualizing the serverless.yml file</h2>\n<p>Let’s create a simple app named <code class=\"language-text\">helloatom</code> using the boilerplate template provided by the Serverless Framework.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sls create -t hello-world -n helloatom -p helloatom</code></pre></div>\n<p>Open the app files in atom.</p>\n<p>To use the Serverless Dashboard plugin, locate the ‘Serverless Dashboard’ item on the ‘Packages’ menu list as shown below:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/35174627-0685b0b2-fd3e-11e7-85f0-a4b83d6b7edb.png\" alt=\"Post install\">\n<em>Post installation</em></p>\n<p>Click on the ‘Open your serverless.yml’ and choose the <code class=\"language-text\">serverless.yml</code> for the project.</p>\n<p>A new pane will open with the Serverless Dashboard showing a visual representation of the <code class=\"language-text\">serverless.yml</code> file.</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/35176844-8e8f42a6-fd49-11e7-9bb1-866a9954c2ee.png\" alt=\"Serverless Dashboard\">\n<em>Serverless Dashboard</em></p>\n<h1>Managing a serverless app</h1>\n<p>The Serverless Dashboard plugin not only lets you visualize the <code class=\"language-text\">serverless.yml</code> file, but also helps you easily manage a few things inside the Atom editor pane.</p>\n<h2>Deploy a service</h2>\n<p>You can easily deploy the service by clicking on the ‘Deploy Service’ button. The service will be deployed to the stage and the region as specified. Note that you can change those settings directly from the pane.</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/35177082-09db1f7e-fd4b-11e7-8610-01cca5d31f78.png\" alt=\"Update deploy settings\">\n<em>Update deploy settings</em></p>\n<p>Let’s see what the deployment looks like:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/35177180-8d13569a-fd4b-11e7-8460-04efaeffa9f1.png\" alt=\"Deployment\">\n<em>Deployment</em></p>\n<p>Nothing new here if you’re already familiar with Serverless Framework. The output of the deployment is exactly what you would see in the terminal if you’d deployed using <code class=\"language-text\">sls deploy</code>.</p>\n<h2>Updating the serverless.yml file</h2>\n<p>Let’s add a new function, <code class=\"language-text\">byeWorld</code>, to the serverless.yml file, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">byeWorld</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.byeWorld\n    <span class=\"token comment\"># The `events` block defines how to trigger the handler.byeWorld code</span>\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> bye<span class=\"token punctuation\">-</span>world\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get\n          <span class=\"token key atrule\">cors</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>Switch over to the Serverless Dashboard pane, and click on the ‘Reload serverless.yml’ button.</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/35177381-df382e18-fd4c-11e7-85fe-091dc6af5131.png\" alt=\"Reload serverless.yml\">\n<em>Reload serverless.yml</em></p>\n<p>Let’s deploy the service by clicking on the ‘Deploy Service’ button.</p>\n<h2>Deploying a function</h2>\n<p>Let’s update some code in our functions. We will just add a simple line to log the event object that we receive.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">***** From helloWorld: *****\\n Event: JSON.stringify(event) \\n******\\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Since we just updated our function code, let’s just deploy the <code class=\"language-text\">helloWorld</code> function alone. Select the ‘Deploy Function’ and click on the ‘Apply’ button as shown below:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/35177812-f83dd6ac-fd50-11e7-8ca6-e387246bf336.png\" alt=\"Deploying a function\">\n<em>Deploying a function</em></p>\n<h2>Invoking a function</h2>\n<p>To invoke a function, click on the dropdown next to the function name. Select ‘Invoke’, and then hit ‘Apply’:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/35177846-4ac02740-fd51-11e7-8a53-fb3f8803a0e6.png\" alt=\"Invoking a function\">\n<em>Invoking a function</em></p>\n<h2>Logs for a function</h2>\n<p>To view the logs for a function, click on the dropdown next to the function name and select ‘Logs’, and then hit ‘Apply’ as shown below:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/35177865-86666390-fd51-11e7-9c67-0e851dbbf2dd.png\" alt=\"Logs for a function\">\n<em>Logs for a function</em></p>\n<h2>Removing a service</h2>\n<p>Last but not least, you can remove the service right from the pane:</p>\n<p><img src=\"https://user-images.githubusercontent.com/8188/35177901-e1ca1664-fd51-11e7-838b-ccf3432e901b.png\" alt=\"Removing a service\">\n<em>Removing a service</em></p>\n<h1>Summary</h1>\n<p>The Serverless Dashboard is a convenient package that you can install in Atom to easily access various commands for the Serverless Framework within the Atom editor. It does not support all the commands that are available via the CLI, but it covers the most commonly used commands for managing a service.</p>\n<p>Kudos to the Serverless Champion, <a href=\"https://serverless.com/community/champions/takahiro-horike/\">Takahiro Horike</a>, for writing this package and helping the community.</p>","frontmatter":{"title":"Using the Serverless Dashboard plugin for Atom","date":"February 05, 2018","description":"Making it easier to manage serverless applications from within the Atom editor"}}},"pageContext":{"slug":"/posts/2018-02-05-serverless-dashboard-plugin-for-atom-editor/","previous":{"fields":{"slug":"/posts/2018-01-30-serverless-style-from-fashion-to-tech/"},"frontmatter":{"title":"Serverless style - my journey from fashion to tech"}},"next":{"fields":{"slug":"/posts/2018-02-06-realtime-updates-using-lambda-websockets-iot/"},"frontmatter":{"title":"Implement real-time updates using Lambda and Websockets via IoT"}}}}}
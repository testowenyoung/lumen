{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2016-09-06-serverless-v1-0-rc-1/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"818733d8-c445-5a6f-8481-de48a5b09e12","excerpt":"It’s time again. Serverless v1 beta.2 was released nearly two weeks ago. Today we’re happy and proud to announce the first release candidate of the Serverless…","html":"<p>It’s time again. <a href=\"http://blog.serverless.com/serverless-v1-0-beta-release-2/\">Serverless v1 beta.2</a> was released nearly two weeks ago. Today we’re happy and proud to announce the first release candidate of the Serverless Framework v1 (Serverless v1 rc.1). You can install it via:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g serverless@1.0.0-rc.1</code></pre></div>\n<p>This release candidate comes with many new features, bug fixes and improvements. Before jumping into the details about what’s changed we’d like to tip our virtual hats and say thank you to our awesome community / contributors. The huge number of new features wouldn’t have been possible without each one of you. We’re happy to have all of you aboard and excited about the future of Serverless we’ll build together! Alright. Let’s take a look at all the new features in detail!</p>\n<h2>Renaming of resources logical IDs (BREAKING CHANGE)</h2>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1869\">#1869</a>, <a href=\"https://github.com/serverless/serverless/issues/1828\">#1828</a>, <a href=\"https://github.com/serverless/serverless/issues/1627\">#1672</a>, <a href=\"https://github.com/serverless/serverless/issues/1842\">#1842</a>, <a href=\"https://github.com/serverless/serverless/issues/1823\">#1823</a>, <a href=\"https://github.com/serverless/serverless/issues/1907\">#1907</a>, <a href=\"https://github.com/serverless/serverless/issues/1924\">#1924</a>, <a href=\"https://github.com/serverless/serverless/issues/1931\">#1931</a>, <a href=\"https://github.com/serverless/serverless/issues/1950\">#1950</a>, <a href=\"https://github.com/serverless/serverless/issues/1960\">#1960</a> and <a href=\"https://github.com/serverless/serverless/pull/1951\">#1951</a> The deployment via CloudFormation makes it necessary for Serverless to generate logical ids for all the resources which are created on your behalf (e.g. resources which are used to setup your API Gateway with the help of the <strong>http</strong> event). Serverless also supports custom resources you can specify in the resources section of the <strong>serverless.yml file</strong>. Advanced usage and requirements made it necessary to change the merging logic of these custom resources so that you’re able to e.g. overwrite the resources which are generated by Serverless using the custom provider resources. This new resource merging strategy was implemented in the last release (<a href=\"http://blog.serverless.com/serverless-v1-0-beta-release-2/\">Serverless v1 beta.2</a>). A problem which still persisted since then was that the logical ids of the resources Serverless created were hard to predict and use to overwrite specific behavior. Thanks to the great discussions we came to a predictable rule we’ll now follow to generate the resource logical ids. You can read more about the rule <a href=\"https://github.com/serverless/serverless/blob/master/docs/02-providers/aws/04-resource-names-reference.md\">here</a>. The new naming makes it way easier for developers to overwrite or extend resources generated by Serverless. Furthermore, several bugs (such as using one S3 bucket / SNS topic in several events) were resolved alongside! Note that this is a breaking change as existing services which access resources generated by Serverless need updates to work after updating. For example, if you deploy your existing service the Lambda Function Resource can’t be created as the logical id changed, but the function name is the same (and has to be unique) so CloudFormation will fail. If you can, simply remove the existing stack and create a new one. In case this is not an option make sure to slowly update your stack and check the changes that have been happening during the deployment. Another change is that the API Gateway endpoint will change and you will get a new API Gateway for this deployment. In the event that you point something to that APIG endpoint make sure to update it. Thanks to <a href=\"https://github.com/oipat\">Tapio Kukkonen (@oipat)</a>, <a href=\"https://github.com/sung-hwang-zocdoc\">@sung-hwang-zocdoc</a>, <a href=\"https://github.com/rogemita\">Rogelio (@rogemita)</a>, <a href=\"https://github.com/bennybauer\">Benny Bauer (@bennybauer)</a>, <a href=\"https://github.com/openback\">Timothy Caraballo (@openback)</a> and <a href=\"https://github.com/wxs\">Xavier Snelgrove (@wxs)</a> for reporting the related bugs / helping out here!</p>\n<h2>New Serverless variable system (BREAKING CHANGE)</h2>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1801\">#1801</a>, <a href=\"https://github.com/serverless/serverless/issues/1707\">#1707</a> and <a href=\"https://github.com/serverless/serverless/pull/1834\">#1834</a> Serverless v1 was started with a powerful way to reuse configuration throughout your whole service. That’s why we introduced the serverless.env.yml file back then. However, as more and more time was spent developing real world applications with the Serverless Framework the need for an easier to understand, yet powerful and flexible way to deal with configuration / environment variables came up. We had great discussions with you about all of your needs and came up with a way to introduce a powerful, flexible and easy to understand variable system. Serverless now introduces different ways to use variables inside your service related files. Let’s take a look at some examples.</p>\n<h3>Referencing environment variables</h3>\n<p>Let’s pretend that we have exported an environment variable with the name FUNC_PREFIX and want to access this variable inside our serverless.yml file. We can do this easily like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> new<span class=\"token punctuation\">-</span>service\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span> aws\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>FUNC_PREFIX<span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>hello\n      <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n  <span class=\"token key atrule\">world</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>FUNC_PREFIX<span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>world\n      <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.world</code></pre></div>\n<h3>Referencing CLI options</h3>\n<p>Accessing options which might be passed through the CLI can be referenced like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> new<span class=\"token punctuation\">-</span>service\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span> aws\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>opt<span class=\"token punctuation\">:</span>stage<span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>hello\n      <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n  <span class=\"token key atrule\">world</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>opt<span class=\"token punctuation\">:</span>stage<span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>world\n      <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.world</code></pre></div>\n<h3>Including contents of other files</h3>\n<p>You can also include contents of other files like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> new<span class=\"token punctuation\">-</span>service\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span> aws\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>file(./myCustomFile.yml)<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There are way more possibilities like nesting and combinations of all those options described above. We recommend checking out the <a href=\"https://github.com/serverless/serverless/blob/master/docs/01-guide/08-serverless-variables.md\">documentation about the new variable system</a> so that you can see how powerful it is and what you can do with it. We’d love to hear your feedback about this as this change is a crucial one! How does it behave in production-ready applications? Is something important missing? Let us know! Note that this change is a breaking change. Please check the environment variable usage of your service and note that the <strong>serverless.env.yml</strong> file has been dropped. The <a href=\"https://github.com/serverless/serverless/blob/master/docs/01-guide/08-serverless-variables.md#migrating-serverlessenvyml\">documentation about the new variable system</a> will help you with the transition.</p>\n<h2>Custom request / response configuration for API Gateway</h2>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1593\">#1593</a>, <a href=\"https://github.com/serverless/serverless/pull/1968\">#1968</a> and <a href=\"https://github.com/serverless/serverless/pull/1920\">#1920</a> This was an often discussed and mentioned feature. It’s finally here thanks to the great discussion we had on how to implement it in a developer friendly way.</p>\n<h3>Request improvements</h3>\n<p>Serverless now supports two default request templates (one for the content type “application/json” and one for “application/x-www-form-urlencoded”) so that you can access all the necessary variables (e.g. like the <strong>body</strong>) inside of your functions code. Furthermore, you’re now able to set your own templates for other content types (or overwrite the default request templates) like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">create</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> posts.create\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> whatever\n          <span class=\"token key atrule\">request</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">text/xhtml</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">\"stage\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"$context.stage\"</span> <span class=\"token punctuation\">}</span>\n              <span class=\"token key atrule\">application/json</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">\"httpMethod\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"$context.httpMethod\"</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Response improvements</h3>\n<p>Response configuration was also improved. You are now able to set custom headers and a response template when setting up your API Gateway endpoint. Let’s look at an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">create</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> posts.create\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> whatever\n          <span class=\"token key atrule\">response</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">headers</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"'text/html'\"</span>\n            <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> $input.path('/pre<span class=\"token punctuation\">></span>)</code></pre></div>\n<p>Take a look at our <a href=\"http://docs.serverless.com\">new documentation</a> for more in-depth information about request and response configuration. <strong>Note:</strong> The new variable syntax which is <a href=\"#variable\">shown here</a> can help you to define external request / response templates like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">create</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> posts.create\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> whatever\n          <span class=\"token key atrule\">request</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">text/xhtml</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>file(request<span class=\"token punctuation\">-</span>template<span class=\"token punctuation\">-</span>file)<span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">response</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">headers</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">Content-Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"'text/html'\"</span>\n            <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>file(response<span class=\"token punctuation\">-</span>template<span class=\"token punctuation\">-</span>file)<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Thanks to <a href=\"https://github.com/oriolgual\">Oriol Gual (@oriolgual)</a> for composing a request template for the content type <strong>application/x-www-form-urlencoded</strong>.</p>\n<h2>Rename service and create directory on service creation</h2>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1726\">#1726</a>, <a href=\"https://github.com/serverless/serverless/issues/1902\">#1902</a>, <a href=\"https://github.com/serverless/serverless/issues/1616\">#1616</a>, <a href=\"https://github.com/serverless/serverless/pull/1937\">#1937</a> and <a href=\"https://github.com/serverless/serverless/pull/1910\">#1910</a> The create command helps you to create and setup a service scaffold in seconds. However, it would always create the necessary files in the CWD which meant that you had to create a directory and <strong>cd</strong> into that directory if you’d like to encapsulate all your service files into a dedicated folder. After you created the service you were also forced to open up the <strong>serverless.yml</strong> file and rename it accordingly. This task is tedious and cumbersome. It would be great if Serverless could support a way a accomplish those steps in one command. The new version of Serverless adds the <strong>—path</strong> option to the create command which does exactly that. It works as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">serverless create --template aws-nodejs --path my-awesome-service</code></pre></div>\n<p>This command will create a new directory (or reuse the existing one) with the name my-awesome-service for your service, copies all the necessary files in there and renames the service in the <strong>serverless.yml</strong> file to <strong>my-awesome-service</strong>. You’re also able to specify absolute and relative paths like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">serverless create --template aws-nodejs --path ./nested/my-awesome-service</code></pre></div>\n<p>In this case Serverless will create the corresponding service in the <strong>nested</strong> directory. You services name will be <strong>my-awesome-service</strong>. Thank you <a href=\"https://github.com/codepreneur\">Vaidas Mykolaitis (@codepreneur)</a> for reporting and <a href=\"https://github.com/mrlamroger\">Roger Lam (@mrlamroger)</a> for working on this issue!</p>\n<h2>Show real time CloudFormation stack status</h2>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1818\">#1818</a> and <a href=\"https://github.com/serverless/serverless/pull/1927\">#1927</a> Sometimes it just happens. You get an error when you try to deploy your service. Serverless returns some information about a CloudFormation stack problem but you need to see the whole CloudFormation output to know what’s going on. What do you do? You open up the AWS console, navigate to the CloudFormation service, select your stack and read through the logs. We’ve all been there. While this will help you better understand the real problem, it’s still bad UX. It would be great if you could simply see the CloudFormation stack trace in your console in real time while your stack is being deployed, updated or removed. This is now a reality! <a href=\"https://github.com/nicka\">Nick den Engelsman (@nicka)</a> jumped straight into this problem and implemented this amazing and very useful feature. All you need to do is to add the —verbose flag to your serverless deploy or serverless remove commands like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">serverless deploy --verbose</code></pre></div>\n<p>That’s it. Now you’ll see the CloudFormation outputs in real time! Nifty! <img src=\"https://s3-us-west-2.amazonaws.com/assets.site.serverless.com/blog/legacy/2016/09/0.png\"></p>\n<h2>Brand new documentation</h2>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1957\">#1957</a>, <a href=\"https://github.com/serverless/serverless/issues/1522\">#1522</a>, <a href=\"https://github.com/serverless/serverless/pull/1967\">#1967</a> and <a href=\"https://github.com/serverless/serverless/pull/2002\">#2002</a> A framework without a great documentation is nearly useless as nobody wants to read through the source code to see what’s possible and how to use it. However, compiling a great, easy to understand documentation is not as simple as it seems. It’s crucial to have a solid structure and also important to capture all of the details without providing unnecessary, non-relative information so that developers can have fun while building great Serverless applications. We’ve gathered a ton of feedback during our v1 journey so far from our amazing community and finally decided on a structure that will make it easy for you to follow along and see the full power the Serverless Framework provides! You can see the new documentation at <a href=\"http://docs.serverless.com\">docs.serverless.com</a>. As already mentioned, great documentation is key so we’d really like to hear your feedback about the structure and the understandability! Is something missing? How can we improve here? Let us know!</p>\n<h2>Other new features, improvements and fixes</h2>\n<p>The feature set from above is just a selection of improvements we wanted to highlight. You can review each and every change of this release in our <a href=\"https://github.com/serverless/serverless/milestone/13?closed=1\">corresponding milestone</a>. Let’s take a quick look at other features, improvements and fixes of our new release.</p>\n<h3>Individual packaging and deployment of functions</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1777\">#1777</a> and <a href=\"https://github.com/serverless/serverless/pull/1917\">#1917</a> The ability to individually package functions is a very important feature if you want to optimize your functions to start as quickly as possible. Thanks to <a href=\"https://github.com/johncmckim\">John McKim (@johncmckim)</a> you now have the option to package and deploy functions independently. Check out the <a href=\"https://github.com/serverless/serverless/blob/master/docs/01-guide/10-packaging.md#packaging-functions-separately\">packaging documentation</a> for more details.</p>\n<h3>Status code support for API Gateway</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/608\">#608</a> and <a href=\"https://github.com/serverless/serverless/pull/1998\">#1998</a> A key feature of every HTTP API is the support for the different statuses it can get into with the help of HTTP status codes (such as e.g. 400, 404 or 500). Serverless now supports the most common HTTP status codes out of the box. The only thing you need to do is to add the corresponding status code in square brackets in the error you raise like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> cb</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[404] Not found'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can see the full list of supported status codes in the API Gateway section of the <a href=\"http://docs.serverless.com\">docs</a>. A big thank you goes out to <a href=\"https://github.com/staceymoore\">Stacey Moore (@staceymoore)</a> who compiled the default error code templates.</p>\n<h3>Support for bigger CloudFormation templates</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1740\">#1740</a> and <a href=\"https://github.com/serverless/serverless/pull/1886\">#1886</a> Serverless uses CloudFormation behind the scenes to create the necessary AWS resources for your service. When we started the work on v1 we simply used an inline string representation of the CloudFormation template to deploy it via the AWS SDK. This introduces one problem. The more complex your service gets, the bigger the template which also means that you’ll soon hit the maximum character size the AWS SDK supports for inline CloudFormation templates. We’ve updated the whole deployment process so that the CloudFormation template gets deployed alongside your zipped service to the deployment S3 bucket. This way Serverless will now support very complex services as you won’t hit the maximum size for your CloudFormation template anytime soon. Thanks <a href=\"https://github.com/kid\">Arnaud Rebts (@kid)</a> for reporting this problem!</p>\n<h3>Documentation fixes</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/pull/1875\">#1875</a>, <a href=\"https://github.com/serverless/serverless/pull/1897\">#1897</a>, <a href=\"https://github.com/serverless/serverless/pull/1903\">#1903</a>, <a href=\"https://github.com/serverless/serverless/issues/1592\">#1592</a>, <a href=\"https://github.com/serverless/serverless/pull/1904\">#1904</a>, <a href=\"https://github.com/serverless/serverless/pull/1915\">#1915</a>, <a href=\"https://github.com/serverless/serverless/pull/1893\">#1893</a>, <a href=\"https://github.com/serverless/serverless/pull/1919\">#1919</a>, <a href=\"https://github.com/serverless/serverless/pull/1922\">#1922</a>, <a href=\"https://github.com/serverless/serverless/pull/1929\">#1929</a>, <a href=\"https://github.com/serverless/serverless/pull/1932\">#1932</a>, <a href=\"https://github.com/serverless/serverless/issues/1928\">#1928</a>, <a href=\"https://github.com/serverless/serverless/pull/1947\">#1947</a>, <a href=\"https://github.com/serverless/serverless/issues/1923\">#1923</a> An error free documentation is vital for any open source project. We’ve updated the docs and pushed some fixes and improvements there. A big thank you goes out to <a href=\"https://github.com/erikerikson\">Erik Erikson (@erikerikson)</a>, <a href=\"https://github.com/seanmadden\">Sean madden (@seanmadden)</a>, <a href=\"https://github.com/marioatlp\">Cris Favero (@marioatlp)</a>, <a href=\"https://github.com/osamakhn\">Osama Khan (@osamakhn)</a>, <a href=\"https://github.com/kennu\">Kenneth Falck (@kennu)</a> who helped to improve the documentation!</p>\n<h3>New issue and pull request templates</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/pull/1972\">#1972</a> Contributing to Serverless should be as easy and fun as possible. We’ve revamped the issue and pull request templates to make it even easier and more structured for you to contribute code or discuss about issues.</p>\n<h3>Rename custom authorizer default header</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1983\">#1983</a>, <a href=\"https://github.com/serverless/serverless/issues/1943\">#1943</a> and <a href=\"https://github.com/serverless/serverless/pull/1985\">#1985</a> This bugfix resolves an issue where the default header was named <strong>Auth</strong> instead of <strong>Authorization</strong> by mistake. Thank you <a href=\"https://github.com/nguyer\">Nicko Guyer(@nguyer)</a> and <a href=\"https://github.com/kennu\">Kenneth Falck (@kennu)</a> for reporting and <a href=\"https://github.com/kennu\">Kenneth Falck (@kennu)</a> providing a fix for this one.</p>\n<h3>Fix bug where custom CORS headers were not set</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1984\">#1984</a>, <a href=\"https://github.com/serverless/serverless/pull/1988\">#1988</a> and <a href=\"https://github.com/serverless/serverless/pull/1989\">#1989</a> A bug slipped through where custom CORS headers were not set correctly. <a href=\"https://github.com/yonahforst\">Yonah Forst (@yonahforst)</a> and <a href=\"https://github.com/puug\">@puug</a> were kind enough to resolve this one! Thank you!</p>\n<h3>Move from jszip to archiverjs for service zipping</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1954\">#1954</a>, <a href=\"https://github.com/serverless/serverless/issues/1959\">#1959</a> and <a href=\"https://github.com/serverless/serverless/pull/1961\">#1961</a> The more packages you use, the more files need to be zipped up so that the code of your service can be uploaded to S3. We’ve used the awesome <a href=\"https://stuk.github.io/jszip/\">JSZip</a> library in the past to do the archiving. Unfortunately a high amount of files to zip slows down the performance and yields to a high memory footprint which slows down deployments or even crashes CI / CD systems. From now on Serverless uses the neat <a href=\"http://archiverjs.com\">Archiverjs</a> library behind the scenes to zip your services! A big thank you goes out to <a href=\"https://github.com/wedgybo\">Jamie Sutherland (@wedgybo)</a> and <a href=\"https://github.com/josephfinlayson\">Joseph Finlayson (@josephfinlayson)</a> for reporting this issue and <a href=\"https://github.com/wedgybo\">Jamie Sutherland (@wedgybo)</a> for providing a fix. Furthermore, we’d like to thank <a href=\"https://github.com/ctalkington\">Chris Talkington (@ctalkington)</a> who was kind enough to release a new Archiverjs version with <a href=\"https://github.com/archiverjs/node-archiver/pull/201\">a necessary fix</a> by <a href=\"https://github.com/wedgybo\">Jamie Sutherland (@wedgybo)</a> to resolve this issue</p>\n<h3>Allow ARN for IAM Role</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/351\">#351</a>, <a href=\"https://github.com/serverless/serverless/issues/1772\">#1772</a>, <a href=\"https://github.com/serverless/serverless/issues/1969\">#1969</a> and <a href=\"https://github.com/serverless/serverless/pull/1975\">#1975</a> Custom ARNs which point to an IAM role can now be used as the execution role for lambda functions. Thank you to <a href=\"https://github.com/visualasparagus\">@visualasparagus</a> and <a href=\"https://github.com/parthaMyndbee\">@parthaMyndbee</a> for reporting and <a href=\"https://github.com/horike37\">Takahiro Horike (@horike37)</a> for implementing this feature.</p>\n<h3>Documentation on how to use VPCs</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/pull/1893\">#1893</a> Setting up and configuring a VPC is key for security when dealing with a Serverless architecture. This feature was implemented in the past, but it was not fully documented on how to use it. <a href=\"https://github.com/erikerikson\">Erik Erikson (@erikerikson)</a> helped here and provided the correct documentation on how to set it up.</p>\n<h3>Creating authorizers with object notation</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1948\">#1948</a> and <a href=\"https://github.com/serverless/serverless/pull/1970\">#1970</a> A bug which prevented the correct setup of authorizers when configuring them with the help of the object notation was fixed thanks to <a href=\"https://github.com/nguyer\">Nicko Guyer (@nguyer)</a> and <a href=\"https://github.com/tomesch\">Thomas Eschemann (@tomesch)</a>.</p>\n<h3>Removal of automatic servicePath detection (BREAKING CHANGE)</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1192\">#1192</a> and <a href=\"https://github.com/serverless/serverless/pull/1882\">#1882</a> Until now Serverless was able to automatically detect the service even if your CWD is a deeply nested directory in your service. The previously implemented method would go back one directory at a time and check if there’s a <strong>serverless.yaml</strong> or <strong>serverless.yml</strong> file. While this was a great UX (as you don’t have to cd into the services root to execute CLI commands) it also introduces a huge potential for bugs where e.g. a command might be executed in a wrong service. We’ve removed this automatic servicePath detection so that your CWD needs to be the root of your service (where your <strong>serverless.yml</strong> file lives). This makes the whole process way more predictable and stable while moving forward.</p>\n<h3>Update of dev dependencies</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1854\">#1854</a> and <a href=\"https://github.com/serverless/serverless/pull/1879\">#1879</a> We use different development packages like linters and their corresponding style guides (Airbnb style) to make the work on the project easier for everyone contributing code. New linting rules get introduced from time to time which means that we have to take care of updating them in time. Thankfully <a href=\"https://github.com/jokeyrhyme\">Ron Waldon (@jokeyrhyme)</a> noticed this and <a href=\"https://github.com/nickchisiu\">Nick Chisiu (@nickchisiu)</a> was kind enough to jump on this one.</p>\n<h3>Fix zipping problems on Windows machine</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1860\">#1860</a>, <a href=\"https://github.com/serverless/serverless/issues/1925\">#1925</a>, <a href=\"https://github.com/serverless/serverless/issues/1835\">#1835</a>, <a href=\"https://github.com/serverless/serverless/pull/1857\">#1857</a> and <a href=\"https://github.com/serverless/serverless/pull/1863\">#1863</a> Our zipping functionality had a bug when zipping files on windows machines. This introduced strange behavior when e.g. referencing packages from the <strong>node_modules</strong> directory. Fortunately this bug has been fixed! Thanks to <a href=\"https://github.com/smuffff\">Adam (@smuffff)</a> and <a href=\"https://github.com/charlierm\">Charlie Mills (@charliem)</a> for reporting and <a href=\"https://github.com/miltador\">Vasiliy Solovey (@miltador)</a> and <a href=\"https://github.com/bfhobbes\">@bfhobbes</a> for fixing this bug!</p>\n<h3>Updated artifact deployment process (BREAKING CHANGE)</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1898\">#1898</a>, <a href=\"https://github.com/serverless/serverless/issues/1892\">#1892</a>, <a href=\"https://github.com/serverless/serverless/issues/1862\">#1862</a> and <a href=\"https://github.com/serverless/serverless/pull/1906\">#1906</a> The past deployment process only uploaded the .zipped service file to the S3 bucket. We’ve updated it so that a timestamped “directory” gets created in S3 where we’ll upload all the necessary deployment artifacts (such as the .zipped service file and the corresponding CloudFormation template). The 5 most recent versions of your deployments are stored there. If you’re updating from an older Serverless version you might want to take a look at your deployment bucket and remove old, timestamped service .zip files by hand as they’re not used anymore. Thanks to <a href=\"https://github.com/kaklakariada\">@kaklakariada</a> who helped here by reporting issues with Java deployment.</p>\n<h3>Custom validation rules for plugin options</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1271\">#1271</a> and <a href=\"https://github.com/serverless/serverless/pull/1978\">#1978</a> Our plugin system is the core of the framework. Nearly everything is a plugin which simply extends the Serverless core system. Plugin authors are also able to extend Serverless with the help of their own plugins. Sometimes you as a plugin author want to validate the input a user provides. In the past you could used the required: true definition to raise an error if an option was not given. While this covers some use cases it would be even more powerful if there’s a way to validate input against a regular expression and raise a custom error message when the match fails. This is now possible thanks to the work of <a href=\"https://github.com/horike37\">Takahiro Horike (@horike37)</a>. Here’s an example of what a custom validation inside of a plugins options definition looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token key atrule\">usage</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Stage of the service'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token key atrule\">shortcut</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token key atrule\">usage</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Region of the service'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token key atrule\">shortcut</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token key atrule\">customValidation</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token key atrule\">regularExpression</span><span class=\"token punctuation\">:</span> /^<span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span>+$/<span class=\"token punctuation\">,</span>\n      <span class=\"token key atrule\">errorMessage</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Custom Error Message'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Specifying API Gateway request passthrough behavior</h3>\n<p>See <a href=\"https://github.com/serverless/serverless/issues/1168\">#1168</a> and <a href=\"https://github.com/serverless/serverless/pull/2000\">#2000</a> Sometimes you need more control over how a request should be handled if an incoming content type is not setup to be handled in API Gateway. AWS has added the so called “passthrough behavior” you can use to handle such scenarios. You can use the following rules to setup whether the request should be passed through:</p>\n<ul>\n<li>NEVER</li>\n<li>WHEN<em>NO</em>MATCH</li>\n<li>WHEN<em>NO</em>TEMPLATES</li>\n</ul>\n<p>This feature was implemented in a way that it defaults to NEVER so that your APIs are always secured. However you can switch to the other configuration by using the passThrough parameter in the requests <strong>http</strong> event definition:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">create</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> posts.create\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> whatever\n          <span class=\"token key atrule\">request</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">passThrough</span><span class=\"token punctuation\">:</span> WHEN_NO_TEMPLATES</code></pre></div>\n<p>Thank you <a href=\"https://github.com/HyperBrain\">Frank Schmid (@HyperBrain)</a> for raising this issue and <a href=\"https://github.com/anreved\">John DeVerna (@anreved)</a> for implementing it!</p>\n<h2>Breaking changes</h2>\n<p>Moving fast unfortunately means that something might be reconsidered and introduces some breaking changes (which we’re sorry about).</p>\n<ul>\n<li><a href=\"#renaming\">Renaming of resources logical IDs</a></li>\n<li><a href=\"#variable\">New Serverless variable system</a></li>\n<li><a href=\"#servicePath\">Removal of automatic servicePath detection</a></li>\n<li><a href=\"#artifact\">Updated artifact deployment process</a></li>\n</ul>\n<h2>Reaching 10,000 GitHub stars</h2>\n<p>After looking at all the amazing new features it’s time to celebrate! On Friday, 19th of August Serverless finally broke the 10,000 GitHub stars mark! <img src=\"https://s3-us-west-2.amazonaws.com/assets.site.serverless.com/blog/legacy/2016/09/1.png\"> We’d like to thank everyone who has supported us so far! We’re proud to have such a great community and are excited about the future with all of you! <strong>Thank you!</strong></p>\n<h2>New homepage</h2>\n<p>We also took some time to work on our brand new Serverless homepage. Check it out at <a href=\"https://serverless.com\">https://serverless.com</a>. Curious what this looks like in code? We’ve got you covered! Our homepage is open source and the corresponding code can be found <a href=\"https://github.com/serverless/site\">here</a>.</p>\n<h2>Your feedback / contributing to Serverless</h2>\n<p>As already mentioned in the beginning of this post, we’d like to thank each and every one of you who worked with us together to make the first release candidate of Serverless v1 so feature rich! We’re always open to feedback, issues, pull requests and anything else to help build the greatest Serverless experience you can get! Do you want to contribute to the Serverless framework? Take a look at our repository and the corresponding issue labels (<a href=\"https://github.com/serverless/serverless/labels/milestone-discussion\">milestone-discussion</a>, <a href=\"https://github.com/serverless/serverless/labels/discussion\">discussion</a>, <a href=\"https://github.com/serverless/serverless/labels/help-wanted-easy\">help-wanted-easy</a> and <a href=\"https://github.com/serverless/serverless/labels/help-wanted\">help-wanted</a>) to get started. Also feel free to jump right into discussions on <a href=\"https://github.com/serverless/serverless\">GitHub</a>, our <a href=\"http://forum.serverless.com\">Serverless forum</a>, <a href=\"https://gitter.im/serverless/serverless\">Gitter</a> and <a href=\"http://twitter.com/goserverless\">Twitter</a>.</p>\n<h2>What’s next</h2>\n<p>This is our first v1 release candidate which means that Serverless v1 is right around the corner! Next up we’re planning to resolve the last issues / bugs to blaze the way for the release of Serverless v1. You can follow the progress on our <a href=\"https://github.com/serverless/serverless/milestone/8\">v1 milestone</a> on GitHub.</p>","frontmatter":{"title":"New Release: Serverless V1.0 rc.1","date":"September 06, 2016","description":"New Serverless variable system for serverless.yml added to the serverless framework"}}},"pageContext":{"slug":"/posts/2016-09-06-serverless-v1-0-rc-1/","previous":{"fields":{"slug":"/posts/2016-09-01-defining-serverless-and-why-it-matters-to-developers/"},"frontmatter":{"title":"Defining Serverless and Why It Matters to Developers"}},"next":{"fields":{"slug":"/posts/2016-09-09-interview-with-peter-sbarski-of-serverlessconf/"},"frontmatter":{"title":"Interview with Peter Sbarski of Serverlessconf London + Registration Discount"}}}}}
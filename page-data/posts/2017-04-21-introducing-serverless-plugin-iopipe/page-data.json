{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-04-21-introducing-serverless-plugin-iopipe/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"4e00a2c4-ca63-5ccb-9988-c6d57b778555","excerpt":"At IOpipe, we enable users of AWS Lambda to monitor, analyze, and tune their serverless architectures. Getting started is a breeze with the iopipe wrapper‚Ä¶","html":"<p>At <a href=\"https://iopipe.com\">IOpipe</a>, we enable users of AWS Lambda to monitor, analyze, and tune their serverless architectures. Getting started is a breeze with the <a href=\"https://github.com/iopipe/iopipe\">iopipe wrapper library</a>.</p>\n<p><a href=\"https://serverless.com/\">The Serverless Framework</a> is an indispensable tool for Lambda, OpenWhisk, and Azure functions-as-service development and deployment. Once you get the hang of launching functions with it, the sky‚Äôs the limit. But when you have 10 or 100 functions, you might want to abstract your build pipeline further to include your favorite tooling + processes. There are <a href=\"https://github.com/serverless/plugins\">plenty of powerful plugins already</a>.</p>\n<p>So to enable even <em>easier</em> integration with IOpipe, <a href=\"https://github.com/iopipe/serverless-plugin-iopipe\">we made a plugin too</a>.</p>\n<h2>How Does it Work?</h2>\n<p>The task of code modification shouldn‚Äôt be taken lightly - and luckily we don‚Äôt have to reinvent the wheel here. We can use an <a href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\">AST parser</a> and builder to do the hard work for us. With the rise of varied JS build tools, AST libraries are certainly <em>en vogue</em> and we have plenty of options. For this project we use <a href=\"https://github.com/facebook/jscodeshift\">jscodeshift</a> that provides some nice sugar on top of <a href=\"https://github.com/benjamn/recast\">recast</a>.</p>\n<h3>What are we trying to accomplish?</h3>\n<p>Here‚Äôs a super-simple function that outputs a message with a UUID.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> uuid <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'uuid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">handler</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      message<span class=\"token operator\">:</span> <span class=\"token string\">'Your uuid is: '</span> <span class=\"token operator\">+</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      input<span class=\"token operator\">:</span> event\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now say we need some extra metrics for our little function - how often it runs, when it errors, <a href=\"https://read.iopipe.com/detecting-cold-starts-with-iopipe-9fe96425e859\">why it was slow</a>. It‚Äôs time for IOpipe.</p>\n<p>Here‚Äôs the new code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> uuid <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'uuid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> iopipe <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'iopipe'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>clientId<span class=\"token operator\">:</span> <span class=\"token string\">'TOKEN'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> <span class=\"token function\">iopipe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      message<span class=\"token operator\">:</span> <span class=\"token string\">'Your uuid is: '</span> <span class=\"token operator\">+</span> uuid<span class=\"token punctuation\">.</span><span class=\"token function\">v4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      input<span class=\"token operator\">:</span> event\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nice and straightforward. The IOpipe library automatically records stats about the invocation and makes it ready for inspection in near real-time. How can we go from A => B automatically though?</p>\n<h3>Putting Code In Your Code</h3>\n<p>Let‚Äôs fire up jscodeshift and parse that üå¥. First, we need to find the AST ‚Äúnode‚Äù that we want to wrap.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> shift <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jscodeshift'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> code <span class=\"token operator\">=</span> <span class=\"token string\">'The string literal of the code to transform (from above)'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> searchObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  left<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">'MemberExpression'</span><span class=\"token punctuation\">,</span>\n    object<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'Identifier'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'exports'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    property<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">'Identifier'</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'handler'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> found <span class=\"token operator\">=</span> <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>shift<span class=\"token punctuation\">.</span>AssignmentExpression<span class=\"token punctuation\">,</span> searchObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This simply looks for the statement</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports<span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> <span class=\"token comment\">//anything here</span></code></pre></div>\n<p>With our code represented as a tree, the original formatting won‚Äôt make a lick of difference. As long as it runs the same, we will still find the statement we need.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">exports\n  <span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> <span class=\"token comment\">// üòé this will work too</span></code></pre></div>\n<p>Within the Serverless plugin lifecycle, we know the functions defined in the <code class=\"language-text\">serverless.yml</code> and what the handlers are named. With this info, we can be fairly confident that the right side of the statement will be a function. This is the function we need to wrap.</p>\n<p>We create a new AST node from raw text and insert the original function node into that.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> wrapper <span class=\"token operator\">=</span> <span class=\"token string\">\"require('iopipe')({clientId: 'TOKEN'})(REPLACE)\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">shift</span><span class=\"token punctuation\">(</span>wrapper<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>shift<span class=\"token punctuation\">.</span>Identifier<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'REPLACE'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">replaceWith</span><span class=\"token punctuation\">(</span>found<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Not bad! You can see the <a href=\"https://github.com/iopipe/serverless-plugin-iopipe/blob/master/src/transform.js\">real thing here</a>.</p>\n<h3>Uploading the Result</h3>\n<p>Serverless provides some great <em>hooks</em> to work with and the ones we are after here are\n<code class=\"language-text\">before:deploy:createDeploymentArtifacts</code></p>\n<p><code class=\"language-text\">after:deploy:createDeploymentArtifacts</code></p>\n<p>The plugin creates a temporary <code class=\"language-text\">.iopipe</code> folder, copies the source code, applies transformations, and tells Serverless to use the transformed code instead of the source code. After it‚Äôs done deploying the <code class=\"language-text\">.iopipe</code> folder is deleted and we go on with our day. Thanks to <a href=\"https://github.com/jogold\">Jonathan Goldwasser</a> for inspiration from the <a href=\"https://github.com/jogold/serverless-webpack-plugin\">Serverless Webpack Plugin</a>.</p>\n<h2>What Else?</h2>\n<p>While we‚Äôre at it, why not keep your IOpipe npm package up to date? Upgrading automatically provides the latest speed, developer experience, and feature enhancements.</p>\n<p>While the process of auto-upgrading the package could be a separate post, the main idea is to fire off a <a href=\"https://nodejs.org/api/child_process.html\">child process</a> to run some npm commands. We ‚ù§Ô∏è <a href=\"https://yarnpkg.com\">yarn</a> at IOpipe, so we also support that.</p>\n<p>A simplified example:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  <span class=\"token function\">npm</span> outdated <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">yarn</span> <span class=\"token function\">add</span> iopipe@latest</code></pre></div>\n<p>And <a href=\"https://github.com/iopipe/serverless-plugin-iopipe/blob/master/src/index.js#L148\">check out the real stuff</a>.</p>\n<h2>Final Thoughts</h2>\n<p>The <a href=\"https://github.com/iopipe/serverless-plugin-iopipe\">IOpipe Serverless Plugin</a> is now available in Beta for you to try out. Let us know what you think!</p>","frontmatter":{"title":"Enhanced Analytics & Monitoring for your Serverless Apps with the IOpipe Serverless Plugin - Now in Beta","date":"April 21, 2017","description":"Activate analytics and alerts quickly by automatically wrapping your Serverless functions with IOpipe."}}},"pageContext":{"slug":"/posts/2017-04-21-introducing-serverless-plugin-iopipe/","previous":{"fields":{"slug":"/posts/2017-04-17-software-engineering-resources/"},"frontmatter":{"title":"7 Must Read Books for Becoming a Better Software Developer"}},"next":{"fields":{"slug":"/posts/2017-04-25-keep-your-lambdas-warm/"},"frontmatter":{"title":"Keeping Functions Warm - How To Fix AWS Lambda Cold Start Issues"}}}}}
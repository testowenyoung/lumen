{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2016-10-14-building-a-serverless-screenshot-service-with-lambda/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"ceb89e54-2243-5f95-ad10-fceebd2afd83","excerpt":"A client recently requested a feature involving screenshots of random URLs. Now, there are several services out there that will do this for you. Most of these…","html":"<p>A client recently requested a feature involving screenshots of random URLs. Now, there are several services out there that will do this for you. Most of these services have interesting REST APIs and pricing models, but I really wanted to develop something with <a href=\"https://serverless.com/\">Serverless</a>. So I took this opportunity to check it out.</p>\n<p>This application will run on AWS Lambda. You can find all the source code mentioned in <a href=\"https://github.com/svdgraaf/serverless-screenshot\">this repository</a>.</p>\n<h1><strong>Quick installation</strong></h1>\n<p>If you just want to launch the service yourself, you can use this button which will setup everything for you in your AWS account through the magic of CloudFormation:</p>\n<p><a href=\"https://console.aws.amazon.com/cloudformation/home?region=eu-west-1#/stacks/new?stackName=serverless-screenshot-service&#x26;templateURL=https://s3-eu-west-1.amazonaws.com/serverless-screenshots-service/2016-09-23T12%3A50%3A03/template.yml\"><img src=\"https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png\" alt=\"Launch Awesomeness\"></a></p>\n<h2><strong>Overview</strong></h2>\n<p>We’re going to create a service to which we can <code class=\"language-text\">POST</code> a URL. It will capture and store a screenshot of the given URL for us, then return a URL where we can download the screenshot. We also want to generate different thumbnail sizes of every screenshot, and we want to be able to list all the available thumbnail sizes of a URL.</p>\n<p>The architecture of what we’re going to build, looks like this:</p>\n<p><img src=\"https://github.com/svdgraaf/serverless-screenshot/raw/master/docs/architecture.png\" alt=\"Lambda Screenshot Architecture\"></p>\n<p><em>Architecture for this project</em></p>\n<p>The app posts to <a href=\"https://aws.amazon.com/api-gateway/\">API Gateway</a>, which triggers a Lambda function that will take the screenshot and upload it to the S3 bucket. It will then return the URL for the created screenshot.</p>\n<p>When the file gets uploaded (putObject) to the S3 bucket, it will trigger the <code class=\"language-text\">Create Thumbnails</code> function, which will take the screenshot as input and use ImageMagick to create several thumbnail versions of the given image, and then upload those to the same bucket.</p>\n<p>Lastly, there will be a function that the app can call to get a list of all available thumbnail sizes. The app can use the returned URLs to present them to the end user and their browser will download it through <a href=\"https://aws.amazon.com/cloudfront/\">CloudFront</a> from S3.</p>\n<p>You can find all the source code for this project in this <a href=\"https://github.com/svdgraaf/serverless-screenshot\">repository</a>.</p>\n<h2><strong>List of resources</strong></h2>\n<p>For this project we’re going to need to setup:</p>\n<ul>\n<li>One Lambda function triggered by a <code class=\"language-text\">POST</code> event</li>\n<li>One Lambda function triggered by a <code class=\"language-text\">GET</code> event</li>\n<li>One Lambda function triggered by an S3 <code class=\"language-text\">CreateObject</code> event</li>\n<li>Extra IAM Role access for the screenshot bucket</li>\n<li>An S3 bucket for the screenshots</li>\n<li>A CloudFront distribution for serving the screenshots</li>\n</ul>\n<h1><strong>Getting Started</strong></h1>\n<p>This is my first project in Node.js, so bear with me (I’m more of a Python guy). Any tips or PRs are greatly appreciated.</p>\n<p>When you download the project you can just run a <code class=\"language-text\">npm install</code> to install all of the requirements and get started. Keep reading if you want to follow along from scratch. Be sure to install the latest Serverless version (<code class=\"language-text\">npm install -g serverless</code>).</p>\n<p>We’ll start the project by creating a new project in the current directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">serverless create --template aws-nodejs</code></pre></div>\n<p>We now have a directory with a couple of files:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> -l\ntotal <span class=\"token number\">32</span>\n-rw-r--r--  <span class=\"token number\">1</span> svdgraaf  staff    <span class=\"token number\">54</span> Sep  <span class=\"token number\">6</span> <span class=\"token number\">19</span>:44 README.md\n-rw-r--r--  <span class=\"token number\">1</span> svdgraaf  staff    <span class=\"token number\">63</span> Sep  <span class=\"token number\">6</span> <span class=\"token number\">19</span>:48 event.json\n-rw-r--r--  <span class=\"token number\">1</span> svdgraaf  staff   <span class=\"token number\">128</span> Sep  <span class=\"token number\">6</span> <span class=\"token number\">19</span>:48 handler.js\n-rw-r--r--  <span class=\"token number\">1</span> svdgraaf  staff  <span class=\"token number\">1754</span> Sep  <span class=\"token number\">6</span> <span class=\"token number\">19</span>:48 serverless.yml</code></pre></div>\n<p>The <code class=\"language-text\">handler.js</code> file will contain our functions, and with <code class=\"language-text\">event.json</code> we can simulate our calls. I later moved this to an <code class=\"language-text\">events</code> directory so I could simulate multiple events for the other calls.</p>\n<p>Let’s first take a look at the <code class=\"language-text\">serverless.yml</code> file that contains the configuration for our Service.</p>\n<h2><strong>Provider configuration</strong></h2>\n<p>First, we need to setup our provider configuration—in this case we’ll use <code class=\"language-text\">aws</code>, with <code class=\"language-text\">nodejs4.3</code>. We’ll also add an API key so we can securely use our API, and add some IAM rules to allow the functions to list and upload to the S3 bucket.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs4.3\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n\n  <span class=\"token comment\"># We want to lock down the ApiGateway, so we can control who can use the api</span>\n  <span class=\"token key atrule\">apiKeys</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> thumbnail<span class=\"token punctuation\">-</span>api<span class=\"token punctuation\">-</span>key\n\n  <span class=\"token comment\"># We need to give the lambda functions access to list and write to our bucket, it needs:</span>\n  <span class=\"token comment\"># - to be able to 'list' the bucket</span>\n  <span class=\"token comment\"># - to be able to upload a file (PutObject)</span>\n  <span class=\"token key atrule\">iamRoleStatements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">Effect</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Allow\"</span>\n     <span class=\"token key atrule\">Action</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">\"s3:ListBucket\"</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">\"s3:PutObject\"</span>\n      <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">\"Fn::Join\"</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"arn:aws:s3:::\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">\"Ref\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"ThumbnailBucket\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">]</span>  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2><strong>Functions</strong></h2>\n<p>We need to create three functions: one for taking a screenshot (called, you guessed it: <code class=\"language-text\">takeScreenshot</code>), one for creating a thumbnail of the screenshots (<code class=\"language-text\">createThumbnails</code>), and one for listing the available screenshot sizes (<code class=\"language-text\">listScreenshots</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">takeScreenshot</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.take_screenshot\n    <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>  <span class=\"token comment\"># our screenshots can take a while sometimes</span>\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> screenshots\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> post\n          <span class=\"token comment\"># Marking the function as private will require a valid api-key</span>\n          <span class=\"token key atrule\">private</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n          <span class=\"token key atrule\">request</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># we want to mark the url param as required</span>\n            <span class=\"token key atrule\">parameters</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">querystrings</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n  <span class=\"token key atrule\">listScreenshots</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.list_screenshots\n    <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span>\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> screenshots\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get\n          <span class=\"token key atrule\">private</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n          <span class=\"token key atrule\">request</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">parameters</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">querystrings</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n  <span class=\"token key atrule\">createThumbnails</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.create_thumbnails\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># this event type will also create the screenshots bucket and trigger</span>\n      <span class=\"token comment\"># the lambda function every time a file is uploaded (ObjectCreated)</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">s3</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">bucket</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.bucket_name<span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">event</span><span class=\"token punctuation\">:</span> s3<span class=\"token punctuation\">:</span>ObjectCreated<span class=\"token punctuation\">:</span>*</code></pre></div>\n<h2><strong>Custom Resources</strong></h2>\n<p>We also need a CloudFront distribution to serve our screenshots. This is not supported by Serverless out of the box, so we need to create a custom resource for it. We’ll also define some <code class=\"language-text\">Output</code>s, so we can use these later on.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Outputs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">ScreenshotBucket</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Screenshot bucket name\"</span>\n      <span class=\"token key atrule\">Value</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.bucket_name<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">CloudFrontUrl</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"CloudFront url\"</span>\n      <span class=\"token key atrule\">Value</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token key atrule\">\"Fn::GetAtt\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"CloudFrontEndpoint.DomainName\"</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token key atrule\">Resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Create an endpoint for the S3 bucket in CloudFront</span>\n    <span class=\"token comment\"># this configuration basically just sets up a forwarding of requests</span>\n    <span class=\"token comment\"># to S3, and forces all traffic to https</span>\n    <span class=\"token key atrule\">CloudFrontEndpoint</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> AWS<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>CloudFront<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span>Distribution\n      <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">DistributionConfig</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">Enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">True</span>\n          <span class=\"token key atrule\">DefaultCacheBehavior</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">TargetOriginId</span><span class=\"token punctuation\">:</span> ScreenshotBucketOrigin\n            <span class=\"token key atrule\">ViewerProtocolPolicy</span><span class=\"token punctuation\">:</span> redirect<span class=\"token punctuation\">-</span>to<span class=\"token punctuation\">-</span>https\n            <span class=\"token key atrule\">ForwardedValues</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">QueryString</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">True</span>\n          <span class=\"token key atrule\">Origins</span><span class=\"token punctuation\">:</span>\n            <span class=\"token punctuation\">-</span>\n              <span class=\"token key atrule\">Id</span><span class=\"token punctuation\">:</span> ScreenshotBucketOrigin\n              <span class=\"token key atrule\">DomainName</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.bucket_name<span class=\"token punctuation\">}</span>.s3.amazonaws.com\n              <span class=\"token key atrule\">CustomOriginConfig</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">OriginProtocolPolicy</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">-</span>only</code></pre></div>\n<h2><strong>Plugin variables</strong></h2>\n<p>We use the <a href=\"https://www.npmjs.com/package/serverless-plugin-stage-variables\">stage-variables</a> plugin so we can set stage variables in API Gateway, which we can then use in our Lambda functions. You can configure them in the <code class=\"language-text\">custom</code> section. This also allows us to use <a href=\"https://aws.amazon.com/cloudformation/\">CloudFormation</a> references inside our Lambda functions. CloudFormation will fill in the values with the actual output for us.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># change this, so it's unique for your setup</span>\n  <span class=\"token key atrule\">bucket_name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>provider.stage<span class=\"token punctuation\">,</span>opt<span class=\"token punctuation\">:</span>stage<span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>USER<span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>screenshots\n\n  <span class=\"token comment\"># these variables are passed on through ApiGateway, to be used</span>\n  <span class=\"token comment\"># in your functions in the event.stageVariables</span>\n  <span class=\"token key atrule\">stageVariables</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">bucketName</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.bucket_name<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">endpoint</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token key atrule\">\"Fn::Join\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"https://\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">\"Fn::GetAtt\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"CloudFrontEndpoint.DomainName\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h1><strong>Defining functions</strong></h1>\n<p>You should define your functions in the <code class=\"language-text\">handler.js</code> file. In our case, it will hold three functions: <code class=\"language-text\">take_screenshot</code>, <code class=\"language-text\">list_screenshots</code> and <code class=\"language-text\">create_thumbnails</code>. You can use the <code class=\"language-text\">handler</code> definition in the <code class=\"language-text\">functions</code> section of <code class=\"language-text\">serverless.yml</code> to give you the option of using different files if you want to separate them. The actual implementations of the functions are in the <a href=\"https://github.com/svdgraaf/serverless-screenshot/blob/master/handler.js\">repository</a>.</p>\n<p>The functions will always receive three variables: <code class=\"language-text\">event</code>, <code class=\"language-text\">context</code> and <code class=\"language-text\">cb</code>. The <code class=\"language-text\">event</code> will contain the event that triggered the Lambda (in our case, either an API Gateway call or the S3 bucket event). The <code class=\"language-text\">context</code> variable contains the Lambda context to find out how much memory you have—the platform, etc. The <code class=\"language-text\">cb</code> (callback) variable can be used to signal for error or success.</p>\n<h2><strong>Event variables</strong></h2>\n<p>You will receive different events depending on which service it came from. In the case of our API Gateway events, we get a lot of info—headers, query parameters, stage variables, etc. In our case, we’re only using <code class=\"language-text\">event.query</code> and <code class=\"language-text\">event.stageVariables</code>, but there is also <code class=\"language-text\">event.headers</code>, <code class=\"language-text\">event.body</code>, etc. The mapping to the event is defined by Serverless, and the default mapping (and fields) can be seen in the <a href=\"https://github.com/serverless/serverless/blob/master/lib/plugins/aws/deploy/compile/events/apiGateway/lib/methods.js#L98\">repository</a>.</p>\n<h2><strong>Extra binaries</strong></h2>\n<p>For this project we will need some extra binaries (<a href=\"http://phantomjs.org/\">PhantomJS</a> in particular) to take the screenshots. We’ll also use <a href=\"http://www.imagemagick.org/script/index.php\">ImageMagick</a>, but that is provided by AWS by default in the Lambda image, so we don’t package it separately.</p>\n<p>Serverless will package any extra files in the project directory automatically, so adding extra binaries is as simple as just creating a directory and adding the files.</p>\n<p>If you need compiled binaries you can use <a href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html\">Amazon Machine Images (AMI)</a> to spin up an EC2 instance (or use this easy <a href=\"https://hub.docker.com/r/lambci/lambda/\">docker container</a>), compile <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html\">your own binaries</a>, and copy them over to your project. The <a href=\"https://github.com/svdgraaf/serverless-screenshot\">project repository</a> already contains the binaries you can use.</p>\n<h1><strong>Deploying</strong></h1>\n<p>We can deploy the application now that we have everything in place. It’s a good idea to use different deployment environments, so let’s start with a <code class=\"language-text\">dev</code> environment: <code class=\"language-text\">sls deploy -s dev</code>. This will zip everything together (including the binaries), create a deployment bucket, upload the zip file, and update the CloudFormation template with all the resources that we need.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sls deploy -s dev --verbose</code></pre></div>\n<p>(the <code class=\"language-text\">--verbose</code> will show you all the CloudFormation output during deployment, very nice!).</p>\n<p>After the deployment is done, you will see the end results:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">Service Information\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> lambda<span class=\"token punctuation\">-</span>screenshots\n<span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n<span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n<span class=\"token key atrule\">endpoints</span><span class=\"token punctuation\">:</span>\n  POST <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//123g1jc802.execute<span class=\"token punctuation\">-</span>api.us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span>1.amazonaws.com/dev/screenshots\n  GET <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//123g1jc802.execute<span class=\"token punctuation\">-</span>api.us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span>1.amazonaws.com/dev/screenshots\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">lambda-screenshots-dev-listScreenshots</span><span class=\"token punctuation\">:</span> arn<span class=\"token punctuation\">:</span>aws<span class=\"token punctuation\">:</span>lambda<span class=\"token punctuation\">:</span>us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span>1<span class=\"token punctuation\">:</span>123123123123<span class=\"token punctuation\">:</span>function<span class=\"token punctuation\">:</span>lambda<span class=\"token punctuation\">-</span>screenshots<span class=\"token punctuation\">-</span>dev<span class=\"token punctuation\">-</span>listScreenshots\n  <span class=\"token key atrule\">lambda-screenshots-dev-createThumbnails</span><span class=\"token punctuation\">:</span> arn<span class=\"token punctuation\">:</span>aws<span class=\"token punctuation\">:</span>lambda<span class=\"token punctuation\">:</span>us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span>1<span class=\"token punctuation\">:</span>123123123123<span class=\"token punctuation\">:</span>function<span class=\"token punctuation\">:</span>lambda<span class=\"token punctuation\">-</span>screenshots<span class=\"token punctuation\">-</span>dev<span class=\"token punctuation\">-</span>createThumbnails\n  <span class=\"token key atrule\">lambda-screenshots-dev-takeScreenshot</span><span class=\"token punctuation\">:</span> arn<span class=\"token punctuation\">:</span>aws<span class=\"token punctuation\">:</span>lambda<span class=\"token punctuation\">:</span>us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span>1<span class=\"token punctuation\">:</span>123123123123<span class=\"token punctuation\">:</span>function<span class=\"token punctuation\">:</span>lambda<span class=\"token punctuation\">-</span>screenshots<span class=\"token punctuation\">-</span>dev<span class=\"token punctuation\">-</span>takeScreenshot</code></pre></div>\n<p><strong>Awesome!</strong> Everything is up and running.</p>\n<h1><strong>Using the Service</strong></h1>\n<p>We can test our service now that everything is deployed. You can use your favorite http client like <code class=\"language-text\">curl</code> or <code class=\"language-text\">postman</code> for this.</p>\n<p>Since we configured our APIs to use API keys, we need to provide a valid API key with each request. Just add a head <code class=\"language-text\">x-api-key</code> with each request and it should work. You can grab the API keys from the API Gateway console or from the Serverless output with <code class=\"language-text\">sls info</code>.</p>\n<h2><strong>Creating a screenshot</strong></h2>\n<p>To create a screenshot for <code class=\"language-text\">google.com</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -X POST https://123g1jc802.execute-api.us-east-1.amazonaws.com/dev/screenshots?url<span class=\"token operator\">=</span>http://google.com/ -H <span class=\"token string\">\"x-api-key: [yourkey]\"</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"hash\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"6ab016b2dad7ba49a992ba0213a91cf8\"</span>,\n\t<span class=\"token string\">\"key\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"6ab016b2dad7ba49a992ba0213a91cf8/original.png\"</span>,\n\t<span class=\"token string\">\"bucket\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"dev-foobar-screenshots\"</span>,\n\t<span class=\"token string\">\"url\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://foobar.cloudfront.net/6ab016b2dad7ba49a992ba0213a91cf8/original.png\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><strong>Listing all screenshot sizes</strong></h2>\n<p>To get all the different available sizes for <code class=\"language-text\">google.com</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -X GET https://123g1jc802.execute-api.us-east-1.amazonaws.com/dev/screenshots?url<span class=\"token operator\">=</span>http://google.com/ -H <span class=\"token string\">\"x-api-key: [yourkey]\"</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token string\">\"100\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://foobar.cloudfront.net/6ab016b2dad7ba49a992ba0213a91cf8/100.png\"</span>,\n\t<span class=\"token string\">\"200\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://foobar.cloudfront.net/6ab016b2dad7ba49a992ba0213a91cf8/200.png\"</span>,\n\t<span class=\"token string\">\"320\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://foobar.cloudfront.net/6ab016b2dad7ba49a992ba0213a91cf8/320.png\"</span>,\n\t<span class=\"token string\">\"400\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://foobar.cloudfront.net/6ab016b2dad7ba49a992ba0213a91cf8/400.png\"</span>,\n\t<span class=\"token string\">\"640\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://foobar.cloudfront.net/6ab016b2dad7ba49a992ba0213a91cf8/640.png\"</span>,\n\t<span class=\"token string\">\"800\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://foobar.cloudfront.net/6ab016b2dad7ba49a992ba0213a91cf8/800.png\"</span>,\n\t<span class=\"token string\">\"1024\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://foobar.cloudfront.net/6ab016b2dad7ba49a992ba0213a91cf8/1024.png\"</span>,\n\t<span class=\"token string\">\"1024x768\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://foobar.cloudfront.net/6ab016b2dad7ba49a992ba0213a91cf8/1024x768.png\"</span>,\n\t<span class=\"token string\">\"320x240\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://foobar.cloudfront.net/6ab016b2dad7ba49a992ba0213a91cf8/320x240.png\"</span>,\n\t<span class=\"token string\">\"640x480\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://foobar.cloudfront.net/6ab016b2dad7ba49a992ba0213a91cf8/640x480.png\"</span>,\n\t<span class=\"token string\">\"800x600\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://foobar.cloudfront.net/6ab016b2dad7ba49a992ba0213a91cf8/800x600.png\"</span>,\n\t<span class=\"token string\">\"original\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://foobar.cloudfront.net/6ab016b2dad7ba49a992ba0213a91cf8/original.png\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1><strong>Cost</strong></h1>\n<p>So how much will this cost you? If every call takes approximately 10 seconds (which is a safe bet, usually they are way faster). You could make 250 calls per month in the free tier, which wouldn’t cost you a thing.</p>\n<p>So creating at least 100.000 screenshots <strong>per month</strong> with 15 thumbnails per screenshot would be absolutely free.</p>\n<h1><strong>Conclusion</strong></h1>\n<p>Taking screenshots with Lambda Wheneveris a great solution. There’s no need to setup queuing, batch workers, etc. Lambda can handle the screenshots, thumbnails and storage.  a request comes in, it will automatically spin up, auto scaling to whatever you need.</p>\n<p>Serverless makes it really easy to setup, configure and deploy your microservices. It’s a seamless process to extend your services with other AWS services you might need for your project.</p>\n<p><a href=\"https://console.aws.amazon.com/cloudformation/home?region=eu-west-1#/stacks/new?stackName=serverless-screenshot-service&#x26;templateURL=https://s3-eu-west-1.amazonaws.com/serverless-screenshots-service/2016-09-23T12%3A50%3A03/template.yml\"><img src=\"https://s3.amazonaws.com/cloudformation-examples/cloudformation-launch-stack.png\" alt=\"Launch Awesomeness\"></a></p>\n<p><strong>Give it a try!</strong></p>\n<hr>\n<p><em>This is a guest post from <a href=\"http://svdgraaf.nl\">Sander van de Graaf</a>. Sander is a freelance Cloud Solutions Architect specializing in AWS environments and large, high-volume applications. You can reach him on <a href=\"http://twitter.com/svdgraaf\">Twitter</a>, <a href=\"https://www.linkedin.com/in/svdgraaf\">LinkedIn</a> or via <a href=\"mailto:mail@svdgraaf.nl\">email</a>.</em></p>\n<p><strong><em>Interested in writing for the Serverless blog? Find more info on contributing <a href=\"https://serverless.com/blog/contribute/\">here</a>.</em></strong></p>","frontmatter":{"title":"Building A Serverless Screenshot Service with Lambda","date":"October 14, 2016","description":"Guest author Sander van de Graaf writes about building a serverless screenshot service with the Serverless Framework and AWS Lambda."}}},"pageContext":{"slug":"/posts/2016-10-14-building-a-serverless-screenshot-service-with-lambda/","previous":{"fields":{"slug":"/posts/2016-10-12-releasing-serverless-framework-v1-and-fundraising/"},"frontmatter":{"title":"Releasing Serverless Framework V.1 & Fundraising"}},"next":{"fields":{"slug":"/posts/2016-10-18-introducing-serverless-partners-meet-trek10/"},"frontmatter":{"title":"Introducing Serverless Partners: Meet Trek10"}}}}}
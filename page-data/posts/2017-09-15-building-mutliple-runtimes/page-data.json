{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-09-15-building-mutliple-runtimes/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"db3dd3a7-0bd5-5caa-a437-ddc617b916a3","excerpt":"As a developer on the cloud, there are many tools at your disposal. The Serverless Framework supports an array of runtimes to enable you to use different…","html":"<p>As a developer on the cloud, there are many tools at your disposal. The Serverless Framework supports an array of runtimes to enable you to use different languages in your Serverless application.</p>\n<p>To manage these related codebases, you might choose to divide your application’s functions into a number of different services. However, if you prefer to deploy a single service for all your functions, regardless of what language they are written in, the Serverless Framework empowers you to do just that.</p>\n<p>Let’s consider a small application that uses two runtimes and provides two functions. This example will use Python and Node targeting AWS, but the concepts will be broadly applicable in other circumstances. The full the project files can be <a href=\"https://github.com/serverless/examples/tree/master/aws-multiple-runtime\">found here</a> </p>\n<p>We’ll create an application that has an endpoint that reports the current system timestamp, and a web controller that displays the time in the browser. The configuration will look largely similar to a single-runtime application. We specify the name of the service and the target provider in our <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> hellotime<span class=\"token punctuation\">-</span>app\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws</code></pre></div>\n<p>Note that I omitted the usual declaration of runtime inside the provider section. If you specify it here, it will serve as a fallback for any functions that do not have a runtime specified individually.</p>\n<p>Here I specify a function that will render the webpage markup:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> python3.6\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> greet\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> web/handler.hello</code></pre></div>\n<p>This web controller is a Python module, so I specify the <code class=\"language-text\">python3.6</code> runtime. The handler field points to the module located in my project at <code class=\"language-text\">web/handler.py</code> and names the function <code class=\"language-text\">hello</code> as the handler for received events.</p>\n<p>Here’s what the implementation looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># web/handler.py</span>\n\n<span class=\"token keyword\">from</span> datetime <span class=\"token keyword\">import</span> datetime\n<span class=\"token keyword\">import</span> http<span class=\"token punctuation\">.</span>client\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    rc <span class=\"token operator\">=</span> event<span class=\"token punctuation\">[</span><span class=\"token string\">\"requestContext\"</span><span class=\"token punctuation\">]</span>\n    servicePath <span class=\"token operator\">=</span> rc<span class=\"token punctuation\">[</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>rc<span class=\"token punctuation\">[</span><span class=\"token string\">\"resourcePath\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># path minus the resource path '/greet'</span>\n\n    <span class=\"token comment\"># GET from the /time endpoint</span>\n    connection <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">.</span>HTTPSConnection<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">[</span><span class=\"token string\">\"headers\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Host\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    connection<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"{0}/time\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>servicePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    timestamp <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>getresponse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    time_str <span class=\"token operator\">=</span> datetime<span class=\"token punctuation\">.</span>fromtimestamp<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">\"%B %d, %Y\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"statusCode\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"body\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"&lt;html>&lt;body>&lt;p>Hello! It is now {0}.&lt;/p>&lt;/body>&lt;/html>\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>time_str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"headers\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"text/html\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The other function is a Node-backed endpoint that reports a timestamp:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">  <span class=\"token key atrule\">time</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> time\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> api/handler.timestamp</code></pre></div>\n<p>Again, this looks the same as in a single-runtime service, with the exception that it specifies the runtime <code class=\"language-text\">nodejs6.10</code> alongside the function declaration. The module for this function is located at <code class=\"language-text\">api/handler.js</code>, and exports a function named <code class=\"language-text\">timestamp</code>. It is not necessary to move files of different languages to separate folders, but depending on complexity and build procedure, you may find it useful.</p>\n<p>The function responds with the millisecond timestamp:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/* api/handler.js */</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">timestamp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    statusCode<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"Content-Type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text/plain\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    body<span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Deploying the service with <code class=\"language-text\">serverless deploy</code> tells us the URL of the page at <code class=\"language-text\">/greet</code>. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Serverless: Packaging service<span class=\"token punctuation\">..</span>.\nServerless: Excluding development dependencies<span class=\"token punctuation\">..</span>.\nServerless: Creating Stack<span class=\"token punctuation\">..</span>.\nServerless: Checking Stack create progress<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.\nServerless: Stack create finished<span class=\"token punctuation\">..</span>.\nServerless: Uploading CloudFormation <span class=\"token function\">file</span> to S3<span class=\"token punctuation\">..</span>.\nServerless: Uploading artifacts<span class=\"token punctuation\">..</span>.\nServerless: Uploading <span class=\"token function\">service</span> .zip <span class=\"token function\">file</span> to S3 <span class=\"token punctuation\">(</span><span class=\"token number\">1017</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span>.\nServerless: Validating template<span class=\"token punctuation\">..</span>.\nServerless: Updating Stack<span class=\"token punctuation\">..</span>.\nServerless: Checking Stack update progress<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\nServerless: Stack update finished<span class=\"token punctuation\">..</span>.\n\nService Information\nservice: hellotime-app\nstage: dev\nregion: us-east-1\napi keys:\n  None\nendpoints:\n  GET - https://y4ps89psjb.execute-api.us-east-1.amazonaws.com/dev/greet\n  GET - https://y4ps89psjb.execute-api.us-east-1.amazonaws.com/dev/time\nfunctions:\n  hello: hellotime-app-dev-hello\n  time: hellotime-app-dev-time\nServerless: Publish <span class=\"token function\">service</span> to Serverless Platform<span class=\"token punctuation\">..</span>.\nService successfully published<span class=\"token operator\">!</span> Your <span class=\"token function\">service</span> details are available at:\nhttps://platform.serverless.com/services/FavsagaSaban/hellotime-app</code></pre></div>\n<p>Accessing the page shows the greeting message and tells us the date.</p>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/assets.site.serverless.com/blog/multi-language-serivce.png\" alt=\"Browser view\"></p>\n<p>To try it out, download <a href=\"https://github.com/serverless/examples/tree/master/aws-multiple-runtime\">the project files</a> and run serverless deploy from the directory that contains <code class=\"language-text\">serverless.yml</code>.</p>","frontmatter":{"title":"How to use multiple runtimes in a single serverless microservice","date":"September 15, 2017","description":"How to build an application using multiple runtimes to supported mixed-language development with the Serverless Framework"}}},"pageContext":{"slug":"/posts/2017-09-15-building-mutliple-runtimes/","previous":{"fields":{"slug":"/posts/2017-09-15-understanding-and-controlling-aws-lambda-costs/"},"frontmatter":{"title":"Understanding and Controlling AWS Lambda Costs"}},"next":{"fields":{"slug":"/posts/2017-09-18-how-to-manage-your-aws-step-functions-with-serverless/"},"frontmatter":{"title":"How to manage your AWS Step Functions with Serverless"}}}}}
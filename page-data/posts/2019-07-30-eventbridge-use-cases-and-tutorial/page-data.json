{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2019-07-30-eventbridge-use-cases-and-tutorial/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"30e2f5ba-04b0-5beb-9737-f8c17b1086d6","excerpt":"In serverless applications, events are the main communication mechanism. Sources such as API Gateways, databases or data streams emit events while other…","html":"<p>In serverless applications, events are the main communication mechanism. Sources such as API Gateways, databases or data streams emit events while other infrastructure components such as functions react to them in order to fulfill a given business need.</p>\n<p>Every major cloud provider has rolled out their own internal event system to reliably dispatch events from component to component within their ecosystem.</p>\n<p>Given that events are such an integral piece for serverless architectures, the question arises whether there’s a way to generate and inject custom events into the system. To address this need one pattern which arose throughout the years was the usage of Webhooks to connect external event sources with the cloud. Webhooks are HTTP endpoints which consume HTTP requests, translating the incoming request data into an event which is then forwarded to the respective cloud service.</p>\n<p>While this pattern served us well there are a couple of downsides associated with it. Webhooks require additional infrastructure such as API Gateways to be created and maintained. The API endpoint should be scalable and always available to ensure successful event delivery. The act of marshalling and unmarshalling of requests and responses introduces overhead and can be tedious to handle. Scaling the event delivery gets tricky if there’s a need to dispatch events to multiple recipients based on rules. This isn’t the Serverless way.</p>\n<p>There’s a clear stance that events in serverless applications should be treated as first-class citizens. It should be easy to create, ingest and react to events. No matter the origin.</p>\n<p>Luckily AWS <a href=\"https://aws.amazon.com/about-aws/whats-new/2019/07/introducing-amazon-eventbridge/\">recently announced</a> the EventBridge offering which helps developers build universal, reliable and fully event-driven applications. EventBridge is a serverless pub / sub service which makes it possible to seamlessly connect different event sources with AWS cloud services via event buses.\nEvent publishers can be any (e.g. legacy) application, SaaS providers or internal AWS services. Event consumers can range from EC2 instances, to other event buses to Lambda functions. Given this simplicity, yet flexibility it’s easy to see why other developers call this announcement one of the most important services for serverless application development.</p>\n<p>Are you curious how the EventBridge can be used in your serverless applications? The Serverless Framework v1.49.0 has got you covered as it includes native support for the <code class=\"language-text\">eventBridge</code> event source!</p>\n<p>Let’s take a look into EventBridge and the Serverless Framework <code class=\"language-text\">eventBridge</code> event implementation to see how easy it is to build truly event-driven applications without the need for other infrastructure components or Webhook workarounds.</p>\n<h4>Use Case 1: AWS events</h4>\n<p>The AWS EventBridge service is internally built on top of <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/WhatIsCloudWatchEvents.html\">CloudWatch Events</a> which makes it possible to easily react to events generated by other AWS services.</p>\n<p>Generally speaking there are 2 different types an EventBridge event can be operated with. The “Schedule” type schedules event emission while the “Pattern” type matches incoming event data based on a configured schema to only invoke the Lambda function when the pattern matches.</p>\n<p>Let’s start by looking into the “Schedule” type and define an <code class=\"language-text\">eventBridge</code> event configuration which invokes our Lambda function every 10 minutes.</p>\n<p>In the following <code class=\"language-text\">serverless.yml</code> file we declare our <code class=\"language-text\">reminder</code> function which has an <code class=\"language-text\">eventBridge</code> event source configured to invoke the Lambda function every 10 minutes:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">-</span>bridge\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs10.x\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">reminder</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n   <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">eventBridge</span><span class=\"token punctuation\">:</span>\n         <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span> rate(10 minutes)</code></pre></div>\n<p>Scheduling the event delivery in that way makes it possible to create 100% serverless cron services (One can even use <a href=\"https://en.wikipedia.org/wiki/Cron#CRON_expression\">cron expressions</a> to define when a function should be invoked).</p>\n<p>The second, “Pattern” event type gives us great flexibility to react to different events emitted by AWS services such as EC2, Batch, EBS and more. A pattern is basically a schema definition AWS uses to filter out relevant events which are then forwarded to your function.</p>\n<p>Let’s imagine that we want to listen to state changes of AWS Key Management Service (KMS). To do that we need to tell AWS that we’re only interested in the KMS service and its event types. The following is a <code class=\"language-text\">serverless.yml</code> file set up with such configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">-</span>bridge\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs10.x\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">kmsNotifier</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n   <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">eventBridge</span><span class=\"token punctuation\">:</span>\n         <span class=\"token key atrule\">pattern</span><span class=\"token punctuation\">:</span>\n           <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span>\n             <span class=\"token punctuation\">-</span> aws.kms\n           <span class=\"token key atrule\">detail-type</span><span class=\"token punctuation\">:</span>\n             <span class=\"token punctuation\">-</span> KMS Imported Key Material Expiration\n             <span class=\"token punctuation\">-</span> KMS CMK Rotation\n             <span class=\"token punctuation\">-</span> KMS CMK Deletion</code></pre></div>\n<p>More CloudWatch event types and their pattern definitions can be found in <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/EventTypes.html\">the AWS documentation</a>.</p>\n<p>If you’re familiar with the Serverless Framework and its different event types you might think that this looks like another way to write <a href=\"https://serverless.com/framework/docs/providers/aws/events/schedule/\"><code class=\"language-text\">schedule</code></a> and <a href=\"https://serverless.com/framework/docs/providers/aws/events/cloudwatch-event/\"><code class=\"language-text\">cloudwatchEvent</code></a> event definitions and you’re absolutely right about that. You might remember that we just learned above that the EventBridge service is built on top of CloudWatch Events.</p>\n<h4>Use Case 2: Custom events</h4>\n<p>Using internal AWS event sources is nice since it gives us a great flexibility to react to different changes in our infrastructure. However we’ve learned that this capability was already introduced via <a href=\"https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/WhatIsCloudWatchEvents.html\">CloudWatch Events</a> a while back.</p>\n<p>What makes EventBridge even more useful is the support for custom events. But how would that work? Every AWS account is preconfigured with an “AWS internal” event bus called <code class=\"language-text\">default</code>. This is the bus we’ve just used above when working with internal AWS event sources.</p>\n<p>However with the introduction of EventBridge we’re now able to create and configure our own event buses. We can create many different buses for different use cases and / or applications. One could, for example, configure a “marketing” event bus which is solely used for marketing-related event sources and sinks.</p>\n<p>Let’s use EventBridge to create our own <code class=\"language-text\">marketing</code> event bus. Furthermore let’s see how an external Newsletter application can emit events to that bus to invoke a Lambda function responsible for team-wide notifications.</p>\n<p>The following <code class=\"language-text\">serverless.yml</code> definition describes a service which manages the <code class=\"language-text\">notify</code> function. This function uses the <code class=\"language-text\">eventBridge</code> event to create a <code class=\"language-text\">marketing</code> event bus and listens to event sources we define as <code class=\"language-text\">acme.newsletter.campaign</code> on that event bus:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> event<span class=\"token punctuation\">-</span>bridge\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs10.x\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">notify</span><span class=\"token punctuation\">:</span>\n   <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.hello\n   <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n     <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">eventBridge</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">eventBus</span><span class=\"token punctuation\">:</span> marketing \n        <span class=\"token key atrule\">pattern</span><span class=\"token punctuation\">:</span>\n           <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span>\n             <span class=\"token punctuation\">-</span> acme.newsletter.campaign</code></pre></div>\n<p>Next up we need to add some logic to our Newsletter application so that events are emitted to the <code class=\"language-text\">marketing</code> event bus everytime something noteworthy happens:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// In our marketing application code</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">notifyMarketingTeam</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">email</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">const</span> eventBridge <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>EventBridge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> region<span class=\"token operator\">:</span> <span class=\"token string\">'us-east-1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n <span class=\"token keyword\">return</span> eventBridge<span class=\"token punctuation\">.</span><span class=\"token function\">putEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n   Entries<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n     <span class=\"token punctuation\">{</span>\n       EventBusName<span class=\"token operator\">:</span> <span class=\"token string\">'marketing'</span><span class=\"token punctuation\">,</span>\n       Source<span class=\"token operator\">:</span> <span class=\"token string\">'acme.newsletter.campaign'</span><span class=\"token punctuation\">,</span>\n       DetailType<span class=\"token operator\">:</span> <span class=\"token string\">'UserSignUp'</span><span class=\"token punctuation\">,</span>\n       Detail<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">{ \"E-Mail\": \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>email<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\" }</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">]</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userHasSubscribed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">notifyMarketingTeam</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>email<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>NOTE: Remember that this Newsletter application is “external”, meaning that it can be hosted everywhere. It can even be an old legacy enterprise application you want to integrate with your serverless infrastructure.</p>\n</blockquote>\n<p>Once the code is deployed we’ll reliably receive <code class=\"language-text\">acme.newsletter.campaign</code> events on our <code class=\"language-text\">marketing</code> event bus which will be forwarded to our <code class=\"language-text\">notify</code> Lambda function whenever a new user has subscribed to our newsletter.</p>\n<p>This is just one example where custom events and dedicated event buses can be useful. As you can see it’s pretty simple to configure EventBridge and hook it up with existing applications. Following this pattern we can replace pretty much every Webhook based implementation out there. Using EventBridge for such scenarios is more reliable, way easier to setup and scale and cheaper to operate since AWS manages everything for us behind the scenes.</p>\n<h4>Conclusion</h4>\n<p>The <a href=\"https://aws.amazon.com/about-aws/whats-new/2019/07/introducing-amazon-eventbridge/\">recent announcement</a> for AWS EventBridge support is a true game changer for serverless application development.</p>\n<p>By nature, serverless is all about functions and events. EventBridge provides us with a managed, centralized event bus system we can use to react to any AWS infrastructure event, external SaaS provider events or even our own, custom defined events.</p>\n<p>Using the EventBridge as a central component to receive and forward events helps us build reliable, more robust and decoupled event-driven systems at scale.</p>\n<p>The Serverless Framework v1.49.0 release ships with first-class citizen support for the <code class=\"language-text\">evenBridge</code> event source, making it easy for us to benefit from a serverless event bus system.</p>\n<p>Feel free to check our <a href=\"https://serverless.com/framework/docs/providers/aws/events/event-bridge/\">EventBridge docs</a> for more information.</p>\n<p>Are you excited about Serverless Framework v1.49.0 and its support for EventBridge? Let us know what you’re planning to build with the Serverless Framework and the <code class=\"language-text\">eventBridge</code> event source in the comments below or via Twitter <a href=\"https://twitter.com/goserverless\">@goserverless</a>.</p>","frontmatter":{"title":"EventBridge Use Cases and Examples","date":"July 30, 2019","description":"AWS recently announced the EventBridge offering which helps developers build universal, reliable and fully event-driven applications. Come see how to use it with Serverless Framework"}}},"pageContext":{"slug":"/posts/2019-07-30-eventbridge-use-cases-and-tutorial/","previous":{"fields":{"slug":"/posts/2019-07-29-notifications-and-alerts/"},"frontmatter":{"title":"Zero Configuration AWS Lambda Notifications & Alerts with Serverless Framework"}},"next":{"fields":{"slug":"/posts/2019-08-01-serverless-components-beta/"},"frontmatter":{"title":"Serverless Components Beta"}}}}}
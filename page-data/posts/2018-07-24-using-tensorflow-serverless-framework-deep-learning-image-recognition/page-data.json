{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-07-24-using-tensorflow-serverless-framework-deep-learning-image-recognition/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"d281e5ef-5dcb-595b-afde-2099c8732c4a","excerpt":"Deep and machine learning is becoming essential for a lot of businesses, be it for internal projects or external ones. The data-driven approach allows companies…","html":"<p>Deep and machine learning is becoming essential for a lot of businesses, be it for internal projects or external ones.</p>\n<p>The data-driven approach allows companies to build analytics tools based on their data, without constructing complicated deterministic algorithms. Deep learning allows them to use more raw data than a machine learning approach, making it applicable to a larger number of use cases. Also, by using pre-trained neural networks, companies can start using state of the art applications like image captioning, segmentation and text analysis—without significant investment into data science team.</p>\n<p>But one of the main issues companies face with deep/machine learning is finding the right way to deploy these models.</p>\n<p>I wholeheartedly recommend a serverless approach. Why? Because serverless provides a cheap, scalable and reliable architecture for deep learning models.</p>\n<p>In this post, we’ll cover how to build your first deep learning API using the <a href=\"https://serverless.com/framework/\">Serverless Framework</a>, TensorFlow, AWS Lambda and API Gateway.</p>\n<p>We will cover the following:</p>\n<ul>\n<li>Using serverless for deep learning - standard ways of deploying deep learning applications, and how a serverless approach can be beneficial.</li>\n<li>“Hello world” code - a basic Lambda function with only 4 lines of code. There is no API here, we’ll start with the simplest possible example.</li>\n<li>Code decomposition - looking through the configuration file, and the python code for handling the model, to understand how the whole example works.</li>\n<li>API example - get a working API for image recognition on top of our example.</li>\n</ul>\n<p>If you want to skip the background about what TensorFlow is and why you’d want to use serverless for machine learning, <a href=\"#the-basic-4-line-example\">the actual example starts here</a>.</p>\n<h2>Why Serverless + TensorFlow?</h2>\n<p>First of all, let’s briefly cover what TensorFlow is: an open source library that allows developers to easily create, train and deploy neural networks. It’s currently the most popular framework for deep learning, and is adored by both novices and experts.</p>\n<p>Currently, the way to deploy pre-trained TensorFlow model is to use a cluster of instances.</p>\n<p>So to make deep learning API, we would need stack like this:</p>\n<img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/tensorflow/deep-learning-api-stack.gif\">\n<p>(<em>Image from <a href=\"https://aws.amazon.com/blogs/machine-learning/deploy-deep-learning-models-on-amazon-ecs/\">AWS</a>.</em>)</p>\n<p>The main pain points in this infrastructure is that:</p>\n<ul>\n<li>you have to manage the cluster - its size, type and logic for scaling</li>\n<li>you have to pay for unused server power</li>\n<li>you have to manage the container logic - logging, handling of multiple requests, etc</li>\n</ul>\n<p>With AWS Lambda, we can make the stack significantly easier and use simpler architecture:</p>\n<img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/tensorflow/serverless-tensorflow-architecture.png\">\n<h3>The difference in both approaches</h3>\n<p>First of all, a serverless serverless approach is very scalable. It can scale up to 10k concurrent requests without writing any additional logic. It’s perfect for handling random high loads, as it doesn’t take any additional time to scale.</p>\n<p>Second, you don’t have to pay for unused server time. Serverless architectures have pay-as-you-go model. Meaning, if you have 25k requests per month, you will only pay for 25k requests.</p>\n<p>And not only does it make pricing completely transparent, it’s just a lot cheaper. For the example TensorFlow model we’ll cover in this post, it costs 1$ for about 25k requests. A similar cluster would cost a <em>lot</em> more, and you’d only achieve pricing parity once you hit 1M requests.</p>\n<p>Third, infrastructure itself becomes a lot easier. You don’t have to handle Docker containers, logic for multiple requests, or cluster orchestration.</p>\n<p>Bottom line: you don’t have to hire someone to do devops for this, as any backend developer can easily handle it.</p>\n<p>As we’ll see in a minute, deploying a serverless deep/machine learning infrastructure can be done with as little as 4 lines of code.</p>\n<p>That said, when <em>wouldn’t</em> you go with a serverless approach? There are some limitations to be aware of:</p>\n<ul>\n<li>Lambda has <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/limits.html\">strict limits</a> in terms of processing time and used memory, you’ll want to make sure you won’t be hitting those</li>\n<li>As mentioned above, clusters are more cost effective after a certain number of requests. In cases where you don’t have peak loads and the number of requests is really high (I mean 10M per month high), a cluster will actually save you money.</li>\n<li>Lambda has a small, but certain, startup time. TensorFlow also has to download the model from S3 to start up. For the example in this post, a cold execution will take 4.5 seconds and a warm execution will take 3 seconds. It may not be critical for some applications, but if you are focused on real-time execution then a cluster will be more responsive.</li>\n</ul>\n<h2>The basic 4 line example</h2>\n<p>Let’s get started with our serverless deep learning API!</p>\n<p>For this example, I’m using a pretty popular application of neural networks: image recognition. Our application will take an image as input, and return a description of the object in it.</p>\n<p>These kinds of applications are commonly used to filter visual content or classify stacks of images in certain groups. Our app will try to recognize this picture of a panda:</p>\n<img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/tensorflow/serverless-deep-learning-panda.png\">\n<p><strong>Note:</strong> The model and example are also available <a href=\"https://www.tensorflow.org/tutorials/images/image_recognition\">here</a>.</p>\n<p>We’ll use the following stack:</p>\n<ul>\n<li>API Gateway for managing requests</li>\n<li>AWS Lambda for processing</li>\n<li>Serverless framework for handling deployment and configuration</li>\n</ul>\n<h3>“Hello world” code</h3>\n<p>To get started, you’ll need to <a href=\"https://serverless.com/framework/docs/providers/aws/guide/installation/\">have the Serverless Framework installed</a>.</p>\n<p>Create an empty folder and run following commands in the CLI:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">serverless <span class=\"token function\">install</span> -u https://github.com/ryfeus/lambda-packs/tree/master/tensorflow/source -n tensorflow\n<span class=\"token builtin class-name\">cd</span> tensorflow\nserverless deploy\nserverless invoke --function main --log</code></pre></div>\n<p>You’ll receive the following response:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/tmp/imagenet/imagenet_synset_to_human_label_map.txt\n/tmp/imagenet/imagenet_2012_challenge_label_map_proto.pbtxt\n/tmp/imagenet/classify_image_graph_def.pb\n/tmp/imagenet/inputimage.jpg\ngiant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca <span class=\"token punctuation\">(</span>score <span class=\"token operator\">=</span> <span class=\"token number\">0.89107</span><span class=\"token punctuation\">)</span>\nindri, indris, Indri indri, Indri brevicaudatus <span class=\"token punctuation\">(</span>score <span class=\"token operator\">=</span> <span class=\"token number\">0.00779</span><span class=\"token punctuation\">)</span>\nlesser panda, red panda, panda, bear cat, <span class=\"token function\">cat</span> bear, Ailurus fulgens <span class=\"token punctuation\">(</span>score <span class=\"token operator\">=</span> <span class=\"token number\">0.00296</span><span class=\"token punctuation\">)</span>\ncustard apple <span class=\"token punctuation\">(</span>score <span class=\"token operator\">=</span> <span class=\"token number\">0.00147</span><span class=\"token punctuation\">)</span>\nearthstar <span class=\"token punctuation\">(</span>score <span class=\"token operator\">=</span> <span class=\"token number\">0.00117</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>As you can see, our application successfully recognized this picture of a panda (0.89 score).</p>\n<p>That’s it. You’ve just successfully deployed to AWS Lambda with TensorFlow, using the Inception-v3 model for image recognition!</p>\n<h2>Code decomposition - breaking down the model</h2>\n<p>Let’s start with serverless YAML file. Nothing uncommon here—we’re using a pretty standard deployment method:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> tensorflow\n\n<span class=\"token key atrule\">frameworkVersion</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\">=1.2.0 &lt;2.0.0\"</span>\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> python2.7\n  <span class=\"token key atrule\">memorySize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1536</span>\n  <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">main</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> index.handler</code></pre></div>\n<p>If we will look into the <code class=\"language-text\">index.py</code> file itself, we will see that first we need to download the model (<code class=\"language-text\">.pb</code> file) to the AWS Lambda <code class=\"language-text\">.tmp</code> folder, and then load it via a standard TensorFlow import function.</p>\n<p>Here are the parts you have to keep in mind if you want to put your own model, with the links straight to the full code in GitHub:</p>\n<p><strong><a href=\"https://github.com/ryfeus/lambda-packs/blob/master/Tensorflow/source/index.py#L141\">Model download from S3</a>:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    strBucket <span class=\"token operator\">=</span> <span class=\"token string\">'ryfeuslambda'</span>\n    strKey <span class=\"token operator\">=</span> <span class=\"token string\">'tensorflow/imagenet/classify_image_graph_def.pb'</span>\n    strFile <span class=\"token operator\">=</span> <span class=\"token string\">'/tmp/imagenet/classify_image_graph_def.pb'</span>\n    downloadFromS3<span class=\"token punctuation\">(</span>strBucket<span class=\"token punctuation\">,</span>strKey<span class=\"token punctuation\">,</span>strFile<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strFile<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong><a href=\"https://github.com/ryfeus/lambda-packs/blob/master/Tensorflow/source/index.py#L80\">Model import</a>:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_graph</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> tf<span class=\"token punctuation\">.</span>gfile<span class=\"token punctuation\">.</span>FastGFile<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token string\">'/tmp/imagenet/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'classify_image_graph_def.pb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        graph_def <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>GraphDef<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        graph_def<span class=\"token punctuation\">.</span>ParseFromString<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        _ <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">.</span>import_graph_def<span class=\"token punctuation\">(</span>graph_def<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong><a href=\"https://github.com/ryfeus/lambda-packs/blob/master/Tensorflow/source/index.py#L147\">Getting the image</a>:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">    strFile <span class=\"token operator\">=</span> <span class=\"token string\">'/tmp/imagenet/inputimage.jpg'</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'imagelink'</span> <span class=\"token keyword\">in</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        urllib<span class=\"token punctuation\">.</span>urlretrieve<span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">[</span><span class=\"token string\">'imagelink'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> strFile<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        strBucket <span class=\"token operator\">=</span> <span class=\"token string\">'ryfeuslambda'</span>\n        strKey <span class=\"token operator\">=</span> <span class=\"token string\">'tensorflow/imagenet/cropped_panda.jpg'</span>\n        downloadFromS3<span class=\"token punctuation\">(</span>strBucket<span class=\"token punctuation\">,</span>strKey<span class=\"token punctuation\">,</span>strFile<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>strFile<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong><a href=\"https://github.com/ryfeus/lambda-packs/blob/master/Tensorflow/source/index.py#L107\">Getting predictions from the model</a>:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">        softmax_tensor <span class=\"token operator\">=</span> sess<span class=\"token punctuation\">.</span>graph<span class=\"token punctuation\">.</span>get_tensor_by_name<span class=\"token punctuation\">(</span><span class=\"token string\">'softmax:0'</span><span class=\"token punctuation\">)</span>\n        predictions <span class=\"token operator\">=</span> sess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>softmax_tensor<span class=\"token punctuation\">,</span>\n                               <span class=\"token punctuation\">{</span><span class=\"token string\">'DecodeJpeg/contents:0'</span><span class=\"token punctuation\">:</span> image_data<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        predictions <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span>predictions<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now, let’s move on, and add an API to this!</p>\n<h2>API example</h2>\n<p>The simplest way to add an API to the example is to modify the serverless YAML file:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> tensorflow\n\n<span class=\"token key atrule\">frameworkVersion</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\">=1.2.0 &lt;2.0.0\"</span>\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> python2.7\n  <span class=\"token key atrule\">memorySize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1536</span>\n  <span class=\"token key atrule\">timeout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">300</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">main</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> index.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> GET handler</code></pre></div>\n<p>Then, we redeploy the stack:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">serverless deploy</code></pre></div>\n<p>And receive the following response:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Service Information\nservice: tensorflow\nstage: dev\nregion: us-east-1\nstack: tensorflow-dev\napi keys:\n  None\nendpoints:\n  GET - https://<span class=\"token operator\">&lt;</span>urlkey<span class=\"token operator\">></span>.execute-api.us-east-1.amazonaws.com/dev/handler\nfunctions:\n  main: tensorflow-dev-main</code></pre></div>\n<p>To test the link, we can just open it in the browser:</p>\n<p>https://<urlkey>.execute-api.us-east-1.amazonaws.com/dev/handler</p>\n<p>Or run curl:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> https://<span class=\"token operator\">&lt;</span>urlkey<span class=\"token operator\">></span>.execute-api.us-east-1.amazonaws.com/dev/handler</code></pre></div>\n<p>We will receive:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"return\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"giant panda, panda, panda bear, coon bear, Ailuropoda melanoleuca (score = 0.89107)\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>We’ve created a TensorFlow endpoint on AWS Lambda via the <a href=\"https://serverless.com/framework/\">Serverless Framework</a>. Setting everything up was extremely easy, and saved us a lot of time over the more traditional approach.</p>\n<p>By modifying the serverless YAML file, you can connect SQS and, say, create a deep learning pipeline, or even connect it to a chatbot via AWS Lex.</p>\n<p>As a hobby, I port a lot of libraries to make the serverless friendly. <a href=\"https://github.com/ryfeus/lambda-packs\">You can look at them here</a>. They all have an MIT license, so feel free to modify and use them for your project.</p>\n<p>The libraries include the following examples:</p>\n<ul>\n<li>Machine learning libraries (Scikit, LightGBM)</li>\n<li>Computer vision libraries (Skimage, OpenCV, PIL)</li>\n<li>OCR libraries (Tesseract)</li>\n<li>NLP libraries (Spacy)</li>\n<li>Web scraping libraries (Selenium, PhantomJS, lxml)</li>\n<li>Load testing libraries (WRK, pyrestest)</li>\n</ul>\n<p>I’m excited to see how others are using serverless to empower their development. Feel free to drop me a line in the comments, and happy developing!</p>","frontmatter":{"title":"Using TensorFlow and the Serverless Framework for deep learning and image recognition","date":"July 24, 2018","description":"We’ll cover how to use TensorFlow, the Serverless Framework, AWS Lambda and API Gateway to deploy a simple deep learning model."}}},"pageContext":{"slug":"/posts/2018-07-24-using-tensorflow-serverless-framework-deep-learning-image-recognition/","previous":{"fields":{"slug":"/posts/2018-07-23-efficient-apis-graphql-serverless/"},"frontmatter":{"title":"Efficient APIs with GraphQL and Serverless"}},"next":{"fields":{"slug":"/posts/2018-07-25-google-cloud-functions-generally-available-what-means-serverless/"},"frontmatter":{"title":"Google Cloud Functions goes GA: what it means for Serverless"}}}}}
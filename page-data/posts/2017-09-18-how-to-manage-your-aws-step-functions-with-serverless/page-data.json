{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-09-18-how-to-manage-your-aws-step-functions-with-serverless/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"2156f58b-a35c-57fb-b6d4-694a4c87b5ab","excerpt":"New to Step Functions? Check out this Ultimate Guide to AWS Step Functions When diving into the Functions as a Service (FaaS) world, a question that often pops…","html":"<img src=\"https://s3-us-west-2.amazonaws.com/assets.blog.serverless.com/header+images/step-functions.jpg\">\n<ul>\n<li><em>New to Step Functions?</em> Check out this <a href=\"https://serverless.com/aws-step-functions/\">Ultimate Guide to AWS Step Functions</a></li>\n</ul>\n<p>When diving into the Functions as a Service (FaaS) world, a question that often pops up is:</p>\n<blockquote>\n<p>If serverless functions are stateless, how do I manage state?</p>\n</blockquote>\n<p>There are a number of ways to manage state with backend data stores, <code class=\"language-text\">tmp</code> directories &#x26; building this logic into your existing lambda functions but there is a simpler alternative provided by AWS: <strong>Step Functions</strong>.</p>\n<p><a href=\"https://aws.amazon.com/step-functions/\">Step Functions</a> allows you to control complex workflows using Lambda functions without the underlying application managing and orchestrating the state. In essence, it’s a state machine to help with complex workflows and aims at keeping your lambda functions free of this additional logic.</p>\n<h2>Serverless + Step Functions</h2>\n<p>A couple months ago, I created the <a href=\"https://github.com/horike37/serverless-step-functions\">Serverless Step Functions</a> plugin to deploy and manage Step Functions and a bunch of composed Lambda functions via the Serverless Framework.</p>\n<p>In this post, I will share the functionality and usage of the plugin, and a workflow for your development.</p>\n<p>So let’s get down to business!</p>\n<h2>Install</h2>\n<p>Before getting started, you need to install the plugin. This is hosted on the <a href=\"https://github.com/serverless/plugins\">Serverless Plugins registry</a>, so you can install this via the plugin install command which is introduced since v1.22.0.</p>\n<p>Please run the following command in your service, then the plugin will be added automatically in plugins array in your <code class=\"language-text\">serverless.yml</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ serverless plugin install --name serverless-step-functions</code></pre></div>\n<p>If you run <code class=\"language-text\">serverless --help</code> command and you can see an explanation of subcommands for the plugin like `serverless invoke stepf, installing is successful.</p>\n<h2>Getting Started</h2>\n<h3>Define AWS state language</h3>\n<p>To define a workflow with Step Functions, you need write a structured language called <a href=\"http://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html\">Amazon States Language</a>, which can be defined within <code class=\"language-text\">definition</code> section with yaml format in your <code class=\"language-text\">serverless.yml</code>.</p>\n<p>I recommend using in combination with <a href=\"https://www.npmjs.com/package/serverless-pseudo-parameters\">Serverless AWS Pseudo Parameters</a> since it makes it easy to set up in <code class=\"language-text\">Resource</code> section in serverless.yml.</p>\n<p>The following is an example which is a simplest state machine definition, which is composed of a single lambda function.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">stepFunctions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stateMachines</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">hellostepfunc1</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">definition</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">Comment</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"A Hello World example of the Amazon States Language using an AWS Lambda Function\"</span>\n        <span class=\"token key atrule\">StartAt</span><span class=\"token punctuation\">:</span> HelloWorld1\n        <span class=\"token key atrule\">States</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">HelloWorld1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> Task\n            <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-foobar-baz\"</span>\n            <span class=\"token key atrule\">End</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>step<span class=\"token punctuation\">-</span>functions\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>pseudo<span class=\"token punctuation\">-</span>parameters</code></pre></div>\n<h3>Event</h3>\n<p>You can define events to invoke your Step Functions. Currently, <code class=\"language-text\">http</code> and <code class=\"language-text\">scheduled</code> events have been supported.\nThe configuration syntax is similar to the Lambda events provided by the framework core.</p>\n<p>Here’s how to define those events:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">stepFunctions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stateMachines</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> hello\n            <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> GET\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">schedule</span><span class=\"token punctuation\">:</span> rate(2 hours)\n      definition<span class=\"token punctuation\">:</span></code></pre></div>\n<h3>Use triggered Lambda events</h3>\n<p>If you want to use events other than <code class=\"language-text\">http</code> and <code class=\"language-text\">scheduled</code>, you can create a Lambda function which only run your statemachine</p>\n<p>Using the AWS SDK, you can trigger your step functions like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> stepfunctions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>StepFunctions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">start</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> stateMachineArn <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span>statemachine_arn<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    stateMachineArn\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> stepfunctions<span class=\"token punctuation\">.</span><span class=\"token function\">startExecution</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Your statemachine </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>stateMachineArn<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> executed successfully</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then, you set up the Lambda will be triggered by events what you want. <code class=\"language-text\">startExecution</code> API requires a statemachine ARN so you can pass that via environment variables system.</p>\n<p>Here’s serverless.yml sample which a triggered statemachine by S3 event.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> example<span class=\"token punctuation\">-</span>stepf<span class=\"token punctuation\">-</span>nodejs\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n  <span class=\"token key atrule\">iamRoleStatements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">Effect</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Allow\"</span>\n      <span class=\"token key atrule\">Action</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">\"states:StartExecution\"</span>\n      <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">startExecution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.start\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">s3</span><span class=\"token punctuation\">:</span> photos\n    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">statemachine_arn</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>resources.Outputs.MyStateMachine.Value<span class=\"token punctuation\">}</span>\n\n<span class=\"token key atrule\">stepFunctions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stateMachines</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">hellostepfunc1</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> MyStateMachine\n      <span class=\"token key atrule\">definition</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">Comment</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"A Hello World example of the Amazon States Language using an AWS Lambda Function\"</span>\n        <span class=\"token key atrule\">StartAt</span><span class=\"token punctuation\">:</span> HelloWorld1\n        <span class=\"token key atrule\">States</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">HelloWorld1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> Task\n            <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-hello\"</span>\n            <span class=\"token key atrule\">End</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Outputs</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">MyStateMachine</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Description</span><span class=\"token punctuation\">:</span> The ARN of the example state machine\n      <span class=\"token key atrule\">Value</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">Ref</span><span class=\"token punctuation\">:</span> MyStateMachine\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>step<span class=\"token punctuation\">-</span>functions\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>pseudo<span class=\"token punctuation\">-</span>parameters</code></pre></div>\n<h2>Create a sample application</h2>\n<p>Let’s consider a small 2 step application that starts EC2 and write the result on S3 bucket.</p>\n<p>First, we will create a Lambda function that only starts an EC2 instance, to which will be passed instanceId via API Body request parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">startEC2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ec2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>EC2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    InstanceIds<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      event<span class=\"token punctuation\">.</span>instanceId\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> ec2<span class=\"token punctuation\">.</span><span class=\"token function\">startInstances</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Your </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>event<span class=\"token punctuation\">.</span>instanceId<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> instance started successfully</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Then, here is another Lambda function which writes a log to S3 Bucket.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">AWS</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aws-sdk'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">writeS3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AWS<span class=\"token punctuation\">.</span>S3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> params <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    Bucket<span class=\"token operator\">:</span> <span class=\"token string\">'sls-logs-bukect'</span><span class=\"token punctuation\">,</span>\n    Key<span class=\"token operator\">:</span> <span class=\"token string\">'success!!'</span>\n <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> s3<span class=\"token punctuation\">.</span><span class=\"token function\">putObject</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">a log writed successfully</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the end, describe your serverless.yml looks like, and deploy with <code class=\"language-text\">serverless deploy</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> example<span class=\"token punctuation\">-</span>stepf<span class=\"token punctuation\">-</span>nodejs\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n  <span class=\"token key atrule\">iamRoleStatements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">Effect</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Allow\"</span>\n      <span class=\"token key atrule\">Action</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">\"ec2:*\"</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">\"s3:*\"</span>\n      <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token string\">\"*\"</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">startEC2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.startEC2\n  <span class=\"token key atrule\">writeS3</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.writeS3\n\n<span class=\"token key atrule\">stepFunctions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stateMachines</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">hellostepfunc1</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> startEC2\n            <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> post\n      <span class=\"token key atrule\">definition</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">Comment</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"A sample application\"</span>\n        <span class=\"token key atrule\">StartAt</span><span class=\"token punctuation\">:</span> StartEC2\n        <span class=\"token key atrule\">States</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">StartEC2</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> Task\n            <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-startEC2\"</span>\n            <span class=\"token key atrule\">Next</span><span class=\"token punctuation\">:</span> WriteS3\n          <span class=\"token key atrule\">WriteS3</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> Task\n            <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-writeS3\"</span>\n            <span class=\"token key atrule\">End</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>step<span class=\"token punctuation\">-</span>functions\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>pseudo<span class=\"token punctuation\">-</span>parameters</code></pre></div>\n<p>If you can see the API Gateway endpoint on your console, it means to deploy successfully。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Serverless StepFunctions OutPuts\nendpoints:\n  POST - https://ae0dyh8676.execute-api.us-east-1.amazonaws.com/dev/startEC2</code></pre></div>\n<p>Send a CURL request to your live endpoint:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -XPOST https://ae0dyh8676.execute-api.us-east-1.amazonaws.com/dev/startEC2 -d <span class=\"token string\">'{\"instanceId\":\"&lt;your instance ID>\"}'</span></code></pre></div>\n<p>You should see that specified EC2 will be started and a log will be written to S3 Bucket.</p>\n<h2>Summary</h2>\n<p>The Serverless Step Functions plugin makes it easier to manage and deploy your Step Functions.</p>\n<p>If you have any comments or feedback, please create a new <a href=\"https://github.com/horike37/serverless-step-functions/issues/new\">issue</a> or send a Pull Request. I always welcome them!!</p>\n<p>One more thing, tutorial on how to use the plugin has been coverd on <a href=\"https://www.youtube.com/channel/UCSLIvjWJwLRQze9Pn4cectQ\">FOOBAR</a> youtube channel. You can also learn it there. Thanks <a href=\"https://twitter.com/mavi888uy\">@mavi888uy</a> for making the great video!</p>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <iframe src=\"https://www.youtube.com/embed/bEB0zDHXXG4\" frameborder=\"0\" allowfullscreen style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>","frontmatter":{"title":"How to manage your AWS Step Functions with Serverless","date":"September 18, 2017","description":"Managing complex workflows with Serverless and AWS Step Functions."}}},"pageContext":{"slug":"/posts/2017-09-18-how-to-manage-your-aws-step-functions-with-serverless/","previous":{"fields":{"slug":"/posts/2017-09-15-building-mutliple-runtimes/"},"frontmatter":{"title":"How to use multiple runtimes in a single serverless microservice"}},"next":{"fields":{"slug":"/posts/2017-09-21-serverless-webtasks/"},"frontmatter":{"title":"Webtasks brings node 8, no cold starts, and streamlined on-boarding to Serverless"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-07-24-anatomy-of-a-serverless-app/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"efb2b8bc-9b8c-5ddd-9a0d-38cf21813883","excerpt":"We’ve all been new to serverless before. In this post, I’ll walk you through how to get up and running on your first application. Let’s cut through the docs…","html":"<p>\nWe’ve all been new to serverless before. In this post, I’ll walk you through how to get up and running on your first application. Let’s cut through the docs, shall we?</p>\n<p>This application will be a backend email service that can be called over HTTP from a simple frontend like <code class=\"language-text\">curl</code>. You will learn how to:</p>\n<ul>\n<li>Setup the development environment</li>\n<li>Create an application project </li>\n<li>Create a serverless service using a boilerplate template</li>\n<li>Run and test the service locally</li>\n<li>Deploy the service</li>\n<li>Run the service via the public HTTP endpoint</li>\n<li>Perform basic validation and error handling</li>\n</ul>\n<h2>Getting Started</h2>\n<p>I had been following serverless technologies for a while, and skimmed over the provider documentation and examples. It was really helpful to know the lay of the land and what was available out there. AWS Lambda’s <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/getting-started.html\">getting started</a> documentation was helpful but overwhelming, and it was tedious to use the AWS Console. I wanted to use my own development workflow - code using my favorite editor, build using an easy to use toolchain, do a test/debug cycle, and finally deploy.</p>\n<p>I had to make some choices before I started development:</p>\n<ul>\n<li><strong>Programming language</strong>: <a href=\"https://nodejs.org/en/\">NodeJS</a> (my familiarity, all serverless platforms support it)</li>\n<li><strong>Platform</strong>: <a href=\"https://aws.amazon.com/lambda/\">AWS Lambda</a> (most popular and mature, lots of supporting services)</li>\n<li><strong>Toolset</strong>: <a href=\"https://serverless.com/framework/\">Serverless Framework</a> (opensource, repo with 17K+ stars, actively maintained, 2 week release cadence)</li>\n</ul>\n<h2>Setup</h2>\n<p>The initial setup was straightforward:</p>\n<ol>\n<li>Install NodeJS: <a href=\"https://nodejs.org/en/download/\">download</a> or <a href=\"https://nodejs.org/en/download/package-manager/#osx\">using package manager</a></li>\n<li>Install the <a href=\"https://serverless.com/framework/\">Serverless Framework</a>: <code class=\"language-text\">npm install -g serverless</code></li>\n<li>\n<p>Setup an AWS account</p>\n<ul>\n<li><a href=\"http://docs.aws.amazon.com/lambda/latest/dg/setting-up.html#setting-up-signup\">Sign up for AWS</a></li>\n<li><a href=\"http://docs.aws.amazon.com/lambda/latest/dg/setting-up.html#setting-up-iam\">Create an IAM User</a></li>\n<li><a href=\"http://docs.aws.amazon.com/lambda/latest/dg/setup-awscli.html\">Install and setup AWS CLI</a></li>\n</ul>\n</li>\n</ol>\n<p>The AWS setup is necessary so that we can deploy our serverless application on AWS Lambda. After creating the AWS IAM user,  we’ll have to <a href=\"https://serverless.com/framework/docs/providers/aws/guide/credentials/\">configure the credentials</a> to give access to the Serverless Framework, for creating and managing resources on our behalf.</p>\n<p>You can use either of the options to configure the credentials:</p>\n<p><code class=\"language-text\">aws configure</code> or <code class=\"language-text\">serverless config credentials</code></p>\n<blockquote>\n<p>Setting up an account with AWS and configuring was the most time-consuming and painful process, but as you will see, it gets better after that. So keep chugging along.</p>\n</blockquote>\n<h2>Creating the Project</h2>\n<p>A little bit of planning on the project structure makes a lot of difference in visualizing the different parts of the system. We will build an application named <code class=\"language-text\">postman</code>, with a simple frontend using <code class=\"language-text\">curl</code> and a backend serverless email service, to send out emails to users over HTTP.</p>\n<p>Here is an example that works for me:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">|</span>-- postman\n  <span class=\"token operator\">|</span>-- README.md\n  <span class=\"token operator\">|</span>-- frontend\n  `-- services</code></pre></div>\n<p>where,</p>\n<ul>\n<li><code class=\"language-text\">frontend</code> folder holds the frontend application</li>\n<li><code class=\"language-text\">services</code> folder holds the serverless service(s)</li>\n</ul>\n<p>A structure like this provides clear separation for the non-serverless and serverless code for the overall application. The way the non-serverless portion of the application is written is totally your choice. In this post, I will primarily focus on the serverless portion of the application inside the <code class=\"language-text\">services</code> folder. We will not create a frontend application, so we don’t need the <code class=\"language-text\">frontend</code> folder.</p>\n<h2>Creating the Email Service</h2>\n<p>Let’s create an email service that will send out emails to users with some text. We will use <a href=\"https://www.mailgun.com/\">Mailgun</a> as our email service provider, and shoot for making the email service generic enough to be reused across other applications.</p>\n<h3>Starting With a Boilerplate Template</h3>\n<p>The Serverless Framework comes with boilerplate templates that make it really quick to get started. In our case, since we are using AWS as our provider and NodeJS as our language of choice, we will start with:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> services\n$ serverless create --template aws-nodejs --path email-service</code></pre></div>\n<p>which creates the service for us:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Serverless: Generating boilerplate<span class=\"token punctuation\">..</span>.\nServerless: Generating boilerplate <span class=\"token keyword\">in</span> <span class=\"token string\">\"/home/svrless/apps/postman/services/email-service\"</span>\n _______                             __\n<span class=\"token operator\">|</span>   _   .-----.----.--.--.-----.----<span class=\"token operator\">|</span>  .-----.-----.-----.\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>___<span class=\"token operator\">|</span>  -__<span class=\"token operator\">|</span>   _<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  -__<span class=\"token operator\">|</span>   _<span class=\"token operator\">|</span>  <span class=\"token operator\">|</span>  -__<span class=\"token operator\">|</span>__ --<span class=\"token operator\">|</span>__ --<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>____   <span class=\"token operator\">|</span>_____<span class=\"token operator\">|</span>__<span class=\"token operator\">|</span>  <span class=\"token punctuation\">\\</span>___/<span class=\"token operator\">|</span>_____<span class=\"token operator\">|</span>__<span class=\"token operator\">|</span> <span class=\"token operator\">|</span>__<span class=\"token operator\">|</span>_____<span class=\"token operator\">|</span>_____<span class=\"token operator\">|</span>_____<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>   <span class=\"token operator\">|</span>             The Serverless Application Framework\n<span class=\"token operator\">|</span>       <span class=\"token operator\">|</span>                           serverless.com, v1.16.0\n -------'\n\nServerless: Successfully generated boilerplate <span class=\"token keyword\">for</span> template: <span class=\"token string\">\"aws-nodejs\"</span></code></pre></div>\n<blockquote>\n<p>Read the docs for more info. on <a href=\"https://serverless.com/framework/docs/providers/aws/guide/services#creation\">creating a service</a>.</p>\n</blockquote>\n<p>We will briefly look at the generated files and then modify them to suit our requirements.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">|</span>-- services\n    <span class=\"token variable\"><span class=\"token variable\">`</span>-- email-service\n        <span class=\"token operator\">|</span>-- handler.js\n        <span class=\"token variable\">`</span></span>-- serverless.yml</code></pre></div>\n<p>Let’s look at the <code class=\"language-text\">serverless.yml</code> and the <code class=\"language-text\">handler.js</code> files. I have removed the commented lines for brevity and clarity. <strong>Note</strong>: I have updated the function and handler names, to suit the example.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> email<span class=\"token punctuation\">-</span>service\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n  \n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">send</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.sendEmail</code></pre></div>\n<p>The <strong>serverless.yml</strong> file describes the service and it’s where you define your <code class=\"language-text\">provider</code> settings, <code class=\"language-text\">functions</code> with their corresponding handlers, <code class=\"language-text\">events</code> that trigger them, and provider <code class=\"language-text\">resources</code> needed by the service.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"># handler<span class=\"token punctuation\">.</span>js\n\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\nmodule<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sendEmail</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'Go Serverless! Simulating sending emails successful.'</span><span class=\"token punctuation\">,</span> event <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <strong>handler.js</strong> file contains your function code. The function definition in <code class=\"language-text\">serverless.yml</code> will point to this <code class=\"language-text\">handler.js</code> file and the function defined here. <strong>Note</strong>: I have updated the handler name and the code within to suit our example.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token punctuation\">...</span>\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">send</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.sendEmail</code></pre></div>\n<p>In our example, <code class=\"language-text\">handler: handler.sendEmail</code> in the <code class=\"language-text\">serverless.yml</code> file points to <code class=\"language-text\">module.exports.sendEmail</code> in the <code class=\"language-text\">handler.js</code> file.</p>\n<p>Also, note that while the handler method defined in <code class=\"language-text\">handler.js</code> file is <code class=\"language-text\">sendEmail</code>, the function name defined in <code class=\"language-text\">serverless.yml</code> file is <code class=\"language-text\">send</code>. The <code class=\"language-text\">serverless.yml</code> file provides the glue for that mapping. </p>\n<h3>Invoke Locally</h3>\n<p>Let’s run the <code class=\"language-text\">send</code> function locally:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> services/email-service\n$ serverless invoke <span class=\"token builtin class-name\">local</span> --function <span class=\"token function-name function\">send</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Go Serverless! Simulating sending emails successful.\"</span>,\n    <span class=\"token string\">\"event\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We have successfully run a serverless function locally. It is very important to be able to run a function locally while you are developing, so you can get quick feedback.</p>\n<h3>Mapping an HTTP endpoint</h3>\n<p>To be able to share this service across other applications, it is important that our service can be accessed publicly. Let’s map an HTTP endpoint to our function so that we can call our function publicly over the web. Again, the <code class=\"language-text\">serverless.yml</code> file provides the glue to that mapping.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> email<span class=\"token punctuation\">-</span>service\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs6.10\n  \n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">send</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> handler.sendEmail\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> email\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> post</code></pre></div>\n<p>The <code class=\"language-text\">events</code> sub-section defines the mapping of the <code class=\"language-text\">send</code> function to the <code class=\"language-text\">http</code> endpoint of <code class=\"language-text\">email</code>, and defines it to be of type <code class=\"language-text\">post</code>.</p>\n<blockquote>\n<p>Read the docs for detailed info. on the <a href=\"https://serverless.com/framework/docs/providers/aws/guide/services\">services</a>, <a href=\"https://serverless.com/framework/docs/providers/aws/guide/functions/\">functions</a>, <a href=\"https://serverless.com/framework/docs/providers/aws/guide/events/\">events</a>, and <a href=\"https://serverless.com/framework/docs/providers/aws/guide/resources/\">resources</a>.</p>\n</blockquote>\n<p>The current code as shown below, has a response which is not good for HTTP results:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'Go Serverless! Simulating sending emails successful.'</span><span class=\"token punctuation\">,</span> event <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html\">HTTP response</a> expects a shape that has a status code and a body attribute. So we will change the response shape to follow the HTTP convention.</p>\n<p>Testing it locally shows the newly-updated response.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ serverless invoke <span class=\"token builtin class-name\">local</span> --function <span class=\"token function-name function\">send</span>\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"statusCode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">200</span>,\n    <span class=\"token string\">\"body\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>message<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Go Serverless! Simulating sending emails successful.<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>input<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>}\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Deploy to AWS</h3>\n<p>Now, let’s deploy it to AWS Lambda, so we can invoke the function over the HTTP endpoint we created. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls deploy\nServerless: Packaging service<span class=\"token punctuation\">..</span>.\nServerless: Creating Stack<span class=\"token punctuation\">..</span>.\nServerless: Checking Stack create progress<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.\nServerless: Stack create finished<span class=\"token punctuation\">..</span>.\nServerless: Uploading CloudFormation <span class=\"token function\">file</span> to S3<span class=\"token punctuation\">..</span>.\nServerless: Uploading artifacts<span class=\"token punctuation\">..</span>.\nServerless: Uploading <span class=\"token function\">service</span> .zip <span class=\"token function\">file</span> to S3 <span class=\"token punctuation\">(</span><span class=\"token number\">336</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span>.\nServerless: Validating template<span class=\"token punctuation\">..</span>.\nServerless: Updating Stack<span class=\"token punctuation\">..</span>.\nServerless: Checking Stack update progress<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\nServerless: Stack update finished<span class=\"token punctuation\">..</span>.\nService Information\nservice: email-service\nstage: dev\nregion: us-east-1\napi keys:\n  None\nendpoints:\n  POST - https://xdsf3ghy2s.execute-api.us-east-1.amazonaws.com/dev/email\nfunctions:\n  send: email-service-dev-send</code></pre></div>\n<p>There is a lot going on behind the scenes, which the Serverless Framework does for you. <code class=\"language-text\">sls deploy</code> will deploy all functions in your service. If you are just iterating on a single function, you can use <code class=\"language-text\">sls deploy function --function send</code> to just deploy the named function.</p>\n<blockquote>\n<p>Read the docs for detailed info. on <a href=\"https://serverless.com/framework/docs/providers/aws/guide/deploying/\">deployment</a> of services.</p>\n</blockquote>\n<p>Without going into the details of the deployment itself, let’s first focus on the usability aspect of the service. The output above gives us the HTTP endpoint for our service.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">endpoints:\n  POST - https://smif3ghy1c.execute-api.us-east-1.amazonaws.com/dev/email</code></pre></div>\n<p><strong>Note</strong>, A stage identifier <code class=\"language-text\">dev</code> has been added automatically to the endpoint and the function name. You can specify a <code class=\"language-text\">stage</code> section in <code class=\"language-text\">serverless.yml</code> but it uses <code class=\"language-text\">dev</code> by default in our case.</p>\n<p>Let’s test the deployed function by running it via <code class=\"language-text\">curl</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -X POST https://smif3ghy1c.execute-api.us-east-1.amazonaws.com/dev/email -d <span class=\"token string\">'{}'</span></code></pre></div>\n<p>and we get the following response:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n   <span class=\"token property\">\"message\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Go Serverless! Simulating sending emails successful.\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token property\">\"input\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"resource\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"/email\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"/email\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"httpMethod\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n         ...\n         <span class=\"token property\">\"Content-Type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"application/x-www-form-urlencoded\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"Host\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"smif3ghy1c.execute-api.us-east-1.amazonaws.com\"</span><span class=\"token punctuation\">,</span>\n         ...\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"queryStringParameters\"</span><span class=\"token operator\">:</span><span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"pathParameters\"</span><span class=\"token operator\">:</span><span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"stageVariables\"</span><span class=\"token operator\">:</span><span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"requestContext\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n         <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"/dev/email\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"stage\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"dev\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"requestId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"1234acaa-5dcd-11e7-afcd-43efe3598b81\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"identity\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n            ...\n            <span class=\"token property\">\"cognitoIdentityPoolId\"</span><span class=\"token operator\">:</span><span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n            ...\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"resourcePath\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"/email\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"httpMethod\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n         <span class=\"token property\">\"apiId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"smif3ghy1c\"</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span>\n      ...\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Note</strong>: For brevity, I left some important items in the output JSON and deleted the rest.</p>\n<p>Another important aspect to note is the <code class=\"language-text\">event</code> structure coming back from AWS API Gateway in the <code class=\"language-text\">input</code> attribute of the output JSON, as shown above. We will use this <code class=\"language-text\">event</code> structure to simulate local testing in the upcoming sections.</p>\n<p>So, we have come full circle - starting with some boilerplate code, customizing a function, adding an HTTP endpoint, testing it locally, deploying it to AWS and finally running it live using the HTTP endpoint.</p>\n<p>To remove the service, you can simply do <code class=\"language-text\">sls remove</code>.</p>\n<blockquote>\n<p><strong>Takeaway</strong>: We did all this without thinking about servers or infrastructure, or how we will deploy the service after we are done with development. It just happened as part of our development workflow. The developer just focused on coding their business requirements, experimenting with features, and getting a quick feedback cycle - without worrying about deployment or provisioning infrastructure. That is the power and essence of serverless development. </p>\n</blockquote>\n<h3>Implementing the Email Service</h3>\n<p>Let’s implement the email functionality and finish up our email service. At the end of it, we will have a fully functional service that can send emails. </p>\n<h4>Setting up Mailgun</h4>\n<p>We will use <a href=\"https://www.mailgun.com/\">Mailgun</a> as our backend email service provider. To use the service, <a href=\"https://app.mailgun.com/new/signup/\">sign up for a free account</a>, retrieve the <a href=\"https://mailgun.com/app/dashboard\">API keys from the dashboard</a>, and configure them as part of the service.</p>\n<blockquote>\n<p>Read the <a href=\"https://documentation.mailgun.com/en/latest/\">Mailgun docs</a>, to get started on sending emails.</p>\n</blockquote>\n<h4>Configuring the Service</h4>\n<p>Let’s go back to our handler method <code class=\"language-text\">sendEmails</code> in <code class=\"language-text\">handler.js</code> file and update it. We will use the Node.js module <a href=\"https://www.npmjs.com/package/mailgun-js\">mailgun_js</a> for sending emails using the Mailgun API. </p>\n<p>Let’s add the dependency. <strong>Note</strong>: You can <code class=\"language-text\">npm init</code> and follow the prompts to create your initial <code class=\"language-text\">package.json</code> file.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> mailgun-js --save</code></pre></div>\n<p>We should have:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  ...\n    <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"mailgun-js\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.11.2\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We need a place to store our configuration settings that the service can use. We will use a JSON formatted config file to stash our settings. The idea is to have one config file per stage of deployment i.e. dev, test, prod etc. Here is the <code class=\"language-text\">config.prod.example.json</code> file with some settings. Rename the file to <code class=\"language-text\">config.prod.json</code> and supply the values.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"># config.prod.example.json\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"region\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"us-east-1\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"MAILGUN_APIKEY\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"your-mailgun-key-here\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"MAILGUN_DOMAIN\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"your-mailgun-domain-here\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Note:</strong> Make sure that you <strong>DON’T</strong> check-in the <code class=\"language-text\">config.prod.json</code> config file with your secrets into source control.</p>\n<p>Let’s look at some updates to the configuration settings in the <code class=\"language-text\">serverless.yml</code> file. </p>\n<ul>\n<li>add <code class=\"language-text\">custom</code> section for custom settings</li>\n<li>add <code class=\"language-text\">environment</code> section to add the Mailgun settings</li>\n<li>update the <code class=\"language-text\">provider</code> section to add a stage and a region</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token punctuation\">...</span>\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">defaultStage</span><span class=\"token punctuation\">:</span> prod\n  <span class=\"token key atrule\">currentStage</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>opt<span class=\"token punctuation\">:</span>stage<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">:</span>custom.defaultStage<span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">currentRegion</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>file(./config.$<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.currentStage<span class=\"token punctuation\">}</span>.json)<span class=\"token punctuation\">:</span>region<span class=\"token punctuation\">}</span>\n  \n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">...</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.currentStage<span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.currentRegion<span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">MAILGUN_APIKEY</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>file(./config.$<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.currentStage<span class=\"token punctuation\">}</span>.json)<span class=\"token punctuation\">:</span>MAILGUN_APIKEY<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">MAILGUN_DOMAIN</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>file(./config.$<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.currentStage<span class=\"token punctuation\">}</span>.json)<span class=\"token punctuation\">:</span>MAILGUN_DOMAIN<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">...</span></code></pre></div>\n<p>One thing to note here, is the use of <code class=\"language-text\">${file(./config.${self:custom.currentStage}</code> to read the correct config file based on the value of <code class=\"language-text\">currentStage</code> which in turn is defined in the <code class=\"language-text\">custom</code> section. So just by changing the value of the <code class=\"language-text\">currentStage</code> and providing a config file named <code class=\"language-text\">config.&lt;stage&gt;.json</code>, you can have multiple configurations per stage of deployment.</p>\n<h4>Sending Emails</h4>\n<p>With the configuration out of the way, we can now focus on the actual code to send emails via Mailgun.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MAILGUN_APIKEY</span>   <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MAILGUN_APIKEY</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MAILGUN_DOMAIN</span>   <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">MAILGUN_DOMAIN</span>\n\n<span class=\"token keyword\">const</span> mailgun <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mailgun-js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  apiKey<span class=\"token operator\">:</span> <span class=\"token constant\">MAILGUN_APIKEY</span><span class=\"token punctuation\">,</span>\n  domain<span class=\"token operator\">:</span> <span class=\"token constant\">MAILGUN_DOMAIN</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>First, we initialize the <code class=\"language-text\">mailgun-js</code> module with the API key and domain, retrieving the appropriate values from the process’ <code class=\"language-text\">env</code> space.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fromAddress    <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;demo@MAILGUN_DOMAIN></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> subjectText    <span class=\"token operator\">=</span> <span class=\"token string\">\"Serverless Email Demo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> messageText    <span class=\"token operator\">=</span> <span class=\"token string\">'Sample email sent from Serverless Email Demo.'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> messageHtml    <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n&lt;html>\n  &lt;title>Serverless Email Demo&lt;/title>\n  &lt;body>\n    &lt;div>\n      &lt;h1>Serverless Email Demo&lt;/h1>\n      &lt;span>Sample email sent from Serverless Email Demo.&lt;/span>\n    &lt;/div>\n  &lt;/body>\n&lt;/html>\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>Then, we define some constants, text and HTML content that will form the body of the email.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sendEmail</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> toAddress <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      toAddress <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to_address <span class=\"token operator\">||</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>toAddress <span class=\"token operator\">!==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">const</span> emailData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">from</span><span class=\"token operator\">:</span> fromAddress<span class=\"token punctuation\">,</span>\n        to<span class=\"token operator\">:</span> toAddress<span class=\"token punctuation\">,</span>\n        subject<span class=\"token operator\">:</span> subjectText<span class=\"token punctuation\">,</span>\n        text<span class=\"token operator\">:</span> messageText<span class=\"token punctuation\">,</span>\n        html<span class=\"token operator\">:</span> messageHtml\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// send email</span>\n    mailgun<span class=\"token punctuation\">.</span><span class=\"token function\">messages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>emailData<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> body</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// log error response</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          statusCode<span class=\"token operator\">:</span> <span class=\"token number\">202</span><span class=\"token punctuation\">,</span>\n          body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            message<span class=\"token operator\">:</span> <span class=\"token string\">\"Request to send email is successful.\"</span><span class=\"token punctuation\">,</span>\n            input<span class=\"token operator\">:</span> body<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> err <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      statusCode<span class=\"token operator\">:</span> <span class=\"token number\">422</span><span class=\"token punctuation\">,</span>\n      body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        message<span class=\"token operator\">:</span> <span class=\"token string\">\"Bad input data or missing email address.\"</span><span class=\"token punctuation\">,</span>\n        input<span class=\"token operator\">:</span> event<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// log error response</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>First, we define the handler method <code class=\"language-text\">sendEmail</code> that is mapped to the function <code class=\"language-text\">send</code> in the <code class=\"language-text\">serverless.yml</code> file. This method does some basic validation and then calls the <code class=\"language-text\">mailgun.messages().send()</code> API method passing in the required data via the <code class=\"language-text\">emailData</code> structure. </p>\n<p>We define some basic error handling code block, and if there is no error, it returns an appropriate response back. In case of an error, an appropriate error response is returned.</p>\n<p>Note that the <code class=\"language-text\">event.body</code> holds the input data that is passed in by the caller.</p>\n<h4>Testing Locally</h4>\n<p>Before we deploy our function, let’s test it locally first. </p>\n<p>To make it easier to test, let’s create a data file <code class=\"language-text\">send-email-data.json</code> that mocks the <code class=\"language-text\">event</code> data structure passed in by the API Gateway:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"resource\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"/email\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"/email\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"httpMethod\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"headers\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"queryStringParameters\"</span><span class=\"token operator\">:</span><span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"pathParameters\"</span><span class=\"token operator\">:</span><span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"stageVariables\"</span><span class=\"token operator\">:</span><span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"requestContext\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n     <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"/prod/email\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token property\">\"stage\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"prod\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token property\">\"requestId\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token property\">\"resourcePath\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"/email\"</span><span class=\"token punctuation\">,</span>\n     <span class=\"token property\">\"httpMethod\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"POST\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"body\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"{\\\"to_address\\\":\\\"your@email.com\\\"}\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"isBase64Encoded\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Although we have a lot of attributes in the mocked data structure, the bare minimum attribute we need to make it work is the <code class=\"language-text\">body</code> attribute with its value.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls invoke <span class=\"token builtin class-name\">local</span> --function send -p send-email-data.json\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"statusCode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">202</span>,\n    <span class=\"token string\">\"body\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>message<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Request to send email is successful.<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>input<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>id<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>&lt;20170721005146.92353.69A8F3012CBF231A@yourdomain.mailgun.org><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>message<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Queued. Thank you.<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>}}\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note, that we pass the mock <code class=\"language-text\">event</code> structure in the <code class=\"language-text\">send-email-data.json</code> file via the <code class=\"language-text\">-p</code> flag. The <code class=\"language-text\">event</code> structure contains the email address required by our function in the <code class=\"language-text\">body</code> attribute.  </p>\n<p>And, now you should have an email in your inbox:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">From: demo@mailgun_domain\nDate: July 3, 2017 at 7:02:07 PM EDT\nTo: your@email.com\nSubject: Serverless Email Demo\n\nServerless Email Demo\n\nSample email sent from Serverless Email Demo.</code></pre></div>\n<p>Alternatively, if we test for the not-so-happy path, i.e. calling without passing in an email address, we get our desired error message:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls invoke <span class=\"token builtin class-name\">local</span> --function <span class=\"token function-name function\">send</span>\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"statusCode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">422</span>,\n    <span class=\"token string\">\"body\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>message<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Bad input data or missing email address.<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>}\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Deploying the Email Service</h2>\n<p>Now that we feel we have the functionality working well, let’s deploy the service.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls deploy\n\nServerless: Packaging service<span class=\"token punctuation\">..</span>.\nServerless: Uploading CloudFormation <span class=\"token function\">file</span> to S3<span class=\"token punctuation\">..</span>.\nServerless: Uploading artifacts<span class=\"token punctuation\">..</span>.\nServerless: Uploading <span class=\"token function\">service</span> .zip <span class=\"token function\">file</span> to S3 <span class=\"token punctuation\">(</span><span class=\"token number\">2.03</span> MB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span>.\nServerless: Validating template<span class=\"token punctuation\">..</span>.\nServerless: Updating Stack<span class=\"token punctuation\">..</span>.\nServerless: Checking Stack update progress<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.\nServerless: Stack update finished<span class=\"token punctuation\">..</span>.\nService Information\nservice: email-service\nstage: prod\nregion: us-east-1\napi keys:\n  None\nendpoints:\n  POST - https://yt1i5ydiu4.execute-api.us-east-1.amazonaws.com/prod/email\nfunctions:\n  send: email-service-prod-send</code></pre></div>\n<p>Note, that the stage used is <code class=\"language-text\">prod</code> and it is reflected in the function name <code class=\"language-text\">email-service-prod-send</code>, and the resulting endpoint.</p>\n<h3>Calling the Service</h3>\n<p>Let’s call the live function that has been deployed to AWS. We will explore the <code class=\"language-text\">--log</code> flag that will output logging information about our invocation.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls invoke --function send -p send-email-data.json --log\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"statusCode\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">202</span>,\n    <span class=\"token string\">\"body\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>message<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Request to send email is successful.<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>input<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>id<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>&lt;20170721005341.92497.BF1D6AF2BA38787B@yourdomain.mailgun.org><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>,<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>message<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>Queued. Thank you.<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>}}\"</span>\n<span class=\"token punctuation\">}</span>\n--------------------------------------------------------------------\nSTART RequestId: 09bd13cd-6daf-11e7-87e0-e9f5c3dd5058 Version: <span class=\"token variable\">$LATEST</span>\n<span class=\"token number\">2017</span>-07-21 00:53:41.960 <span class=\"token punctuation\">(</span>+00:00<span class=\"token punctuation\">)</span>\t09bd13cd-6daf-11e7-87e0-e9f5c3dd5058\t<span class=\"token punctuation\">{</span> statusCode: <span class=\"token number\">202</span>,\n  body: <span class=\"token string\">'{\"message\":\"Request to send email is successful.\",\"input\":{\"id\":\"&lt;20170721005341.92497.BF1D6AF2BA38787B@yourdomain.mailgun.org>\",\"message\":\"Queued. Thank you.\"}}'</span> <span class=\"token punctuation\">}</span>\nEND RequestId: 09bd13cd-6daf-11e7-87e0-e9f5c3dd5058\nREPORT RequestId: 09bd13cd-6daf-11e7-87e0-e9f5c3dd5058\tDuration: <span class=\"token number\">439.95</span> ms\tBilled Duration: <span class=\"token number\">500</span> ms \tMemory Size: <span class=\"token number\">1024</span> MB\tMax Memory Used: <span class=\"token number\">38</span> MB</code></pre></div>\n<p>The email is successfully sent.</p>\n<p>Since the deployment output also shows the HTTP endpoint for our email service, we can use <code class=\"language-text\">curl</code> to call that endpoint, passing it an email address.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -X POST https://yt1i5ydiu4.execute-api.us-east-1.amazonaws.com/prod/email -d <span class=\"token string\">'{\"to_address\":\"your@email.com\"}'</span>\n\nHTTP/1.1 <span class=\"token number\">202</span> Accepted\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.\n\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Request to send email is successful.\"</span>,<span class=\"token string\">\"input\"</span>:<span class=\"token punctuation\">{</span><span class=\"token string\">\"id\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"&lt;20170721005711.6305.4865866169A6F957@sandbox77a6b258412d4bb9a2d12abeb33ac01e.mailgun.org>\"</span>,<span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Queued. Thank you.\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Again, another email is successfully sent.</p>\n<h3>Error Handling</h3>\n<p>To have our code gracefully handle errors and bad input, I have added some validation checks. The code makes sure that if bad input data is passed in, the function returns an error even before calling the <code class=\"language-text\">mailgun</code> API method. That means quicker response times with potential cost gains at the Mailgun API side. Let’s try out some error edge cases and see the results:</p>\n<p><strong>No Data</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -i -X POST https://yt1i5ydiu4.execute-api.us-east-1.amazonaws.com/prod/email\n\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Bad input data or missing email address.\"</span>,<span class=\"token string\">\"input\"</span>:null<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Bad Data</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -i -X POST -d <span class=\"token string\">'{\"to_address\":\"\"}'</span> https://yt1i5ydiu4.execute-api.us-east-1.amazonaws.com/prod/email\n\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Bad input data or missing email address.\"</span>,<span class=\"token string\">\"input\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>to_address<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span><span class=\"token entity\" title=\"\\&quot;\">\\\"</span>}\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Note</strong>: Testing with bad input data <code class=\"language-text\">-d &#39;{}&#39;</code> or <code class=\"language-text\">-d &#39;{&quot;junk&quot;}&#39;</code>, results in the same output.</p>\n<p><strong>Malformed Email Address</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -i -X POST -d <span class=\"token string\">'{\"to_address\":\"junk\"}'</span> https://yt1i5ydiu4.execute-api.us-east-1.amazonaws.com/prod/email\n\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Internal server error\"</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">curl</code> kind of barfs, as the function causes an exception in this case. We can see the exception if we call the function with the framework:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls invoke --function send --data <span class=\"token string\">'{\"body\":\"{<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>to_address<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>:<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>junk<span class=\"token entity\" title=\"\\&quot;\">\\\"</span>}\"}'</span> --log\n\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"errorMessage\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"'to' parameter is not a valid address. please check documentation\"</span>,\n    <span class=\"token string\">\"errorType\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Error\"</span>,\n    <span class=\"token string\">\"stackTrace\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">..</span>.\n    <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n--------------------------------------------------------------------\nSTART RequestId: 0eb38aeb-6d9d-11e7-9787-2996c7e3fdb0 Version: <span class=\"token variable\">$LATEST</span>\n<span class=\"token number\">2017</span>-07-20 <span class=\"token number\">22</span>:44:58.544 <span class=\"token punctuation\">(</span>+00:00<span class=\"token punctuation\">)</span>\t0eb38aeb-6d9d-11e7-9787-2996c7e3fdb0\t<span class=\"token punctuation\">{</span> Error: <span class=\"token string\">'to'</span> parameter is not a valid address. please check documentation\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.\n<span class=\"token number\">2017</span>-07-20 <span class=\"token number\">22</span>:44:58.545 <span class=\"token punctuation\">(</span>+00:00<span class=\"token punctuation\">)</span>\t0eb38aeb-6d9d-11e7-9787-2996c7e3fdb0\t<span class=\"token punctuation\">{</span><span class=\"token string\">\"errorMessage\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"'to' parameter is not a valid address. please check documentation\"</span>,<span class=\"token string\">\"errorType\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"Error\"</span>,<span class=\"token string\">\"stackTrace\"</span><span class=\"token builtin class-name\">:</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.\nEND RequestId: 0eb38aeb-6d9d-11e7-9787-2996c7e3fdb0\nREPORT RequestId: 0eb38aeb-6d9d-11e7-9787-2996c7e3fdb0\tDuration: <span class=\"token number\">339.84</span> ms\tBilled Duration: <span class=\"token number\">400</span> ms \tMemory Size: <span class=\"token number\">1024</span> MB\tMax Memory Used: <span class=\"token number\">41</span> MB</code></pre></div>\n<p><strong>Note</strong>: We have been passing in data via the <code class=\"language-text\">-p</code> flag in our previous examples but you can also pass in data using the <code class=\"language-text\">--data</code> flag. </p>\n<p>Leaving an exception unhandled is not acceptable, so let’s refactor the code to return a proper HTTP response.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">    <span class=\"token operator\">...</span>\n    mailgun<span class=\"token punctuation\">.</span><span class=\"token function\">messages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>emailData<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> body</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// log error response</span>\n        <span class=\"token comment\">// console.log(error);</span>\n        <span class=\"token comment\">// callback(error);</span>\n        <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n          statusCode<span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n          body<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            message<span class=\"token operator\">:</span> error<span class=\"token punctuation\">,</span>\n            input<span class=\"token operator\">:</span> body<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span></code></pre></div>\n<p>Now, when we deploy the function and call it, we get a better response.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> -i -X POST -d <span class=\"token string\">'{\"to_address\":\"junk\"}'</span> https://yt9i5yniu3.execute-api.us-east-1.amazonaws.com/prod/email\n\nHTTP/1.1 <span class=\"token number\">400</span> Bad Request\nContent-Type: application/json\nContent-Length: <span class=\"token number\">118</span>\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>.\n\n<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span>:<span class=\"token punctuation\">{</span><span class=\"token string\">\"statusCode\"</span>:400<span class=\"token punctuation\">}</span>,<span class=\"token string\">\"input\"</span>:<span class=\"token punctuation\">{</span><span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span><span class=\"token string\">\"'to' parameter is not a valid address. please check documentation\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>This concludes the development of the application.</p>\n<blockquote>\n<p>Code: Get the <a href=\"https://github.com/rupakg/postman\">full source code</a> to the application project on Github.</p>\n</blockquote>\n<h2>Summary</h2>\n<p>We explored the path to creating a serverless application from scratch, starting with a boiler plate template. We then customized the code, tested the code locally, and deployed it to AWS Lambda. Finally, we accessed the public function via the HTTP endpoint, and also looked at some error conditions and use cases. At the end of it all, we created a fully functional serverless backed email service that sent out emails via the Mailgun email service provider.</p>","frontmatter":{"title":"Anatomy of a Serverless Application","date":"July 27, 2017","description":"A step-by-step look at the development of a serverless application."}}},"pageContext":{"slug":"/posts/2017-07-24-anatomy-of-a-serverless-app/","previous":{"fields":{"slug":"/posts/2017-07-21-serverless-cron-icle-5/"},"frontmatter":{"title":"Serverless (Cron)icle #5 - News from the Serverless Community"}},"next":{"fields":{"slug":"/posts/2017-07-28-serverless-cron-icle-6/"},"frontmatter":{"title":"Serverless (Cron)icle #6 - News from the Serverless Community"}}}}}
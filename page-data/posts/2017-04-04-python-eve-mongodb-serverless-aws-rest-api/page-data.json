{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-04-04-python-eve-mongodb-serverless-aws-rest-api/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"06c8f59a-1592-52b1-ac55-bb105e079c4d","excerpt":"Hi, I’m Naresh Surisetty, an enthusiastic Python developer based in India. I’m especially interested in developing scalable apps in the cloud - a main reason I…","html":"<img align=\"right\" src=\"https://docs.python-eve.org/en/latest/_static/eve-sidebar.png\">\n<p>Hi, I’m Naresh Surisetty, an enthusiastic Python developer based in India. I’m especially interested in developing scalable apps in the cloud - a main reason I’m drawn to experimenting with serverless architecture. In this post I’ll share a Serverless project using <a href=\"http://python-eve.org/\">Python EVE</a> and <a href=\"https://docs.mongodb.com/\">MongoDB</a>. </p>\n<blockquote>\n<p><strong>What is Python EVE?</strong> Python EVE is an open source Python REST API framework. Python EVE allows for <a href=\"https://en.wikipedia.org/wiki/HATEOAS\">HATEOAS</a> (Hypermedia As The Engine Of Application State), and includes pagination support, support for multiple content types (JSON, XML, plain text, …), if-Match/ETag and MongoDB GridFS. </p>\n</blockquote>\n<h1>Get Started Progamming</h1>\n<h2>1. Installation</h2>\n<p>We’ll use pip to install <strong>EVE</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> eve</code></pre></div>\n<p>We’ll create our MongoDB database using <a href=\"https://mlab.com/\">mLab</a>. If you don’t have an existing mLab account go ahead and create one as we’ll be using mLab hosted database throughout the post. <em>(There’s an option for a free Sandbox account.)</em> Make sure you create a database, as well. </p>\n<blockquote>\n<p><strong>What is mLab?</strong> mLab is a fully managed cloud database service that hosts MongoDB databases. mLab runs on cloud providers Amazon, Google, and Microsoft Azure, and has partnered with PaaS (Platform-as-a-Service) providers. Find more help getting started in the <a href=\"http://docs.mlab.com/\">mLab Docs &#x26; Quick Start Guide</a>.</p>\n</blockquote>\n<h2>2. Creating a Basic API</h2>\n<p>Create a project named <strong>eve-api-project</strong>. Navigate to <strong>eve-api-project</strong> folder and create a file called <strong>run.py</strong>. Copy the following code:</p>\n<p><strong>run.py</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> eve <span class=\"token keyword\">import</span> Eve\n  \n<span class=\"token comment\"># AWS lambda, sensible DB connection settings are stored in environment variables.</span>\nMONGO_HOST <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'MONGO_HOST'</span><span class=\"token punctuation\">)</span>\nMONGO_PORT <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'MONGO_PORT'</span><span class=\"token punctuation\">)</span>\nMONGO_USERNAME <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'MONGO_USERNAME'</span><span class=\"token punctuation\">)</span>\nMONGO_PASSWORD <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'MONGO_PASSWORD'</span><span class=\"token punctuation\">)</span>\nMONGO_DBNAME <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'MONGO_DBNAME'</span><span class=\"token punctuation\">)</span>\n  \n<span class=\"token comment\"># AWS </span>\napi_settings <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'MONGO_HOST'</span><span class=\"token punctuation\">:</span> MONGO_HOST<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'MONGO_PORT'</span><span class=\"token punctuation\">:</span> MONGO_PORT<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'MONGO_USERNAME'</span> <span class=\"token punctuation\">:</span> MONGO_USERNAME<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'MONGO_PASSWORD'</span> <span class=\"token punctuation\">:</span> MONGO_PASSWORD<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'MONGO_DBNAME'</span><span class=\"token punctuation\">:</span> MONGO_DBNAME<span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'RESOURCE_METHODS'</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DELETE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'ITEM_METHODS'</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'PATCH'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'DELETE'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'EXTENDED_MEDIA_INFO'</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'content_type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'length'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'RETURN_MEDIA_AS_BASE64_STRING'</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'RETURN_MEDIA_AS_URL'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'CACHE_CONTROL'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'max-age=20'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'CACHE_EXPIRES'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'DOMAIN'</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'people'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token string\">'item_title'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'person'</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token string\">'additional_lookup'</span><span class=\"token punctuation\">:</span>\n                      <span class=\"token punctuation\">{</span>\n                          <span class=\"token string\">'url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'regex(\"[\\w]+\")'</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">'field'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'lastname'</span>\n                      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token string\">'schema'</span><span class=\"token punctuation\">:</span>\n                      <span class=\"token punctuation\">{</span>\n                          <span class=\"token string\">'firstname'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                              <span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n                              <span class=\"token string\">'minlength'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                              <span class=\"token string\">'maxlength'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">'lastname'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                              <span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n                              <span class=\"token string\">'minlength'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                              <span class=\"token string\">'maxlength'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n                              <span class=\"token string\">'required'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                              <span class=\"token string\">'unique'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token punctuation\">}</span>\n                  <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\napp <span class=\"token operator\">=</span> Eve<span class=\"token punctuation\">(</span>settings<span class=\"token operator\">=</span>api_settings<span class=\"token punctuation\">)</span>  </code></pre></div>\n<h3>Lets break down the <strong>run.py</strong> file.</h3>\n<ul>\n<li>\n<p>Initially we’ve imported the <strong>EVE module</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> eve <span class=\"token keyword\">import</span> Eve</code></pre></div>\n</li>\n<li><strong>MONGO_HOST</strong>, <strong>MONGO_PORT</strong>, <strong>MONGO_USERNAME</strong>, <strong>MONGO_PASSWORD</strong> and <strong>MONGO_DBNAME</strong> defines the variable for storing our MongoDB host, port, username, password and database name that we’ll configure in our <strong>serverless.yml</strong> file as part of environment section. </li>\n<li><strong>api_settings</strong> dictionary defines all the <strong>configs and schemas</strong> for our <strong>API</strong>. You can use any name for defining your dictionary. For ease I’ve defined it as <strong>api_settings</strong>.</li>\n<li>\n<p><strong>DOMAIN</strong> section under <strong>api_settings</strong> defines the <strong>endpoints</strong> and their respective <strong>schemas</strong> for API.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token punctuation\">{</span><span class=\"token string\">'people'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token string\">'item_title'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'person'</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'additional_lookup'</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token punctuation\">{</span>\n                      <span class=\"token string\">'url'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'regex(\"[\\w]+\")'</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">'field'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'lastname'</span>\n                  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              <span class=\"token string\">'schema'</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token punctuation\">{</span>\n                      <span class=\"token string\">'firstname'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                          <span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">'minlength'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">'maxlength'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token string\">'lastname'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                          <span class=\"token string\">'type'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">'minlength'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">'maxlength'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">'required'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                          <span class=\"token string\">'unique'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n                      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token punctuation\">}</span>\n           <span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">}</span></code></pre></div>\n<p>   The above mentioned <strong>people</strong> schema defines EVE API to create an endpoint with name <strong>people</strong> and add the following structure for the API defined. We have two fields in the API named <strong>firstname</strong> and <strong>lastname</strong>. Different validations can be performed upon the schema such as <strong>minlength, maxlenth, type and many more</strong> that can be referred at <a href=\"http://python-eve.org/config.html#schema-definition\">EVE Allowed Validations</a>.</p>\n</li>\n<li>\n<p>Pass the <strong>api_settings</strong> as a parameter for settings in Eve.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">app <span class=\"token operator\">=</span> Eve<span class=\"token punctuation\">(</span>settings<span class=\"token operator\">=</span>api_settings<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This registers all the <strong>configs and schemas</strong> defined under <strong>api_settings</strong>.</p>\n</li>\n</ul>\n<h2>3. Defining the Serverless File</h2>\n<p>Create a file named <strong>serverless.yml</strong> under the same project directory.</p>\n<p><strong>serverless.yml</strong> </p>\n<div class=\"gatsby-highlight\" data-language=\"yamlex\"><pre class=\"language-yamlex\"><code class=\"language-yamlex\">service: eve-api\n\nframeworkVersion: &quot;&gt;=1.1.0 &lt;2.0.0&quot;\n\nprovider:\n  name: aws\n  runtime: python2.7\n  environment:\n    MONGO_HOST: &quot;api.db.com&quot;\n    MONGO_PORT: 27104\n    MONGO_USERNAME : &quot;api-user&quot;\n    MONGO_PASSWORD : &quot;api-pass&quot;\n    MONGO_DBNAME: &quot;api-db&quot;\n  iamRoleStatements:\n    -  Effect: &quot;Allow&quot;\n       Action:\n         - &quot;lambda:InvokeFunction&quot;\n       Resource: &quot;*&quot;\n\nplugins:\n  - serverless-wsgi\n\nfunctions:\n  api:\n    handler: wsgi.handler\n    events:\n      - http: ANY {proxy+}\n\ncustom:\n  wsgi:\n    app: run.app</code></pre></div>\n<h3>Lets break down the <strong>serverless.yml</strong> file.</h3>\n<ul>\n<li>If we get into the <strong>environment</strong> section under the <strong>provider</strong> section you can find <strong>MONGO<em>HOST, MONGO</em>USERNAME, MONGO<em>PASSWORD, MONGO</em>DBNAME</strong> and update them as per your MongoDB credentials. These values will be defined as Environment values in AWS Lambda.</li>\n<li>\n<p>Under plugins section we added <strong>serverless-wsgi</strong> as a plugin which is used to build and deploy <strong>Python WSGI</strong> applications.</p>\n<div class=\"gatsby-highlight\" data-language=\"npm\"><pre class=\"language-npm\"><code class=\"language-npm\">npm install --save severless-wsgi</code></pre></div>\n<blockquote>\n<p><strong>What is Serverless WSGI?</strong> The <a href=\"https://github.com/logandk/serverless-wsgi\">Serverless WSGI plugin</a> is used to deploy WSGI applications (Flask/Django/Pyramid etc.) and bundle Python packages.</p>\n</blockquote>\n</li>\n</ul>\n<h2>4. Test the Service</h2>\n<p>Fire up your console and run <code class=\"language-text\">serverless wsgi serve</code> in the project directory to see your live API at <code class=\"language-text\">http://localhost:5000</code>\n.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -i http://localhost:5000/people\nHTTP/1.1 <span class=\"token number\">200</span> OK</code></pre></div>\n<p>The response payload will look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"_items\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"firstname\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Naresh\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"lastname\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Surisetty\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"_id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"50bf198338345b1c604faf31\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"_updated\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Wed, 05 Dec 2012 09:53:07 GMT\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"_created\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Wed, 05 Dec 2012 09:53:07 GMT\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"_etag\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ec5e8200b8fa0596afe9ca71a87f23e71ca30e2d\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"_links\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"self\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"people/50bf198338345b1c604faf31\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"person\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        ...\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"_meta\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"max_results\"</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"total\"</span><span class=\"token operator\">:</span> <span class=\"token number\">70</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"page\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"_links\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"self\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"people\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"people\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"parent\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token property\">\"href\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"home\"</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <strong>_items</strong> list contains the requested data. Along with its own fields, other fields such as <strong>_created, _updated, _etag, _id</strong>, are automatically handled by the API (clients don’t need to provide them when adding/editing resources).</p>\n<p>The <strong>_meta</strong> field provides pagination data and will only be there if Pagination has been enabled (it is by default) and there is at least one document being returned. The <strong>_links</strong> list provides <a href=\"https://en.wikipedia.org/wiki/HATEOAS\">HATEOAS</a> directives. </p>\n<h2>5. Deploy the Service</h2>\n<p>Deploy the service with <code class=\"language-text\">serverless deploy</code>. If you need to setup Serverless, please see <a href=\"https://github.com/serverless/serverless#quick-start\">the Serverless Quick Start Guide</a> for instructions.</p>\n<h1>Conclusion</h1>\n<p>Python EVE and MongoDB enhanced with Serverless is an awesome bundle for REST API development. You can further enhance the REST API with more additions such as Adding <strong>Authentication</strong> , <strong>OAuth2</strong>, <strong>Swaggger</strong> documentation and even more. Check out more resources <a href=\"https://github.com/pyeve\">on GitHub</a>.</p>","frontmatter":{"title":"Python EVE + MongoDB + Serverless + AWS = REST All Happiness","date":"April 04, 2017","description":"Learn how to build and deploy a Serverless REST API using Python EVE and MongoDB"}}},"pageContext":{"slug":"/posts/2017-04-04-python-eve-mongodb-serverless-aws-rest-api/","previous":{"fields":{"slug":"/posts/2017-03-31-node-rest-api-with-serverless-lambda-and-dynamodb/"},"frontmatter":{"title":"Building a REST API in Node.js with AWS Lambda, API Gateway, DynamoDB, and Serverless Framework"}},"next":{"fields":{"slug":"/posts/2017-04-5-build-webshop-with-graphql-and-serverless/"},"frontmatter":{"title":"Building a Web Store with GraphQL, Stripe, Mailgun and the Serverless Framework"}}}}}
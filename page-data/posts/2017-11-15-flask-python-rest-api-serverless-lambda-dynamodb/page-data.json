{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-11-15-flask-python-rest-api-serverless-lambda-dynamodb/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"edbfd96f-44a4-5d02-9e3a-5754f9b4c92c","excerpt":"Your existing web framework tooling can work seamlessly with the Serverless Framework. Let’s go over how to use the Python web framework Flask to deploy a…","html":"<p>Your existing web framework tooling can work seamlessly with the <a href=\"https://serverless.com/framework/\">Serverless Framework</a>. Let’s go over how to use the Python web framework <a href=\"http://flask.pocoo.org/\">Flask</a> to deploy a Serverless REST API.</p>\n<p>In this walk-through, we will:</p>\n<ul>\n<li>Deploy a simple API endpoint</li>\n<li>Add a DynamoDB table and two endpoints to create and retrieve a User object</li>\n<li>Set up path-specific routing for more granular metrics and monitoring</li>\n<li>Configure your environment for local development for a faster development experience.</li>\n</ul>\n<p>If you already have a Flask application that you want to convert to Serverless, skip to the <a href=\"#converting-an-existing-flask-application\">Converting an existing Flask application</a> section below.</p>\n<p>If you want to skip the walkthrough and just get started with a fully-configured template, check out the <a href=\"#using-the-quick-start-template\">Using the Quick Start Template</a> section below.</p>\n<h4>Getting Started</h4>\n<p>To get started, you’ll need the <a href=\"https://serverless.com/framework/docs/providers/aws/guide/quick-start/\">Serverless Framework</a> installed. You’ll also need your environment configured with <a href=\"https://serverless.com/framework/docs/providers/aws/guide/credentials/\">AWS credentials</a>.</p>\n<h4>Creating and deploying a single endpoint</h4>\n<p>Let’s start by deploying a single endpoint.</p>\n<p>First, create a new directory with a <code class=\"language-text\">package.json</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">mkdir</span> my-flask-application <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> my-flask-application\n$ <span class=\"token function\">npm</span> init -f</code></pre></div>\n<p>Then, install a few dependencies. We’re going to use the <a href=\"https://github.com/logandk/serverless-wsgi\"><code class=\"language-text\">serverless-wsgi</code></a> plugin for negotiating the API Gateway event type into the WSGI format that Flask expects. We’ll also use the <a href=\"https://github.com/UnitedIncome/serverless-python-requirements\"><code class=\"language-text\">serverless-python-requirements</code></a> plugin for handling our Python packages on deployment.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev serverless-wsgi serverless-python-requirements</code></pre></div>\n<blockquote>\n<p>If you want a deeper dive on the <code class=\"language-text\">serverless-python-requirements</code> plugin, check out our previous post on <a href=\"https://serverless.com/blog/serverless-python-packaging/\">handling Python packaging with Serverless</a>.</p>\n</blockquote>\n<p>With our libraries installed, let’s write our Flask application. Create a file <code class=\"language-text\">app.py</code> with the following contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app.py</span>\n\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World!\"</span></code></pre></div>\n<p>This is a very simple application that returns <code class=\"language-text\">&quot;Hello World!&quot;</code> when a request comes in on the root path <code class=\"language-text\">/</code>. It’s the <a href=\"http://flask.pocoo.org/\">example application shown on Flask’s landing page</a> with no modifications.</p>\n<p>To get this application deployed, create a <code class=\"language-text\">serverless.yml</code> in the working directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> serverless<span class=\"token punctuation\">-</span>flask\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>python<span class=\"token punctuation\">-</span>requirements\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>wsgi\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">wsgi</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> app.app\n    <span class=\"token key atrule\">packRequirements</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">pythonRequirements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">dockerizePip</span><span class=\"token punctuation\">:</span> non<span class=\"token punctuation\">-</span>linux\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> python3.6\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> wsgi.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> ANY /\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ANY {proxy+}'</span></code></pre></div>\n<p><em>Note: a previous version of this post set <code class=\"language-text\">dockerizePip: true</code> instead of <code class=\"language-text\">dockerizePip: non-linux</code>. You’ll need <code class=\"language-text\">serverless-python-requirements</code> v3.0.5 or higher for this option.</em></p>\n<p>This is a pretty basic configuration. We’ve created one function, <code class=\"language-text\">app</code>. The handler is <code class=\"language-text\">handler</code> function from the <code class=\"language-text\">wsgi</code> module. Note that this module will be added to our deployment package by the <code class=\"language-text\">serverless-wsgi</code> plugin. We configure our application’s entry point in the <code class=\"language-text\">custom</code> block under the <code class=\"language-text\">wsgi</code> section. We declare that our app’s entrypoint is <code class=\"language-text\">app.app</code>, which means the <code class=\"language-text\">app</code> object in the <code class=\"language-text\">app.py</code> module.</p>\n<p>For our function’s <code class=\"language-text\">events</code> configuration, we’ve used a very broad path matching so that all requests on this domain are routed to this function. All of the HTTP routing logic will be done inside the Flask application.</p>\n<p>The last thing we need to do is handle our Python packages. The <code class=\"language-text\">serverless-python-requirements</code> plugin looks for a <code class=\"language-text\">requirements.txt</code> file in our working directory and installs them into our deployment package. Let’s build that <code class=\"language-text\">requirements.txt</code> file.</p>\n<p>First, create a virtual environment and activate it. I’m using Python3 in my <code class=\"language-text\">serverless.yml</code>, so I’m specifying that here as well:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ virtualenv venv --python<span class=\"token operator\">=</span>python3\n$ <span class=\"token builtin class-name\">source</span> venv/bin/activate</code></pre></div>\n<blockquote>\n<p>If you need a walkthrough on using Python virtual environments, check out <a href=\"http://docs.python-guide.org/en/latest/dev/virtualenvs/#lower-level-virtualenv\">Kenneth Reitz’s walkthrough</a>.</p>\n</blockquote>\n<p>Then, install the <code class=\"language-text\">Flask</code> package with <code class=\"language-text\">pip</code>, and save your dependencies in <code class=\"language-text\">requirements.txt</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> $ pip <span class=\"token function\">install</span> flask\n<span class=\"token punctuation\">(</span>venv<span class=\"token punctuation\">)</span> $ pip freeze <span class=\"token operator\">></span> requirements.txt</code></pre></div>\n<p>Now, deploy your function:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls deploy\n<span class=\"token punctuation\">..</span>. snip <span class=\"token punctuation\">..</span>.\nService Information\nservice: serverless-flask\nstage: dev\nregion: us-east-1\nstack: serverless-flask-dev\napi keys:\n  None\nendpoints:\n  ANY - https://bl4r0gjjv5.execute-api.us-east-1.amazonaws.com/dev\n  ANY - https://bl4r0gjjv5.execute-api.us-east-1.amazonaws.com/dev/<span class=\"token punctuation\">{</span>proxy+<span class=\"token punctuation\">}</span>\nfunctions:\n  app: serverless-flask-dev-app</code></pre></div>\n<p>After a minute, the console will show your <code class=\"language-text\">endpoints</code> in the <code class=\"language-text\">Service Information</code> section. Navigate to that route in your browser:</p>\n<img width=\"783\" alt=\"Flask Hello World\" src=\"https://user-images.githubusercontent.com/6509926/32240372-2ccf439c-be3b-11e7-99ee-00e5b78b1e7d.png\">\n<p>You did it—a real, live application on the Internet!</p>\n<h4>Adding a DynamoDB table with REST-like endpoints</h4>\n<p>Doing a “Hello World!” is fun, but your application will need to persist some sort of state to be useful. Let’s add a <a href=\"https://aws.amazon.com/dynamodb/\">DynamoDB table</a> as our backing store.</p>\n<p>For this simple example, let’s say we’re storing Users in a database. We want to store them by <code class=\"language-text\">userId</code>, which is a unique identifier for a particular user.</p>\n<p>First, we’ll need to configure our <code class=\"language-text\">serverless.yml</code> to provision the table. This involves three parts:</p>\n<ol>\n<li>Provisioning the table in the <a href=\"https://serverless.com/framework/docs/providers/aws/guide/resources/\"><code class=\"language-text\">resources</code></a> section;</li>\n<li>Adding the proper <a href=\"https://serverless.com/framework/docs/providers/aws/guide/iam/\">IAM permissions</a>; and</li>\n<li>Passing the table name as an <a href=\"https://serverless.com/framework/docs/providers/aws/guide/functions/#environment-variables\">environment variable</a> so our functions can use it.</li>\n</ol>\n<p>Change your <code class=\"language-text\">serverless.yml</code> to look as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> serverless<span class=\"token punctuation\">-</span>flask\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>python<span class=\"token punctuation\">-</span>requirements\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>wsgi\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">tableName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'users-table-${self:provider.stage}'</span>\n  <span class=\"token key atrule\">wsgi</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> app.app\n    <span class=\"token key atrule\">packRequirements</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">pythonRequirements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">dockerizePip</span><span class=\"token punctuation\">:</span> non<span class=\"token punctuation\">-</span>linux\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> python3.6\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n  <span class=\"token key atrule\">iamRoleStatements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">Effect</span><span class=\"token punctuation\">:</span> Allow\n      <span class=\"token key atrule\">Action</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>Query\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>Scan\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>GetItem\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>PutItem\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>UpdateItem\n        <span class=\"token punctuation\">-</span> dynamodb<span class=\"token punctuation\">:</span>DeleteItem\n      <span class=\"token key atrule\">Resource</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token punctuation\">{</span> <span class=\"token key atrule\">\"Fn::GetAtt\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"UsersDynamoDBTable\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Arn\"</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">USERS_TABLE</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.tableName<span class=\"token punctuation\">}</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> wsgi.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> ANY /\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ANY {proxy+}'</span>\n\n<span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">Resources</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">UsersDynamoDBTable</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::DynamoDB::Table'</span>\n      <span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">AttributeDefinitions</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span>\n            <span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> userId\n            <span class=\"token key atrule\">AttributeType</span><span class=\"token punctuation\">:</span> S\n        <span class=\"token key atrule\">KeySchema</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span>\n            <span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> userId\n            <span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> HASH\n        <span class=\"token key atrule\">ProvisionedThroughput</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">ReadCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n          <span class=\"token key atrule\">WriteCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n        <span class=\"token key atrule\">TableName</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>custom.tableName<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We provisioned the table in the <code class=\"language-text\">resources</code> section using CloudFormation syntax. We also added IAM permissions for our functions under the <code class=\"language-text\">iamRoleStatements</code> portion of the <code class=\"language-text\">provider</code> block. Finally, we passed the table name as the environment variable <code class=\"language-text\">USERS_TABLE</code> in the <code class=\"language-text\">environment</code> portion of the <code class=\"language-text\">provider</code> block.</p>\n<p>Now, let’s update our application to use the table. We’ll implement two endpoints: <code class=\"language-text\">POST /users</code> to create a new user, and <code class=\"language-text\">GET /users/{userId}</code> to get information on a particular user.</p>\n<p>Update your <code class=\"language-text\">app.py</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app.py</span>\n\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">import</span> boto3\n\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> jsonify<span class=\"token punctuation\">,</span> request\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\nUSERS_TABLE <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">'USERS_TABLE'</span><span class=\"token punctuation\">]</span>\nclient <span class=\"token operator\">=</span> boto3<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">(</span><span class=\"token string\">'dynamodb'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World!\"</span>\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users/&lt;string:user_id>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_user</span><span class=\"token punctuation\">(</span>user_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    resp <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>get_item<span class=\"token punctuation\">(</span>\n        TableName<span class=\"token operator\">=</span>USERS_TABLE<span class=\"token punctuation\">,</span>\n        Key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'userId'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">:</span> user_id <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    item <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'Item'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> item<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'User does not exist'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">404</span>\n\n    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'userId'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'S'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'S'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> methods<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    user_id <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'userId'</span><span class=\"token punctuation\">)</span>\n    name <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> user_id <span class=\"token keyword\">or</span> <span class=\"token keyword\">not</span> name<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Please provide userId and name'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span>\n\n    resp <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span>put_item<span class=\"token punctuation\">(</span>\n        TableName<span class=\"token operator\">=</span>USERS_TABLE<span class=\"token punctuation\">,</span>\n        Item<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'userId'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'S'</span><span class=\"token punctuation\">:</span> user_id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'S'</span><span class=\"token punctuation\">:</span> name <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'userId'</span><span class=\"token punctuation\">:</span> user_id<span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> name\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>In addition to base “Hello World” endpoint, we now have two new endpoints:</p>\n<ul>\n<li><code class=\"language-text\">GET /users/:userId</code> for getting a User</li>\n<li><code class=\"language-text\">POST /users</code> for creating a new User</li>\n</ul>\n<p>We’ve added a <code class=\"language-text\">boto3</code> dependency, so let’s install that into our virtual environment and update our requirements in <code class=\"language-text\">requirements.txt</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> boto3\n$ pip freeze <span class=\"token operator\">></span> requirements.txt</code></pre></div>\n<p>Let’s deploy the service and test it out!</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls deploy</code></pre></div>\n<p>We’ll use <code class=\"language-text\">curl</code> for these examples. Set the <code class=\"language-text\">BASE_DOMAIN</code> variable to your unique domain and base path so it’s easier to reuse:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">BASE_DOMAIN</span><span class=\"token operator\">=</span>https://bl4r0gjjv5.execute-api.us-east-1.amazonaws.com/dev</code></pre></div>\n<p>Then, let’s create a user:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -H <span class=\"token string\">\"Content-Type: application/json\"</span> -X POST <span class=\"token variable\">${BASE_DOMAIN}</span>/users -d <span class=\"token string\">'{\"userId\": \"alexdebrie1\", \"name\": \"Alex DeBrie\"}'</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Alex DeBrie\"</span>,\n  <span class=\"token string\">\"userId\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"alexdebrie1\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nice—we’ve created a new user! Now, let’s retrieve the user with the GET /users/:userId` endpoint:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -H <span class=\"token string\">\"Content-Type: application/json\"</span> -X GET <span class=\"token variable\">${BASE_DOMAIN}</span>/users/alexdebrie1\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Alex DeBrie\"</span>,\n  <span class=\"token string\">\"userId\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"alexdebrie1\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This isn’t a full-fledged REST API, and you’ll want to add things like error handling, authentication, and additional business logic. This does give a framework in which you can work to set up those things.</p>\n<h4>Path-specific routing</h4>\n<p>Let’s take another look at our function configuration in <code class=\"language-text\">serverless.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">functions:\n  app:\n    handler: wsgi.handler\n    events:\n      - http: ANY /\n      - http: &#39;ANY {proxy+}&#39;</code></pre></div>\n<p>We’re forwarding all traffic on the domain to our application and letting Flask handle the entirety of the routing logic. There is a benefit to this—you don’t have to manually string up all my routes and functions. You can also limit the impact of cold-starts on lightly-used routes.</p>\n<p>However, we also lose some of the benefits of the serverless architecture. You can isolate your bits of logic into separate functions and get a decent look at your application from standard metrics.</p>\n<p>If each route is handled by a different Lambda function, then you can see:</p>\n<ul>\n<li>How many times each route is invoked</li>\n<li>How many errors you have for each route</li>\n<li>How long each route takes (and how much money you could save if you made that route faster)</li>\n</ul>\n<p>Luckily, you can still get these things if you want them! You can configure your <code class=\"language-text\">serverless.yml</code> so that different routes are routed to different instances of your function.</p>\n<p>Each function instance will have the same code, but they’ll be segmented for metrics purposes:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> wsgi.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> ANY /\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ANY {proxy+}'</span>\n  <span class=\"token key atrule\">getUser</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> wsgi.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'GET /users/{proxy+}'</span>\n  <span class=\"token key atrule\">createUser</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> wsgi.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'POST /users'</span></code></pre></div>\n<p>Now, all requests to <code class=\"language-text\">GET /users/:userId</code> will be handled by the <code class=\"language-text\">getUser</code> instance of your application, and all requests to <code class=\"language-text\">POST /users/</code> will be handled by the <code class=\"language-text\">createUser</code> instance. For any other requests, they’ll be handled by the main <code class=\"language-text\">app</code> instance of your function.</p>\n<p>Again, none of this is required, and it’s a bit of an overweight solution; each specific endpoint will include the full application code for your other endpoints. However, it’s a good balance between speed of development by using the tools you’re used to, along with the per-endpoint granularity that serverless application patterns provide.</p>\n<h4>Local development configuration with Serverless offline plugin</h4>\n<p>When developing an application, it’s nice to rapidly iterate by developing and testing locally rather than doing a full deploy between changes. In this section, we’ll cover how to configure your environment for local development.</p>\n<p>The great thing about the <code class=\"language-text\">serverless-wsgi</code> plugin is that it includes a built-in solution for local development. To start the local server, just run <code class=\"language-text\">sls wsgi serve</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls wsgi serve\n * Running on http://localhost:5000/ <span class=\"token punctuation\">(</span>Press CTRL+C to quit<span class=\"token punctuation\">)</span>\n * Restarting with <span class=\"token function\">stat</span>\n * Debugger is active<span class=\"token operator\">!</span>\n * Debugger PIN: <span class=\"token number\">109</span>-942-480</code></pre></div>\n<p>Then navigate to your root page on <code class=\"language-text\">localhost:5000</code> in your browser:</p>\n<img width=\"985\" alt=\"Serverless WSGI Serve\" src=\"https://user-images.githubusercontent.com/6509926/32271253-07ba02e0-bec7-11e7-8ef7-4cc9e276d087.png\">\n<p>It works! If you make a change in your <code class=\"language-text\">app.py</code> file, it will be updated the next time you hit your endpoint. This rapidly improves development time.</p>\n<p>While this works easily for a stateless endpoint like “Hello World!”, it’s a little trickier for our <code class=\"language-text\">/users</code> endpoints that interact with a database.</p>\n<p>Luckily, there’s a plugin for doing local development with a local DynamoDB emulator. We’ll use the <a href=\"https://github.com/99xt/serverless-dynamodb-local\"><code class=\"language-text\">serverless-dynamodb-local</code></a> plugin for this.</p>\n<p>First, let’s install the plugin:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install --save-dev serverless-dynamodb-local</code></pre></div>\n<p>Then, let’s add the plugin to our <code class=\"language-text\">serverless.yml</code>. We’ll also add some config in the <code class=\"language-text\">custom</code> block so that it locally creates our tables defined in the <code class=\"language-text\">resources</code> block:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>python<span class=\"token punctuation\">-</span>requirements\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>wsgi\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>dynamodb<span class=\"token punctuation\">-</span>local\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">tableName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'users-table-${self:provider.stage}'</span>\n  <span class=\"token key atrule\">wsgi</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> app.app\n    <span class=\"token key atrule\">packRequirements</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">pythonRequirements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">dockerizePip</span><span class=\"token punctuation\">:</span> non<span class=\"token punctuation\">-</span>linux\n  <span class=\"token key atrule\">dynamodb</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">start</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">migrate</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></code></pre></div>\n<p>Then, run a command to install DynamoDB local:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls dynamodb <span class=\"token function\">install</span></code></pre></div>\n<p>Finally, we need to make some small changes to our application code. When instantiating our DynamoDB client, we’ll add in some special configuration if we’re in a local, offline environment.</p>\n<p>When developing locally, the <code class=\"language-text\">serverless-wsgi</code> plugin sets an environment variable of <code class=\"language-text\">IS_OFFLINE</code> to <code class=\"language-text\">true</code>, so we’ll use that to handle our config. Change the beginning of <code class=\"language-text\">app.py</code> to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># app.py</span>\n\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token keyword\">import</span> boto3\n\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask<span class=\"token punctuation\">,</span> jsonify<span class=\"token punctuation\">,</span> request\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\nUSERS_TABLE <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">[</span><span class=\"token string\">'USERS_TABLE'</span><span class=\"token punctuation\">]</span>\nIS_OFFLINE <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'IS_OFFLINE'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> IS_OFFLINE<span class=\"token punctuation\">:</span>\n    client <span class=\"token operator\">=</span> boto3<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'dynamodb'</span><span class=\"token punctuation\">,</span>\n        region_name<span class=\"token operator\">=</span><span class=\"token string\">'localhost'</span><span class=\"token punctuation\">,</span>\n        endpoint_url<span class=\"token operator\">=</span><span class=\"token string\">'http://localhost:8000'</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    client <span class=\"token operator\">=</span> boto3<span class=\"token punctuation\">.</span>client<span class=\"token punctuation\">(</span><span class=\"token string\">'dynamodb'</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> jsonify<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>environ<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> rest of application code <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>Now, our DynamoDB client is configured to use DynamoDB local if we’re running locally, or use the default options if running in Lambda.</p>\n<p>Let’s see it if works. You’ll need two different terminal windows now. In your first window, start up DynamoDB local:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls dynamodb start\nDynamodb Local Started, Visit: http://localhost:8000/shell\nServerless: DynamoDB - created table users-table-dev</code></pre></div>\n<p>In the second window, start up your local WSGI server:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sls wsgi serve\n * Running on http://localhost:5000/ <span class=\"token punctuation\">(</span>Press CTRL+C to quit<span class=\"token punctuation\">)</span>\n * Restarting with <span class=\"token function\">stat</span>\n * Debugger is active<span class=\"token operator\">!</span>\n * Debugger PIN: <span class=\"token number\">109</span>-942-480</code></pre></div>\n<p>Let’s run our <code class=\"language-text\">curl</code> command from earlier to hit our local endpoint and create a user:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -H <span class=\"token string\">\"Content-Type: application/json\"</span> -X POST http://localhost:5000/users -d <span class=\"token string\">'{\"userId\": \"alexdebrie1\", \"name\": \"Alex DeBrie\"}'</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Alex DeBrie\"</span>,\n  <span class=\"token string\">\"userId\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"alexdebrie1\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And then retrieve the user:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -H <span class=\"token string\">\"Content-Type: application/json\"</span> -X GET http://localhost:5000/users/alexdebrie1\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Alex DeBrie\"</span>,\n  <span class=\"token string\">\"userId\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"alexdebrie1\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Yep, it works just like it did on Lambda.</p>\n<p>This local setup can really speed up your workflow while still allowing you to emulate a close approximation of the Lambda environment.</p>\n<h4>Converting an existing Flask application</h4>\n<p>If you already have an existing Flask application, it’s very easy to convert to a Serverless-friendly application. Do the following steps:</p>\n<ol>\n<li>Install the <code class=\"language-text\">serverless-wsgi</code> and <code class=\"language-text\">serverless-python-requirements</code> packages — <code class=\"language-text\">npm install --save serverless-wsgi serverless-python-requirements</code></li>\n<li>\n<p>Configure your <code class=\"language-text\">serverless.yml</code>:</p>\n<p>You should have a <code class=\"language-text\">serverless.yml</code> that looks like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> serverless<span class=\"token punctuation\">-</span>flask\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>python<span class=\"token punctuation\">-</span>requirements\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>wsgi\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">wsgi</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> app.app\n    <span class=\"token key atrule\">packRequirements</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">pythonRequirements</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">dockerizePip</span><span class=\"token punctuation\">:</span> non<span class=\"token punctuation\">-</span>linux\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> python3.6\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> us<span class=\"token punctuation\">-</span>east<span class=\"token punctuation\">-</span><span class=\"token number\">1</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> wsgi.handler\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> ANY /\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'ANY {proxy+}'</span></code></pre></div>\n</li>\n</ol>\n<p>Make sure that the value for <code class=\"language-text\">app</code> under the <code class=\"language-text\">custom.wsgi</code> block is configured for your application. It should be <code class=\"language-text\">&lt;module.instance&gt;</code>, where <code class=\"language-text\">module</code> is the name of the Python file with your Flask instance and <code class=\"language-text\">instance</code> is the name of the variable with your Flask application.</p>\n<ol start=\"3\">\n<li>Deploy your function with <code class=\"language-text\">sls deploy</code>!</li>\n</ol>\n<p><strong>Note:</strong> if you use other resources (databases, credentials, etc.), you’ll need to make sure those make it into your application. Check out our other material on <a href=\"https://serverless.com/blog/serverless-secrets-api-keys/\">managing secrets &#x26; API keys with Serverless</a>.</p>\n<h4>Using the Quick Start Template</h4>\n<p>If you don’t have an existing Flask application to convert, but you want a well-structured starting point for an application, you can check out our <a href=\"https://github.com/alexdebrie/serverless-flask\">serverless-flask</a> application template.</p>\n<p>To use it, you’ll need the <a href=\"https://serverless.com/framework/docs/providers/aws/guide/quick-start/\">Serverless Framework</a> installed. You’ll also need your environment configured with <a href=\"https://serverless.com/framework/docs/providers/aws/guide/credentials/\">AWS credentials</a>.</p>\n<p>With the Framework installed, use the <code class=\"language-text\">sls install</code> command to clone the template project. Then, change into the directory and run a postsetup script to configure it as desired:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ serverless <span class=\"token function\">install</span> --url https://github.com/alexdebrie/serverless-flask --name my-flask-app\n$ <span class=\"token builtin class-name\">cd</span> my-flask-app <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> run setup</code></pre></div>\n<p>Then run <code class=\"language-text\">sls deploy</code> and hit the main web page to see your starter application:</p>\n<img width=\"992\" alt=\"Serverless Flask landing page\" src=\"https://user-images.githubusercontent.com/6509926/32280095-b690a726-bee8-11e7-9a66-f92b40b4aaba.png\">\n<p>You’re off and running! What will you build? ⚡️</p>","frontmatter":{"title":"Build a Python REST API with Serverless, Lambda, and DynamoDB","date":"November 16, 2017","description":"Deploy a Serverless REST API in minutes using the popular Flask web framework"}}},"pageContext":{"slug":"/posts/2017-11-15-flask-python-rest-api-serverless-lambda-dynamodb/","previous":{"fields":{"slug":"/posts/2017-11-14-abcs-of-iam-permissions/"},"frontmatter":{"title":"The ABCs of IAM: Managing permissions with Serverless"}},"next":{"fields":{"slug":"/posts/2017-11-20-near-cloud-crdt-kuhiro/"},"frontmatter":{"title":"Birth of the NearCloud: on CRDTs and Kuhiro"}}}}}
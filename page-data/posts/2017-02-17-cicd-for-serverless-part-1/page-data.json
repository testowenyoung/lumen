{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-02-17-cicd-for-serverless-part-1/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"40c4b1bb-d47f-5d97-a778-a48db664e4d9","excerpt":"By day, I’m a Technical Solutions Architect at Cisco where I teach Cisco’s vast ecosystem of partners to present the value of CloudCenter (formerly CliQr). It’s…","html":"<p>By day, I’m a Technical Solutions Architect at Cisco where I teach Cisco’s vast ecosystem of partners to present the value of CloudCenter (<a href=\"http://www.cisco.com/c/en/us/about/corporate-strategy-office/acquisitions/cliqr.html\">formerly CliQr</a>). It’s a Cloud Management Platform that uses abstraction on top of multiple IaaS APIs to enable a systems administrator to manage applications running on different clouds from a single pane of glass.</p>\n<p>But since March of last year, <a href=\"https://fmlnerd.com/2016/08/16/30k-page-views-for-0-21-a-serverless-story/\">I’ve been using AWS Lambda on a personal project</a>. I quickly became interested in what the good folks here at the Serverless Framework have been doing to similarly abstract details of different FaaS platforms to lower the learning curve and deployment overhead for developers.</p>\n<p>In this 2-part series I’ll demonstrate how it’s possible for emerging FaaS technology to coexist with modern programming techniques like test-driven development (TDD) and Continuous Integration/Continuous Delivery (CICD). I’ll show you how to perform automated endpoint testing using Mocha (this post) and a AWS CodePipeline CICD workflow (next post).</p>\n<p>I’m kind of a web old timer. My first web application went into production in January of 1996. It was written in CGI-BIN Perl, only worked with a specific version of Mosaic, and used <code class=\"language-text\">&lt;pre&gt;</code> tags to space the page elements because the <code class=\"language-text\">&lt;table&gt;</code> tag wasn’t part of the HTML specification yet.</p>\n<p>As a web veteran, the current state of FaaS reminds me of other technology waves in that it shows great promise, but needs to change some minds before it can experience widespread adoption.</p>\n<p>So when I met up with the Serverless Framework team in Las Vegas at their mixer during AWS re:Invent, among the things we talked about was the need for more complete examples. And how to demonstrate how this cutting edge technology can coexist with modern programming techniques like test-driven development (TDD) and Continuous Integration/Continuous Delivery (CICD).</p>\n<p><a href=\"https://github.com/serverless/examples\">The team followed through with an excellent set of examples</a> and <a href=\"https://github.com/nerdguru/serverlessTodos\">I riffed off one of them</a> to provide automated endpoint testing using Mocha (this post) and a AWS CodePipeline CICD workflow (next time).</p>\n<p><strong>At a high level, the whole thing looks like this:</strong></p>\n<p><img src=\"https://s3.amazonaws.com/analyzer.fmlnerd.com/img/ServerlessCICDmed.png\" alt=\"Serverless CICD Diagram\"></p>\n<h2>Automating API Gateway Endpoint Testing</h2>\n<p>Before the days of TDD there wasn’t always a lot of agreement on when you were done with a particular coding task. So scope creep ruled the day. To prove to a wider set of developers that FaaS is ready for prime time, then, you need to be able to demonstrate that TDD is still possible with a more loosely related set of functions working together as opposed to a more monolithic set of application logic that is the norm now. As a first step, that’s what I set out to do.</p>\n<p>Feel free to try this yourself with the <a href=\"https://github.com/nerdguru/serverlessTodos/blob/master/local.md\">Local Execution</a> instructions on my GitHub repo, but the basic set up is as follows:</p>\n<ul>\n<li>Take <a href=\"https://github.com/serverless/examples/tree/master/aws-node-rest-api-with-dynamodb\">the todos example</a> (slightly altered) to deploy a set of Lambda functions behind AWS API Gateway</li>\n<li>Use the <a href=\"https://www.npmjs.com/package/request\">Node.js simplified HTTP request client</a> to interact with API Gateway endpoints</li>\n<li>Let <a href=\"https://mochajs.org/\">Mocha</a> automate the testing of those endpoints</li>\n</ul>\n<p>What I appreciate most about the Serverless Framework is how much it lowers the learning curve on the deployment process involving multiple AWS services. <a href=\"https://github.com/nerdguru/serverlessTodos/blob/master/serverless.yml\">Take a look at the serverless.yml file I used</a> and compare that with the CloudFormation templates that get generated in your .serverless directory to see what I mean. It handles the mechanics for you nicely, allowing you to focus on adding your value.</p>\n<p>In my case, that meant writing four Mocha tests that utilize the request client to initiate transactions with the API endpoints and check both the HTTP return codes and payloads for different combinations. There’s an argument to be made for also utilizing Mocha to test the Lambda services directly in absence of API Gateway or even the business logic inside the Lambda functions independently. But for the sake of simplicity I stuck with the API endpoints.</p>\n<p>When you deploy the service, set an environment variable containing the endpoint root, and then execute those tests, you get something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> aws-rest-with-dynamodb@1.0.0 <span class=\"token builtin class-name\">test</span> /Users/petercjo/serverlessTodos\n<span class=\"token operator\">></span> mocha\n\n\n\n  Create, Delete\n    ✓ should create a new Todo, <span class=\"token operator\">&amp;</span> delete it <span class=\"token punctuation\">(</span>1938ms<span class=\"token punctuation\">)</span>\n\n  Create, List, Delete\n    ✓ should create a new Todo, list it, <span class=\"token operator\">&amp;</span> delete it <span class=\"token punctuation\">(</span>2859ms<span class=\"token punctuation\">)</span>\n\n  Create, Read, Delete\n    ✓ should create a new Todo, <span class=\"token builtin class-name\">read</span> it, <span class=\"token operator\">&amp;</span> delete it <span class=\"token punctuation\">(</span>2663ms<span class=\"token punctuation\">)</span>\n\n  Create, Update, Delete\n    ✓ should create a new Todo, update it, verify the update, <span class=\"token operator\">&amp;</span> delete it <span class=\"token punctuation\">(</span>2559ms<span class=\"token punctuation\">)</span>\n\n\n  <span class=\"token number\">4</span> passing <span class=\"token punctuation\">(</span>10s<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This enables a team of developers all working on the same Serverless Framework project to deploy the service independently and run tests locally. Should those individuals then merge their code and perform pull requests on the master branch, those changes and tests could be integrated into a CICD workflow when bound for staging or production.  Speaking of …</p>\n<h2>Next Time: CICD with AWS CodePipeline</h2>\n<p>Now that we have automated testing for our simple todos example, the next step would be to automate the whole toolchain in a CICD workflow.  In my case, I chose to do what with the newly announced AWS CodePipeline, which will look at the master branch of a repo on GitHub, download it when there has been a change and then execute a set of steps that causes the service to be deployed and tested.</p>\n<p>We’ll cover this in Part 2 coming next week.</p>","frontmatter":{"title":"CICD for Serverless Part 1 - Mocha Endpoint Testing","date":"February 17, 2017","description":"Part 1 of 2 on how to implement a CICD workflow for a Serverless project"}}},"pageContext":{"slug":"/posts/2017-02-17-cicd-for-serverless-part-1/","previous":{"fields":{"slug":"/posts/2017-02-15-writing-serverless-plugins-2/"},"frontmatter":{"title":"How To Write Your First Plugin For The Serverless Framework - Part 2"}},"next":{"fields":{"slug":"/posts/2017-02-22-cicd-for-serverless-part-2/"},"frontmatter":{"title":"CICD for Serverless Part 2 - AWS CodePipeline Integration"}}}}}
{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-01-18-framework-example-golang-lambda-support/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"44a9a37f-2236-58eb-a4b1-8a1ac5b58c99","excerpt":"Everyone, the day has come. AWS Lambda is finally. Compatible. With Golang. 🖖 Here’s how you can start using Go with the Serverless Framework RIGHT NOW and…","html":"<p>Everyone, the day has come.</p>\n<p>AWS Lambda is finally. Compatible. With Golang. 🖖</p>\n<p>Here’s how you can start using Go with the Serverless Framework RIGHT NOW and deploy Lambdas to your heart’s content.</p>\n<h4>Get Started</h4>\n<p>First things first, you’ll be needing the <a href=\"https://serverless.com/framework/docs/providers/aws/guide/quick-start/\">Serverless Framework</a> installed, and an <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/setting-up.html#setting-up-signup\">AWS account</a>.</p>\n<p>(If it’s your first time using the Serverless Framework, our <a href=\"https://serverless.com/blog/anatomy-of-a-serverless-app/#setup\">first time deployment post</a> has a quick setup guide. Takes like 5 minutes, we promise.)</p>\n<h1>Use the Go template</h1>\n<p>The Framework will configure AWS for Go on your behalf.</p>\n<p>There are a couple Go templates already included with the Framework as of v1.26—<code class=\"language-text\">aws-go</code> for a basic service with two functions, and <code class=\"language-text\">aws-go-dep</code> for the basic service using the <a href=\"https://github.com/golang/dep\"><code class=\"language-text\">dep</code></a> dependency management tool. Let’s try the <code class=\"language-text\">aws-go-dep</code> template. <strong>You will need <a href=\"https://github.com/golang/dep\"><code class=\"language-text\">dep</code></a> installed.</strong></p>\n<p>Make sure you’re in your <a href=\"https://github.com/golang/go/wiki/GOPATH\"><code class=\"language-text\">${GOPATH}/src</code></a> directory, then run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ serverless create -t aws-go-dep -p myservice</code></pre></div>\n<p>Change into your new service directory and compile the function:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> myservice\n$ <span class=\"token function\">make</span></code></pre></div>\n<p>The default command in the included Makefile will gather your dependencies and build the proper binaries for your functions.  You can deploy now:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ serverless deploy\nServerless: Packaging service<span class=\"token punctuation\">..</span>.\nServerless: Excluding development dependencies<span class=\"token punctuation\">..</span>.\nServerless: Creating Stack<span class=\"token punctuation\">..</span>.\nServerless: Checking Stack create progress<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.\nServerless: Stack create finished<span class=\"token punctuation\">..</span>.\nServerless: Uploading CloudFormation <span class=\"token function\">file</span> to S3<span class=\"token punctuation\">..</span>.\nServerless: Uploading artifacts<span class=\"token punctuation\">..</span>.\nServerless: Uploading <span class=\"token function\">service</span> .zip <span class=\"token function\">file</span> to S3 <span class=\"token punctuation\">(</span><span class=\"token number\">4.43</span> MB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">..</span>.\nServerless: Validating template<span class=\"token punctuation\">..</span>.\nServerless: Updating Stack<span class=\"token punctuation\">..</span>.\nServerless: Checking Stack update progress<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\nServerless: Stack update finished<span class=\"token punctuation\">..</span>.\nService Information\nservice: myservice\nstage: dev\nregion: us-east-1\nstack: myservice-dev\napi keys:\n  None\nendpoints:\n  None\nfunctions:\n  hello: myservice-dev-hello\n  world: myservice-dev-world</code></pre></div>\n<p>Finally, invoke your function:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ serverless invoke -f hello\n<span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"message\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Go Serverless v1.0! Your function executed successfully!\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nice!</p>\n<h4>Building a Web API with Go + Lambda</h4>\n<p>The basic example is nice, but let’s try something a little more useful.</p>\n<p>Lambda + API Gateway is awesome for quickly spinning up endpoints to retrieve or ingest data. So we’re going to build an example endpoint.</p>\n<p>For our friends coming from interpreted, dynamically-typed languages (looking at you, Pythonistas &#x26; Javascript-lovers!), the Golang approach is a little different. You have to be a more intentional about the input &#x26; output of your functions. Don’t worry, we’ll take it slow. 😉</p>\n<p>We’re going to make an HTTP endpoint that accepts a POST request at the path <code class=\"language-text\">/echo</code>, logs the POST body, and echoes the body back to the client.</p>\n<p>First, let’s fix our <code class=\"language-text\">serverless.yml</code> to attach an HTTP event:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> myservice\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> go1.x\n\n<span class=\"token key atrule\">package</span><span class=\"token punctuation\">:</span>\n <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span>\n   <span class=\"token punctuation\">-</span> ./<span class=\"token important\">**</span>\n <span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span>\n   <span class=\"token punctuation\">-</span> ./bin/<span class=\"token important\">**</span>\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> bin/hello\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> hello\n          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> post</code></pre></div>\n<p>We’ll need to update our function in <code class=\"language-text\">hello/main.go</code>.</p>\n<p>Remember, Golang is a compiled, statically-typed language, so we need to define the <code class=\"language-text\">event</code> object that’s coming into our function. Fortunately, AWS has <a href=\"https://github.com/aws/aws-lambda-go/tree/master/events\">provided a number of event types</a> in a Github repo. 💥 We can just use those.</p>\n<p>Update your <code class=\"language-text\">hello/main.go</code> to have the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\"># hello/main.go\n\npackage main\n\nimport (\n    &quot;fmt&quot;\n\n    &quot;github.com/aws/aws-lambda-go/events&quot;\n    &quot;github.com/aws/aws-lambda-go/lambda&quot;\n)\n\n\nfunc Handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\tfmt.Println(&quot;Received body: &quot;, request.Body)\n\n\treturn events.APIGatewayProxyResponse{Body: request.Body, StatusCode: 200}, nil\n}\n\nfunc main() {\n\tlambda.Start(Handler)\n}</code></pre></div>\n<p>Our <code class=\"language-text\">Handler()</code> function now takes an <code class=\"language-text\">APIGatewayProxyRequest</code> object and returns a <code class=\"language-text\">APIGatewayProxyResponse</code> object. In our function code, we’re printing the request body, then returning a response with the request body.</p>\n<p>Recompile &#x26; deploy again:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\ndep ensure\n<span class=\"token function\">env</span> <span class=\"token assign-left variable\">GOOS</span><span class=\"token operator\">=</span>linux go build -ldflags<span class=\"token operator\">=</span><span class=\"token string\">\"-s -w\"</span> -o bin/hello hello/main.go\n<span class=\"token function\">env</span> <span class=\"token assign-left variable\">GOOS</span><span class=\"token operator\">=</span>linux go build -ldflags<span class=\"token operator\">=</span><span class=\"token string\">\"-s -w\"</span> -o bin/world world/main.go\n$ sls deploy\n\nServerless: Packaging service<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span>. <span class=\"token operator\">&lt;</span>snip<span class=\"token operator\">></span> <span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.\nServerless: Stack update finished<span class=\"token punctuation\">..</span>.\nService Information\nservice: myservice\nstage: dev\nregion: us-east-1\nstack: myservice-dev\napi keys:\n  None\nendpoints:\n  POST - https://24k8pql1le.execute-api.us-east-1.amazonaws.com/dev/hello\nfunctions:\n  hello: myservice-dev-hello\n  world: myservice-dev-world</code></pre></div>\n<p>Notice that you now have an <code class=\"language-text\">endpoint</code> listed in your Service Information output.</p>\n<p>Let’s use <code class=\"language-text\">curl</code> to hit your endpoint and get a response:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -X POST https://24k8pql1le.execute-api.us-east-1.amazonaws.com/dev/hello -d <span class=\"token string\">'Hello, world!'</span>\nHello, world<span class=\"token operator\">!</span></code></pre></div>\n<p>Great! This should get you started on a web API. Feel free to check out the <a href=\"https://github.com/aws/aws-lambda-go/tree/master/events\">other Lambda events in Golang</a>.</p>\n<h4>Why use Go for your Lambdas?</h4>\n<p>Golang support for Lambda has been one of the most anticipated releases. The crowd at re:Invent was ecstatic when Werner announced Golang support was coming soon.</p>\n<p>Why do people care about Golang so much? Simple: the combination of safety + speed.</p>\n<p>As we saw above, Golang is a compiled, statically-typed language. This can help catch simple errors and maintain correctness as your application grows. This safety is really useful for production environments.</p>\n<p>However, we’ve had Java and C# support in Lambda for years. These are both compiled, static languages as well. What’s the difference?</p>\n<p>Java and C# both have notoriously slow cold-start time, in terms of multiple seconds. <strong>With Go, the cold-start time is much lower.</strong> In my haphazard testing, I was seeing cold-starts in the 200-400ms range, which is much closer to Python and Javascript.</p>\n<p>Speed <em>and</em> safety. A pretty nice combo.</p>\n<h4>A Gateway to all the runtimes</h4>\n<p>There’s one final note about the Golang implementation on Lambda that’s really interesting.</p>\n<p>The <code class=\"language-text\">main()</code> function which is the entrypoint to our Golang binary <em>isn’t</em> our Lambda handler function. It’s a little RPC server that wraps our handler function:</p>\n<div class=\"gatsby-highlight\" data-language=\"golang\"><pre class=\"language-golang\"><code class=\"language-golang\">func main() {\n\tlambda.Start(Handler)\n}</code></pre></div>\n<p><a href=\"https://github.com/aws/aws-lambda-go/blob/master/lambda/entry.go#L37-L49\">Under the covers</a>, it looks like Lambda starts up your executable on a coldstart. The executable listens on a given port, receives input via JSON, and sends a response via JSON.</p>\n<p>This opens up a lot of possibilities to bring other runtimes into Lambda. You just need to pull in an executable that implements the desired RPC interface.</p>\n<p><a href=\"https://twitter.com/ewindisch\">Erica Windisch</a>, CTO at IOpipes, is already making progress on this by pulling NodeJS 8 into Lambda:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">NodeJS 8 running natively on AWS Lambda... 🛠️⚙️🏗️</p>&mdash; Erica Windisch (@ewindisch) <a href=\"https://twitter.com/ewindisch/status/953303103289417728?ref_src=twsrc%5Etfw\">January 16, 2018</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>This is really exciting; can’t wait to see what the serverless community builds!</p>","frontmatter":{"title":"Serverless Framework example for Golang and Lambda","date":"January 18, 2018","description":"AWS Lambda Golang support is one of the most exciting announcements of 2018. Here's a quick template for using Go with the Serverless Framework!"}}},"pageContext":{"slug":"/posts/2018-01-18-framework-example-golang-lambda-support/","previous":{"fields":{"slug":"/posts/2018-01-16-cors-api-gateway-survival-guide/"},"frontmatter":{"title":"Your CORS and API Gateway survival guide"}},"next":{"fields":{"slug":"/posts/2018-01-22-most-popular-framework-plugins/"},"frontmatter":{"title":"Where to start: the most popular Framework plugins"}}}}}
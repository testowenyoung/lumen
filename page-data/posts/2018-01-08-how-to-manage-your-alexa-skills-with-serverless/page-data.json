{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2018-01-08-how-to-manage-your-alexa-skills-with-serverless/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"3ce4e883-c9ab-5207-9348-002d6a09c9c3","excerpt":"Introduction Masashi here, creator of the Serverless Alexa plug-in. Serverless and IoT go hand in hand, and it’s easy to use the Serverless Framework to develop…","html":"<h1>Introduction</h1>\n<p>Masashi here, creator of the Serverless Alexa plug-in.</p>\n<p>Serverless and IoT go hand in hand, and it’s easy to use the <a href=\"https://serverless.com/framework/\">Serverless Framework</a> to develop AWS Lambda functions for Alexa Skills.</p>\n<p>Unfortunately, you can’t control Alexa Skills with the Framework, which was a bummer to me because I found the Alexa Skills Kit webapp and <a href=\"https://www.npmjs.com/package/ask-cli\">ask-cli</a> didn’t have the simplicity I’d come to love with the Serverless Framework.</p>\n<p>But! Luckily, the Serverless Framework has a great plugin system. I decided to solve this little problem with the power of the community!</p>\n<h1>Overview</h1>\n<p>The <a href=\"https://github.com/marcy-terui/serverless-alexa-skills\">Serverless Alexa Skills Plugin</a> lets you integrate Alexa Skills into the Serverless Framework. We can now control the manifest and interaction model of Alexa Skills using <code class=\"language-text\">sls</code> command and <code class=\"language-text\">serverless.yml</code>!</p>\n<h1>How to use it</h1>\n<h2>Installation</h2>\n<p>The plugin is hosted by npm:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install -g serverless\n$ sls plugin install -n serverless-alexa-skills</code></pre></div>\n<h2>Get your credentials</h2>\n<p><code class=\"language-text\">Login with Amazon</code> is an OAuth2.0 single sign-on (SSO) system using your Amazon.com account.</p>\n<p>To get your credentials, log in to the <a href=\"https://developer.amazon.com/\">Amazon Developer Console</a>, go to <code class=\"language-text\">Login with Amazon</code> from <code class=\"language-text\">APPS &amp; SERVICES</code>, and then <code class=\"language-text\">Create a New Security Profile</code>:</p>\n<p><img src=\"https://raw.githubusercontent.com/marcy-terui/serverless-alexa-skills/master/images/developer_console.png\"></p>\n<p>For following columns, you can enter whatever you like:</p>\n<p><img src=\"https://raw.githubusercontent.com/marcy-terui/serverless-alexa-skills/master/images/create_security_profile.png\"></p>\n<p>Go to the <code class=\"language-text\">Web Settings</code> of the new security profile:</p>\n<p><img src=\"https://raw.githubusercontent.com/marcy-terui/serverless-alexa-skills/master/images/security_profile_menu.png\"></p>\n<p><code class=\"language-text\">Allowed Origins</code> can be empty. Enter <code class=\"language-text\">http://localhost:3000</code> in<code class=\"language-text\">Allowed Return URLs</code>. This port number can be changed with <code class=\"language-text\">serverless.yml</code>, so if you want to change this, please do so:</p>\n<p><img src=\"https://raw.githubusercontent.com/marcy-terui/serverless-alexa-skills/master/images/web_setting.png\"></p>\n<p>Remember your <code class=\"language-text\">Client ID</code> and <code class=\"language-text\">Client Secret</code> of the new security profile, as well as <code class=\"language-text\">Vendor ID</code>. You can check your <code class=\"language-text\">Vendor ID</code> at <a href=\"https://developer.amazon.com/mycid.html\">here</a>.</p>\n<p>You only need to do this process once. You can continue to use the same credentials as long as you use the same account.</p>\n<p><strong>The troublesome browser click-work is over!</strong> 👏 Let’s move on to the <code class=\"language-text\">sls</code> command.</p>\n<h2>Put your credentials into the Framework</h2>\n<p>Write the <code class=\"language-text\">Client ID</code>,<code class=\"language-text\">Client Secret</code>, and <code class=\"language-text\">Vendor ID</code> to <code class=\"language-text\">serverless.yml</code>. It is good to use environment variables as it is shown below.</p>\n<p>Change the port number with <code class=\"language-text\">Allowed Return URLs</code> of <code class=\"language-text\">Login with Amazon</code>, add <code class=\"language-text\">localServerPort</code>, and write the port number:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs 6.10\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>alexa<span class=\"token punctuation\">-</span>skills\n\n<span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">alexa</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">vendorId</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>AMAZON_VENDOR_ID<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">clientId</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>AMAZON_CLIENT_ID<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">clientSecret</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>AMAZON_CLIENT_SECRET<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then, execute the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sls alexa auth</code></pre></div>\n<p>This command opens the login page of Amazon.com in your browser. You will be redirected to <code class=\"language-text\">localhost:3000</code> after authenticating. If the authentication is successful, you’ll see the message: <code class=\"language-text\">&quot;Thank you for using Serverless Alexa Skills Plugin!!&quot;</code>.</p>\n<p><strong>note:</strong> The security token expires in 1 hour. Therefore, if an authentication error occurs, please re-execute the command. I’m planning to implement automatic token refreshing in the future.</p>\n<h1>Create your skill</h1>\n<p>Let’s make a skill!</p>\n<p>To start, execute the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sls alexa create --name $YOUR_SKILL_NAME --locale $YOUR_SKILL_LOCALE --type $YOUR_SKILL_TYPE</code></pre></div>\n<p>These are descriptions of the options:</p>\n<ul>\n<li>name: Name of the skill</li>\n<li>locale: Locale of the skill (<code class=\"language-text\">en-US</code> for English, <code class=\"language-text\">ja-JP</code> for Japanese and so on)</li>\n<li>type: Type of the skill (<code class=\"language-text\">custom</code> or <code class=\"language-text\">smartHome</code> or <code class=\"language-text\">video</code>)</li>\n</ul>\n<h2>Update the skill manifest</h2>\n<p>A manifest is initially set for the skill. You can check the manifest with the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sls alexa manifests\n\nServerless:\n------------------\n[Skill ID] amzn1.ask.skill.xxxxxx-xxxxxx-xxxxx\n[Stage] development\n[Skill Manifest]\nmanifest:\n  publishingInformation:\n    locales:\n      ja-JP:\n        name: sample\n  apis:\n    custom: {}\n  manifestVersion: &#39;1.0&#39;</code></pre></div>\n<p>Copy <code class=\"language-text\">[Skill ID]</code> and <code class=\"language-text\">[Skill Manifest]</code> and paste it to <code class=\"language-text\">serverless.yml</code> as below.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  alexa<span class=\"token punctuation\">:</span>\n    vendorId<span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>AMAZON_VENDOR_ID<span class=\"token punctuation\">}</span>\n    clientId<span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>AMAZON_CLIENT_ID<span class=\"token punctuation\">}</span>\n    clientSecret<span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>AMAZON_CLIENT_SECRET<span class=\"token punctuation\">}</span>\n    skills<span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>ALEXA_SKILL_ID<span class=\"token punctuation\">}</span>\n        manifest<span class=\"token punctuation\">:</span>\n          publishingInformation<span class=\"token punctuation\">:</span>\n            locales<span class=\"token punctuation\">:</span>\n              en<span class=\"token punctuation\">-</span><span class=\"token key atrule\">US</span><span class=\"token punctuation\">:</span>\n                name<span class=\"token punctuation\">:</span> sample\n          <span class=\"token key atrule\">apis</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">endpoint</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> arn<span class=\"token punctuation\">:</span>aws<span class=\"token punctuation\">:</span>lambda<span class=\"token punctuation\">:</span>region<span class=\"token punctuation\">:</span>account<span class=\"token punctuation\">-</span>id<span class=\"token punctuation\">:</span>function<span class=\"token punctuation\">:</span>function<span class=\"token punctuation\">-</span>name\n          manifestVersion<span class=\"token punctuation\">:</span> <span class=\"token string\">'1.0'</span></code></pre></div>\n<p>Execute the following command to update the manifest after updating your <code class=\"language-text\">serverless.yml</code> (or you can use the <code class=\"language-text\">--dryRun</code> option to check the difference between the local setting and the remote setting without updating):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sls alexa update</code></pre></div>\n<p>You can see the format of the manifest <a href=\"https://developer.amazon.com/docs/smapi/skill-manifest.html#sample-skill-manifests\">here</a>.</p>\n<h2>Building the interaction model</h2>\n<p>The skill does not have an interaction model at first, so you’ll need to write an interaction model definition to <code class=\"language-text\">serverless.yml</code>.</p>\n<p>Like this!</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">alexa</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">vendorId</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>AMAZON_VENDOR_ID<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">clientId</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>AMAZON_CLIENT_ID<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">clientSecret</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>AMAZON_CLIENT_SECRET<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">skills</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>env<span class=\"token punctuation\">:</span>ALEXA_SKILL_ID<span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">manifest</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">publishingInformation</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">locales</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">en-US</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> sample\n          <span class=\"token key atrule\">apis</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n          <span class=\"token key atrule\">manifestVersion</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1.0'</span>\n        <span class=\"token key atrule\">models</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">en-US</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">interactionModel</span><span class=\"token punctuation\">:</span>\n              <span class=\"token key atrule\">languageModel</span><span class=\"token punctuation\">:</span>\n                <span class=\"token key atrule\">invocationName</span><span class=\"token punctuation\">:</span> PPAP\n                <span class=\"token key atrule\">intents</span><span class=\"token punctuation\">:</span>\n                  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> PineAppleIntent\n                    <span class=\"token key atrule\">slots</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Fisrt\n                      <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> AMAZON.Food\n                    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Second\n                      <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> AMAZON.Food\n                    <span class=\"token key atrule\">samples</span><span class=\"token punctuation\">:</span>\n                     <span class=\"token punctuation\">-</span> <span class=\"token string\">'I have {First} and {Second}'</span></code></pre></div>\n<p>You can see the format of the interaction model <a href=\"https://developer.amazon.com/docs/custom-skills/custom-interaction-model-reference.html\">here</a>.</p>\n<p>Execute the following command to build the model after updating your <code class=\"language-text\">serverless.yml</code> (and you can also use the <code class=\"language-text\">--dryRun</code> option with this command):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sls alexa build</code></pre></div>\n<p>Then, you can check the model like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ sls alexa models\n\nServerless:\n-------------------\n[Skill ID] amzn1.ask.skill.xxxx-xxxx-xxxxx\n[Locale] ja-JP\n[Interaction Model]\ninteractionModel:\n  languageModel:\n    invocationName: ppap\n    intents:\n      - name: PineAppleIntent\n        slots:\n        - name: First\n          type: AMAZON.Food\n        - name: Second\n          type: AMAZON.Food\n        samples:\n         - I have {First} and {Second}</code></pre></div>\n<h1>That’s it!</h1>\n<p>There are a few more steps needed in order to completely publish skills, so I’m planning to do further integrations with the Alexa Skills Kit in the future. It’s still pretty great to be able to integrate manifests and models, since we update those many times as we develop. All the better if we can manage them with the source code of our Lambda functions!</p>\n<h1>Summary</h1>\n<p>Now, we can completely manage our Lambda Functions and Alexa Skills with Serverless Framework + Serverless Alexa Skills Plugin!</p>\n<p>If you have any comments or feedback, please create an <a href=\"https://github.com/marcy-terui/serverless-alexa-skills/issues\">issue</a> or send a pull request. I always welcome them 🍻</p>","frontmatter":{"title":"How To Manage Your Alexa Skills With Serverless","date":"January 08, 2018","description":"How to manage Alexa Skills and Lambda functions with Serverless Framework + Alexa Skills Plugin"}}},"pageContext":{"slug":"/posts/2018-01-08-how-to-manage-your-alexa-skills-with-serverless/","previous":{"fields":{"slug":"/posts/2018-01-03-serverless-github-webhook-slack/"},"frontmatter":{"title":"Build a Github webhook handler with Serverless & AWS Lambda"}},"next":{"fields":{"slug":"/posts/2018-01-09-from-chef-to-serverless-developer-in-4-years/"},"frontmatter":{"title":"From chef to Serverless developer in 4 years"}}}}}
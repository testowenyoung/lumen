{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-01-04-writing-serverless-plugins/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"0580d7be-e474-5fc8-b8de-a4c8f770bc7e","excerpt":"Hi, I’m Anna Doubkova, a software engineer at Red Badger in London. If you’re reading this post, you probably know some basics of the Serverless Framework, like…","html":"<p>Hi, I’m <a href=\"https://github.com/lithin\">Anna Doubkova</a>, a software engineer at <a href=\"https://red-badger.com/\">Red Badger</a> in London. If you’re reading this post, you probably know some basics of <strong>the Serverless Framework</strong>, like deploying Lambdas and creating API endpoints. But maybe you’ve hit a block where you find doing something with the framework is either difficult, impossible, or simply too repetitive.</p>\n<p><strong>You can ease your pain by using plugins.</strong> Some are already built for the most common problems (check them out in the official <a href=\"https://github.com/serverless/plugins\">Serverless Plugins Github repo</a>), but there are always some project-specific issues that plugins can help you resolve. Fortunately, writing a plugin for the Serverless Framework is easier than you might think.</p>\n<p>In this tutorial, <strong>you’ll learn by examples how to write your own plugins.</strong> We’ll start from very simple examples and build upon them to get all the way to writing useful plugins that could help you with your everyday deployments.</p>\n<p><img src=\"https://cloud.githubusercontent.com/assets/20538501/21665241/0d20c94c-d2b1-11e6-8d46-7615f47aa481.png\" alt=\"writing plugins for 1\"></p>\n<h2>Create Your First Plugin</h2>\n<p>The Serverless Framework is an incredibly well-built open source platform. It’s nearly indefinitely extensible, and allows you to add new features with surprising ease. <strong>Let’s see how you can add a plugin in the simplest way possible.</strong></p>\n<p>Somewhere in a new directory run:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">serverless create --template plugin</code></pre></div>\n<p>This command will create an <code class=\"language-text\">index.js</code>. When you open this file, you’ll see a class with a constructor and a few simple functions. Let’s have a look at it step by step.</p>\n<h3>Plugin as a Class</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerlessPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverless <span class=\"token operator\">=</span> serverless<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> options<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Every serverless plugin is a class.</strong> This class gets instantiated with a <code class=\"language-text\">serverless</code> object and a bunch of <code class=\"language-text\">options</code>. We’ll get to them in more detail in a little while, but for now it’s enough to say that these will help you <em>do</em> things in your plugin.</p>\n<h3>Define Your Commands</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerlessPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      welcome<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        usage<span class=\"token operator\">:</span> <span class=\"token string\">'Helps you start your first Serverless plugin'</span><span class=\"token punctuation\">,</span>\n        lifecycleEvents<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// ...</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The next thing to notice in the constructor is the <strong>definition of commands</strong> that your plugin introduces. In the boilerplate we initialised using the Serverless CLI helper, command <code class=\"language-text\">serverless welcome</code> is added.</p>\n<h4>Usage - or Help</h4>\n<p>In the <code class=\"language-text\">usage</code> section, you can specify <strong>a hint how the command should be used.</strong> This hint will appear when you run <code class=\"language-text\">serverless --help</code> in the list of commands and their descriptions.</p>\n<h4>Lifecycle Events</h4>\n<p>The crucial bit in any command is the <code class=\"language-text\">lifecycleEvents</code> array. <strong>Lifecycle events allow you to define the steps that are most likely to be taken while executing the command.</strong> For example, these are the lifecycle events for <code class=\"language-text\">serverless deploy</code> command:</p>\n<ul>\n<li>cleanup</li>\n<li>initialize</li>\n<li>setupProviderConfiguration</li>\n<li>createDeploymentArtifacts</li>\n<li>compileFunctions</li>\n<li>compileEvents</li>\n<li>deploy</li>\n</ul>\n<p>From <code class=\"language-text\">cleanup</code> to <code class=\"language-text\">deploy</code>, we have a list of tasks we should fulfill on our way to deploying a service. We don’t write any implementation yet, though. <strong>We’re only describing the process</strong> in a very general way that doesn’t include any implementation details.</p>\n<p>The advantage of this approach is that it doesn’t tie us into one way of handling deployment (or executing any other command), which in turn helps us avoid vendor lock-in.</p>\n<p>As such, you can <strong>see the command definition as a guideline</strong> that you can use later on to write your code. This makes for more readable, <strong>self-documented code.</strong></p>\n<h4>Options - or Flags</h4>\n<p>You might notice that in the plugin template we also have the <code class=\"language-text\">options</code> section alongside <code class=\"language-text\">usage</code> and <code class=\"language-text\">lifecycleEvents</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  welcome<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    usage<span class=\"token operator\">:</span> <span class=\"token string\">'Helps you start your first Serverless plugin'</span><span class=\"token punctuation\">,</span>\n    lifecycleEvents<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      message<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        usage<span class=\"token operator\">:</span>\n          <span class=\"token string\">'Specify the message you want to deploy '</span>\n          <span class=\"token operator\">+</span> <span class=\"token string\">'(e.g. \"--message \\'My Message\\'\" or \"-m \\'My Message\\'\")'</span><span class=\"token punctuation\">,</span>\n        required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        shortcut<span class=\"token operator\">:</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">options</code> section can be used to <strong>describe which flags can be used in CLI with your command.</strong> In this definition, the <code class=\"language-text\">--message</code> option is required, and has a shortcut <code class=\"language-text\">-m</code> so that you can equally write <code class=\"language-text\">serverless welcome --message &quot;Hello!&quot;</code> and <code class=\"language-text\">serverless welcome --m &quot;Hello!&quot;</code>.</p>\n<p>As with the command itself, we have a <code class=\"language-text\">usage</code> description which appears when asking for help in the CLI <code class=\"language-text\">serverless welcome --help</code>.</p>\n<h4>Requirements for Defining a Command</h4>\n<p>The snippet discussed above is defining lifecycle events, help description, and a flag. For the flag, we have again a help description section, information whether the flag is required and a flag shortcut. As you could guess, <strong>not all of them are required.</strong> A very minimalistic approach would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  welcome<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    lifecycleEvents<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      message<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will work in a very similar way to the definition above. However, it won’t provide you with automatic checking that the required option is passed to the command, or any help information.</p>\n<p>From this perspective, <strong>I’d suggest spending the time with writing up <code class=\"language-text\">usage</code>, requirements and shortcuts.</strong> It will make it significantly easier for the users of your plugin to figure out how to actually use it.</p>\n<h3>Hook Into Events</h3>\n<p>Defining the commands and their lifecycle events is useful to describe what the plugin does. <strong>Hooks describe <em>how</em> the plugin does it.</strong></p>\n<p>You can find them right under commands in the constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerlessPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">serverless<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hooks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">'before:welcome:hello'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">beforeWelcome</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'welcome:hello'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">welcomeUser</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'welcome:world'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">displayHelloMessage</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">'after:welcome:world'</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">afterHelloWorld</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Hooks help us define the implementation of each step.</strong> In the code above, you can discern the command name <code class=\"language-text\">welcome</code> and the two lifecycle events we defined for it: <code class=\"language-text\">hello</code> and <code class=\"language-text\">world</code>.</p>\n<p>Hook <code class=\"language-text\">welcome:hello</code> defines what to do at step <code class=\"language-text\">hello</code> of command <code class=\"language-text\">welcome</code>; <code class=\"language-text\">before:welcome:hello</code> describes what to do before the first step. Similarly, <code class=\"language-text\">after:welcome:world</code> defines what to do after the last step.</p>\n<p>This gives us a very fine-grained control over definition of <strong>what the command does at each step, and enter specific actions before and after each step.</strong></p>\n<p>Remember you don’t have to define every step. Maybe in your particular implementation, you only care about <code class=\"language-text\">world</code> and not <code class=\"language-text\">hello</code>, and that’s absolutely fine.</p>\n<p>Later on someone else can come with their plugin and define their own implementation of the <code class=\"language-text\">welcome</code> plugin based on the steps you specified in the command. It’s an open-ended world, allowing (nearly) endless extensions.</p>\n<h3>Implementation</h3>\n<p>After having defined the command, its lifecycle events and how we hook into them, <strong>all that’s left is the actual implementation.</strong> The details are obviously specific to the plugin you’re writing, which platform you’re targeting it at, etc.</p>\n<p>In the template, we’re only logging out greetings and the message we’ve passed it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerlessPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">beforeWelcome</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverless<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from Serverless!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">welcomeUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverless<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Your message:'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">displayHelloMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverless<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>message<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">afterHelloWorld</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverless<span class=\"token punctuation\">.</span>cli<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Please come again!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That, however, <em>might not be quite enough</em> in a real world project.</p>\n<p>You’ll learn <strong>how to write implementations</strong> of plugins, what the <strong>serverless object</strong> is all about, and how you can approach writing plugins in <strong>multiple ways</strong> - in <a href=\"https://serverless.com/blog/writing-serverless-plugins-2/\">How To Write Your First Serverless Plugin - Part 2</a>.</p>","frontmatter":{"title":"How To Write Your First Plugin For The Serverless Framework - Part 1","date":"January 04, 2017","description":"Learn the basics of creating a Serverless plugin to extend the frameworks functionality"}}},"pageContext":{"slug":"/posts/2017-01-04-writing-serverless-plugins/","previous":{"fields":{"slug":"/posts/2016-12-20-serverless-wordpress-hosting-with-shifter/"},"frontmatter":{"title":"How Shifter Introduced Serverless Hosting to WordPress Using AWS, DynamoDB & the Serverless Framework"}},"next":{"fields":{"slug":"/posts/2017-01-05-serverless-v1.5.0/"},"frontmatter":{"title":"IoT event support, Cognito user pool authorizer & install service with a name in Serverless Framework v1.5"}}}}}
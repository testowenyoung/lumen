{"componentChunkName":"component---src-templates-blog-post-js","path":"/posts/2017-10-20-google-cloud-functions-application/","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Starter Blog"}},"markdownRemark":{"id":"7ad193f1-3b2e-56d2-a7d1-00a1f1db77eb","excerpt":"One of the great things about the Serverless Framework is that it can be used with multiple providers. We’re up to seven (!) different providers with more on…","html":"<p>One of the great things about the Serverless Framework is that it can be used with multiple providers. We’re up to <a href=\"https://serverless.com/framework/docs/providers/\">seven (!) different providers</a> with more on the way.</p>\n<p>Today, I’m going to explore creating a project with <a href=\"https://cloud.google.com/functions/\">Google Cloud Functions</a>. Google has some great surrounding services in their cloud platform, so I’m excited to see the future of how they integrate their Serverless offerings.</p>\n<p>In this post, we’ll deploy a simple HTTP endpoint to GCF to understand the development model. Then, we’ll take it up a notch by using the Google Vision API to inspect images that we pass in. Finally, I’ll cover what I’m excited about with Google Cloud Functions and what’s needed in the future.</p>\n<p>Let’s dive in!</p>\n<h1>Getting started with a Google Cloud account</h1>\n<p>Before we go anywhere, we’ll need to get our account and credentials set up. If you’ve already done this, you can skip to <a href=\"#deploying-a-simple-function\">Deploying a Simple Function</a>.</p>\n<p>First, you’ll need to sign up for a <a href=\"https://console.cloud.google.com/billing/create\">Google Cloud Billing Account</a>. Follow the prompts, including entering your billing information.</p>\n<img width=\"1129\" alt=\"GCP Billing Account\" src=\"https://user-images.githubusercontent.com/6509926/31801783-f94e10c2-b50f-11e7-8845-c12c5146d420.png\">\n<p>Next, you’ll need to <a href=\"https://console.cloud.google.com/projectcreate\">create a new project</a>. Make sure you use the Billing Account created in the previous step as your Billing Account for this project. Also, take note of the Project Id which is listed on this screen.</p>\n<img width=\"1092\" alt=\"GCP Create Project\" src=\"https://user-images.githubusercontent.com/6509926/31803620-6848b108-b51a-11e7-9cfb-ab6e1c744d3d.png\">\n<p>Once you have your project, you’ll need to enable the required APIs. Navigate to the <a href=\"https://console.cloud.google.com/apis/dashboard\">API Dashboard</a>, and click the link to <strong>Enable APIs and Services</strong>. </p>\n<img width=\"1075\" alt=\"Enable APIs\" src=\"https://user-images.githubusercontent.com/6509926/31801835-4cb7f994-b510-11e7-82c4-dda75438b065.png\">\n<p>Search for “Google Cloud Functions”, and click on the Google Cloud Functions API. Click Enable to enable it for your project. Then, do the same for the “Google Cloud Deployment Manager” API.</p>\n<p>Last step, we need to grab some credentials. Go to the <a href=\"https://console.cloud.google.com/apis/credentials\">Credentials page</a> in the API Dashboard. Click the “Create credentials” button, and choose the “Service Account Key” option. </p>\n<img width=\"1090\" alt=\"GCP Create Credentials\" src=\"https://user-images.githubusercontent.com/6509926/31801859-6eb8b402-b510-11e7-91d0-df08fd59b9d6.png\">\n<p>When creating a service account key, choose to create a “New service account”. Give it an account name. In the <em>Role</em> selector, choose “Project”, then “Owner”. This gives you full access in your project. It’s more than you should use for production, but it will be easier for the quickstart. Finally, choose a JSON key type, then hit <strong>Create</strong> to download the credentials to your machine.</p>\n<img width=\"1089\" alt=\"GCP Create Service account key\" src=\"https://user-images.githubusercontent.com/6509926/31801897-a7b4ed16-b510-11e7-872d-46b6583bc1df.png\">\n<p>Once the credentials are on your machine, move them to <code class=\"language-text\">~/.gcloud/keyfile.json</code>. You’ll need to refer to this path in your Serverless service.</p>\n<h1>Deploying a Simple Function</h1>\n<p>At this point, you should have a Google Cloud Platform credentials file located at <code class=\"language-text\">~/.gcloud/keyfile.json</code> for a service account that has enabled the Google Cloud Functions API and the Google Cloud Deployment Manager API. You should also have a Project Id. If you don’t have either of these, read the previous section.</p>\n<p>Now, let’s deploy a simple function to Google Cloud Functions. First, make sure you have the <a href=\"https://serverless.com/framework/docs/getting-started/\">Serverless Framework</a> installed:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g serverless</code></pre></div>\n<p>Then, let’s create a Serverless service using the Google Cloud Functions template, then change into that directory and install dependencies:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ serverless create --template google-nodejs -p test-project\n<span class=\"token punctuation\">..</span>. log output <span class=\"token punctuation\">..</span>.\n\n$ <span class=\"token builtin class-name\">cd</span> test-project <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token punctuation\">..</span>. log output <span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>Now, open up the <code class=\"language-text\">index.js</code> file. You’ll see two functions that are exported <code class=\"language-text\">http</code> and <code class=\"language-text\">event</code>. These represent the two types of triggers for Google Cloud Functions. An HTTP trigger is one triggered via an HTTP request to a particular URL, while an event trigger is one triggered from the various event source (Google Pub/Sub, Google Storage, or others). You can check the docs for <a href=\"https://cloud.google.com/functions/docs/concepts/events-triggers\">additional information on the trigger types</a>.</p>\n<p>For now, we’re just going to use the HTTP trigger. Remove the <code class=\"language-text\">event</code> function so your <code class=\"language-text\">index.js</code> looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">http</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The HTTP function signature is very similar to an <a href=\"https://expressjs.com/\">Express.js</a> handler — there’s a <code class=\"language-text\">request</code> object with information about the request, and a <code class=\"language-text\">response</code> object that you’ll use to respond. For now, our function will just return `Hello World!’ with a 200 status code.</p>\n<p>We can cut down some of the configuration in the <code class=\"language-text\">serverless.yml</code> file since we’re doing a simple function. Edit your <code class=\"language-text\">serverless.yml</code> so it looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># serverless.yml</span>\n\n<span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> test<span class=\"token punctuation\">-</span>project\n\n<span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> google\n  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs\n  <span class=\"token key atrule\">project</span><span class=\"token punctuation\">:</span> cloud<span class=\"token punctuation\">-</span>functions<span class=\"token punctuation\">-</span>demo<span class=\"token punctuation\">-</span><span class=\"token number\">183501</span>\n  <span class=\"token key atrule\">credentials</span><span class=\"token punctuation\">:</span> ~/.gcloud/keyfile.json\n\n<span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>google<span class=\"token punctuation\">-</span>cloudfunctions\n\n<span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span> http\n    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span> http</code></pre></div>\n<blockquote>\n<p>Note: You’ll need to change the <code class=\"language-text\">project</code> value under the <code class=\"language-text\">provider</code> block so it matches your Project Id. If you don’t know it, you can find it in the <code class=\"language-text\">project_id</code> key in your credentials file at <code class=\"language-text\">~/.gcloud/keyfile.json</code>.</p>\n</blockquote>\n<p>This file is pretty simple. We’re deploying a NodeJS function to Google under our project. There’s a single function, <code class=\"language-text\">http</code>, whose handler is the exported <code class=\"language-text\">http</code> function in <code class=\"language-text\">index.js</code>. Finally, this will be invoked by an HTTP event at <code class=\"language-text\">/http</code>.</p>\n<p>Let’s deploy our function and test it out! Run <code class=\"language-text\">serverless deploy</code> to send it up.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ sls deploy\n\nServerless: Packaging service<span class=\"token punctuation\">..</span>.\n\n <span class=\"token operator\">&lt;</span>snip<span class=\"token operator\">></span> \n \nServerless: Done<span class=\"token punctuation\">..</span>.\n\nService Information\nservice: test-project\nproject: cloud-functions-demo-183501\nstage: dev\nregion: us-central1\n\nDeployed functions\nhttp\n  https://us-central1-cloud-functions-demo-183501.cloudfunctions.net/http</code></pre></div>\n<p>After the deploy is successful, Serverless will show information about your service. This includes the endpoint where you can invoke your function. Let’s invoke it using <code class=\"language-text\">curl</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> https://us-central1-cloud-functions-demo-183501.cloudfunctions.net/http\n$ Hello World<span class=\"token operator\">!</span></code></pre></div>\n<p>Cool! We got our response back. Let’s look at a few more things before moving on.</p>\n<p>The <code class=\"language-text\">request</code> object will have some useful properties just like a normal web request. This includes the HTTP verb (<code class=\"language-text\">request.method</code>), the request body (<code class=\"language-text\">request.body</code>), and query parameters (<code class=\"language-text\">request.query</code>).</p>\n<p>To see this, let’s play around with the query parameters. Edit your <code class=\"language-text\">index.js</code> to log the <code class=\"language-text\">request.query</code> before returning a response:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">http</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Redeploy your function with <code class=\"language-text\">serverless deploy</code>. Once that’s done, call it with <code class=\"language-text\">curl</code> and add some query parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -G https://us-central1-cloud-func83501.cloudfunctions.net/http --data-urlencode <span class=\"token string\">\"name=Alex\"</span> --data-urlencode <span class=\"token string\">\"age=29\"</span>\n$ Hello World<span class=\"token operator\">!</span></code></pre></div>\n<p>We didn’t change our response, so we still get “Hello World!“. We can use Serverless to check our logs to see our query parameters:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ serverless logs --function http\n<span class=\"token number\">2017</span>-10-20T12:38:26.487050893Z: Function execution took <span class=\"token number\">201</span> ms, finished with status code: <span class=\"token number\">200</span>\n<span class=\"token number\">2017</span>-10-20T12:38:26.396Z: <span class=\"token punctuation\">{</span> name: <span class=\"token string\">'Alex'</span>, age: <span class=\"token string\">'29'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token number\">2017</span>-10-20T12:38:26.287081091Z: Function execution started</code></pre></div>\n<p>Cool! We get some information about the execution, and we’re also able to see anything we logged within function. In this case, we see the two parameters — name and age — in our HTTP request.</p>\n<p>With these basics in hand, it’s time to move on to a more advanced example.</p>\n<h1>Building an Image Recognition Endpoint</h1>\n<p>Let’s build something fun. Google Cloud Platform has the <a href=\"https://cloud.google.com/vision/\">Google Vision API</a> which can examine an image and provide details on what it contains. We’re going to build an endpoint that takes in an image URI as a query parameter and returns a list of labels about the image’s contents.</p>\n<p>First, we’ll need to enable the Google Vision API for our project. Go back to the <a href=\"https://console.cloud.google.com/apis/dashboard\">API Dashboard</a> and click <strong>Enable APIs and Services</strong>. Find the Google Vision API and hit Enable.</p>\n<p>Next, we install the SDK for the Vision API into our project:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save @google-cloud/vision</code></pre></div>\n<p>Then, let’s adjust our HTTP handler. The Vision API accepts a URI to a\npublicly-accessible image. Our handler will look for a <code class=\"language-text\">uri</code> query parameter with our request, then send that image URI to the Vision API:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// index.js</span>\n\n<span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> vision <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@google-cloud/vision'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">http</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> uri <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>uri<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uri <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> error<span class=\"token operator\">:</span> <span class=\"token string\">\"Must include a 'uri' query parameter.\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> image <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    source<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      imageUri<span class=\"token operator\">:</span> uri\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  vision<span class=\"token punctuation\">.</span><span class=\"token function\">labelDetection</span><span class=\"token punctuation\">(</span>image<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">results</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> annotations <span class=\"token operator\">=</span> results<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>labelAnnotations<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> labels <span class=\"token operator\">=</span> annotations<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> resp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        image<span class=\"token operator\">:</span> uri<span class=\"token punctuation\">,</span>\n        labels\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>resp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      response<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The response from the Vision API will include an array of <code class=\"language-text\">labelAnnotations</code>, which are general descriptions of what is in the image. We’ll pull out the descriptions from those labels and return them in a JSON response to the client.</p>\n<p>Deploy your updated handler code with <code class=\"language-text\">serverless deploy</code>. Then, let’s try it out with some images!</p>\n<p>I went to <a href=\"https://unsplash.com\">Unsplash</a> to find some cool images. Here’s a festive one of some pumpkins:</p>\n<img alt=\"Pumpkins\" src=\"https://user-images.githubusercontent.com/6509926/31823039-59eb94c6-b570-11e7-82c7-69d7f2e7cc5e.jpg\">\n<p><em>Credit to <a href=\"https://unsplash.com/@littlebearhugs\">Donna</a> on Unsplash</em></p>\n<p>Let’s send it to our endpoint. I’m going to pipe the response through <a href=\"https://stedolan.github.io/jq/\">jq</a>, which is a utility for interacting with JSON in the terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">URI</span><span class=\"token operator\">=</span>https://user-images.githubusercontent.com/6509926/31823039-59eb94c6-b570-11e7-82c7-69d7f2e7cc5e.jpg\n$ <span class=\"token function\">curl</span> -G https://us-central1-cloud-functions-demo-183501.cloudfunctions.net/http --data-urlencode <span class=\"token string\">\"uri=<span class=\"token variable\">$URI</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token string\">\".\"</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"image\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://user-images.githubusercontent.com/6509926/31823039-59eb94c6-b570-11e7-82c7-69d7f2e7cc5e.jpg\"</span>,\n  <span class=\"token string\">\"labels\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"winter squash\"</span>,\n    <span class=\"token string\">\"pumpkin\"</span>,\n    <span class=\"token string\">\"cucurbita\"</span>,\n    <span class=\"token string\">\"calabaza\"</span>,\n    <span class=\"token string\">\"vegetable\"</span>,\n    <span class=\"token string\">\"gourd\"</span>,\n    <span class=\"token string\">\"local food\"</span>,\n    <span class=\"token string\">\"cucumber gourd and melon family\"</span>,\n    <span class=\"token string\">\"squash\"</span>,\n    <span class=\"token string\">\"produce\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Neat! It knows that I’ve sent it some pumpkins. </p>\n<p>Let’s try one more, with <a href=\"https://www.youtube.com/watch?v=ACmydtFDTGs\">everyone’s favorite example</a>:</p>\n<img alt=\"Hot Dog\" src=\"https://user-images.githubusercontent.com/6509926/31823235-0ff6e928-b571-11e7-9671-de399f4f5165.png\">\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">URI</span><span class=\"token operator\">=</span>https://user-images.githubusercontent.com/6509926/31823235-0ff6e928-b571-11e7-9671-de399f4f5165.png\n$ <span class=\"token function\">curl</span> -G https://us-central1-cloud-functions-demo-183501.cloudfunctions.net/http --data-urlencode <span class=\"token string\">\"uri=<span class=\"token variable\">$URI</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token string\">\".\"</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"image\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"https://user-images.githubusercontent.com/6509926/31823235-0ff6e928-b571-11e7-9671-de399f4f5165.png\"</span>,\n  <span class=\"token string\">\"labels\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"hot dog\"</span>,\n    <span class=\"token string\">\"frankfurter würstchen\"</span>,\n    <span class=\"token string\">\"bockwurst\"</span>,\n    <span class=\"token string\">\"knackwurst\"</span>,\n    <span class=\"token string\">\"hot dog bun\"</span>,\n    <span class=\"token string\">\"sausage\"</span>,\n    <span class=\"token string\">\"vienna sausage\"</span>,\n    <span class=\"token string\">\"cervelat\"</span>,\n    <span class=\"token string\">\"kielbasa\"</span>,\n    <span class=\"token string\">\"fast food\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sure enough — it’s a hot dog!</p>\n<h1>Concluding Thoughts on Google Cloud Functions</h1>\n<p>I had a lot of fun building this. The Google Cloud Platform has a lot of interesting services, and I’m excited to see where the Cloud Functions product goes from here.</p>\n<p>In particular, I think Google Cloud Platform has some really great data stores for the Serverless world.  <a href=\"https://firebase.google.com/\">Firebase</a> was a groundbreaking product when it released a few years ago, and the new <a href=\"https://firebase.google.com/docs/firestore\">Firestore</a> database looks like a great option — NoSQL but with a more flexible query pattern, more similar to MongoDB than DynamoDB. For SQL lovers out there (like me!), <a href=\"https://cloud.google.com/spanner/\">Cloud Spanner</a> is an awesome, powerful product.</p>\n<p>Additionally, GCP has some great supporting services as well. The machine learning services like the Vision API and the <a href=\"https://cloud.google.com/natural-language/\">Natural Language API</a>. There are also some amazing data processing products like BigQuery, Cloud Dataflow, and Cloud Pub/Sub.</p>\n<p>There are a few areas I’d like to see Cloud Functions mature as well.\nThese are:</p>\n<ul>\n<li><strong>A stable version.</strong> Cloud Functions are still in beta — I’d like to see a stable release before relying on it for production services. </li>\n<li><strong>More language runtimes.</strong> Python, please! 🐍. Right now, it’s strictly Node.js.</li>\n<li><strong>Better integrations with other services.</strong> On the AWS side, we’re seeing more and more hooks from AWS services into Lambda. I’d like to see the same in Google.</li>\n<li><strong>API Gateway.</strong> The GCF HTTP function feels like a single random endpoint for small demos. Contrast this with AWS, where endpoints feel more composed as a service. I can easily add custom domains to my Lambda endpoints and do HTTP validation and transformations before it hits my Lambda function.</li>\n</ul>\n<p>Excited to see where Cloud Functions goes from here!</p>","frontmatter":{"title":"Building an image recognition endpoint with Serverless and Google Cloud Functions.","date":"October 20, 2017","description":"Use Serverless, Google Cloud Functions, and the Cloud Vision API to build an endpoint to classify images."}}},"pageContext":{"slug":"/posts/2017-10-20-google-cloud-functions-application/","previous":{"fields":{"slug":"/posts/2017-10-20-make-serverless-graphql-api-using-lambda-dynamodb/"},"frontmatter":{"title":"How to Make a Serverless GraphQL API using Lambda and DynamoDB"}},"next":{"fields":{"slug":"/posts/2017-10-19-3rd-party-rest-api-to-graphql-serverless/"},"frontmatter":{"title":"Creating a Serverless GraphQL Gateway on top of a 3rd Party REST API"}}}}}